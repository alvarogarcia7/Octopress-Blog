<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shellcode | Parsiya's Den]]></title>
  <link href="http://parsiya.net/blog/categories/shellcode/atom.xml" rel="self"/>
  <link href="http://parsiya.net/"/>
  <updated>2014-12-10T23:57:02-05:00</updated>
  <id>http://parsiya.net/</id>
  <author>
    <name><![CDATA[Parsiya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pasting Shellcode in GDB Using Python]]></title>
    <link href="http://parsiya.net/blog/2014-05-25-pasting-shellcode-into-gdb-using-python/"/>
    <updated>2014-05-25T18:39:58-04:00</updated>
    <id>http://parsiya.net/blog/pasting-shellcode-into-gdb-using-python</id>
    <content type="html"><![CDATA[<p>A few days ago I was trying to write an exploit for a buffer overflow with GDB. This was a console application and pasting shellcode would mess with it.</p>

<p>There are a few options:</p>

<ul>
  <li>Writing shellcode to a file and then using it as input for GDB.</li>
</ul>

<p>``` python
# you can also include GDB commands like setting up breakpoints (e.g. b * 0xDEADBEEF)
# remember to include a new line after each command
$ python -c ‘print “b * 0xDEADBEEF” + “\n” + “\x41”*1000 + “\n”’ &gt; input</p>

<h1 id="perl--e-for-perl">$ perl -e for perl</h1>

<h1 id="start-debugging-with-gdb">start debugging with GDB</h1>
<p># -q (quiet mode): no text at startup
$ gdb executable1 -q
(gdb) run &lt; input</p>

<p>```</p>

<p>After this you can manually debug in GDB.</p>

<ul>
  <li>Writing a Python script for interactive debugging
When I wrote this, I thought it was a clever idea but then someone told me I could have written a GDB script. However, I have already written this snippet so here it goes.</li>
</ul>

<p>``` python
#!/usr/bin/python</p>

<p>from subprocess import Popen , PIPE
from time import sleep</p>

<h1 id="shellcode">shellcode</h1>
<p>shellcode = “\x41” * 1000 + “\n”</p>

<h1 id="opens-gdb-with-parameter-executable">opens gdb with parameter executable</h1>
<p># you can also manage stdout and stderr here
proc = Popen( [‘gdb’ , ‘executable’] , bufsize=1 ,stdin=PIPE )</p>

<h1 id="sample-breakpoint">sample breakpoint</h1>
<p># notice the new line after each command
proc.stdin.write(‘b *DEADBEEF\n’)</p>

<h1 id="half-a-second-of-sleep-after-each-command">half a second of sleep after each command</h1>
<p>sleep(0.5)</p>

<h1 id="r-or-run-to-start-debugging-the-program-with-gdb">r or run to start debugging the program with GDB</h1>
<p>proc.stdin.write(‘r\n’)
sleep(0.5)</p>

<h1 id="any-other-commands-go-here">any other commands go here</h1>

<h1 id="this-is-a-loop-will-get-every-command-and-pass-it-to-gdb">this is a loop, will get every command and pass it to GDB</h1>
<p># “leave” == quit GDB and terminate process
# “dump”  == paste shellcode
while True:
    mycommand = raw_input()
    if (mycommand == “leave”):
        # quit gdb
        proc.stdin.write(“quit\n”)
        break</p>

<pre><code># paste shellcode
if (mycommand == "dump"):
    proc.stdin.write(shellcode)
# more custom commands go here

# not a custom command? send it as-is
else:
    mycommand = mycommand + '\n' 
    proc.stdin.write(mycommand)
    sleep(0.5)
</code></pre>

<h1 id="close-our-pipe">close our pipe</h1>
<p>proc.stdin.close()</p>

<p>```</p>

<p>I think that this code can be modified and become a very simple fuzzer. We have control over stdin and can read stdout and stderr. Change input, record output, rinse and repeat. </p>

<p><code>subprocess</code> is a very powerful module. For example to normally run an application with an argument we can write <code>subprocess.call(['gdb','executable']) .</code></p>

<p>but let’s say we want to run executable with input (containing shellcode):</p>

<p>``` python
import subprocess</p>

<p>shellcode = “\x41” * 100</p>

<p>subprocess.call( [‘gdb’ , ‘executable’] , shellcode)
```</p>
]]></content>
  </entry>
  
</feed>
