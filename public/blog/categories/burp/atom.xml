<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Burp | Parsia's Den]]></title>
  <link href="http://parsiya.net/blog/categories/burp/atom.xml" rel="self"/>
  <link href="http://parsiya.net/"/>
  <updated>2015-11-19T00:25:06-05:00</updated>
  <id>http://parsiya.net/</id>
  <author>
    <name><![CDATA[Parsiya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Proxying Hipchat Part 3: SSL Added and Removed Here :^)]]></title>
    <link href="http://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/"/>
    <updated>2015-10-19T21:42:10-04:00</updated>
    <id>http://parsiya.net/blog/proxying-hipchat-part-3-ssl-added-and-removed-here</id>
    <content type="html"><![CDATA[<p>Finally we are at part 3 of proxying Hipchat. This has been quite the adventure. In <a href="/blog/2015-10-08-hipchat-part-1-where-did-the-traffic-go/" title="Proxying Hipchat Part 1: Where did the Traffic Go?"><strong>part1</strong></a> we identified the endpoints. In <a href="/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/" title="Proxying Hipchat Part 2: So You Think You Can Use Burp?"><strong>part2</strong></a> we answered the question “So you think you can use Burp” with yes and proxied some of Hipchat’s traffic with Burp.</p>

<p>In this part we will talk about developing our own proxy in Python to view Hipchat’s traffic to/form <code>hipchatserver.com</code> (which our example Hipchat server). First we are going to discuss how proxies work and we will get over Burp breaking our heart by creating our own proxy in Python to observe and dump the traffic in plaintext.</p>

<p>Related (crappy) code is at: <a href="https://bitbucket.org/parsiya/hipchat-proxy/src/">https://bitbucket.org/parsiya/hipchat-proxy/src/</a>.</p>

<p>For a similar effort (although with a much more complex proxy in <code>erlang</code>) look at this post: <a href="http://blog.silentsignal.eu/2015/10/02/proxying-nonstandard-https-traffic/">http://blog.silentsignal.eu/2015/10/02/proxying-nonstandard-https-traffic/</a>. </p>

<!--more-->

<h3 id="breaking-atlassians-eula">-1 Breaking Atlassian’s EULA</h3>
<p>Go to your Hipchat server’s web interface login page and view that page’s source. The same thing appears in <a href="http://downloads.hipchat.com">http://downloads.hipchat.com</a>.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat3/00-hipchatlogin-source-code.png' width='' height='' title='Reverse engineering intensifies'><span class='caption-text'>Reverse engineering intensifies</span></span></p>

<p>Oops we just broke someone’s EULA. Note to people from the future: This is <del>a fresh</del> an already stale Oracle meme (at the time of writing). For more information read an archived version of the article. <a href="https://archive.is/xmtoW#selection-283.0-287.757">https://archive.is/xmtoW#selection-283.0-287.757</a> (you can link selected text in archived web pages, what a time to be alive).</p>

<h3 id="ingredients">0. Ingredients</h3>
<p>I am going to continue where we left last time. I assume you have proxied Hipchat with Burp and have a general idea of what is happening here.
We will need Python. I am writing my code in 2.7.x because why not? But it should be easily portable to 3.x if not as it is. There are no dependencies as we will only use two standard libraries <code>socket</code> and <code>ssl</code>.
We will also need <code>OpenSSL</code> or another way to create a Certificate Authority (CA) and a signed TLS certificate for <code>hipchatserver.com</code>.</p>

<h3 id="hipchat-update">1. Hipchat Update</h3>
<p>Since last part, Hipchat has been update to version <strong>2.2.1395</strong>. If we start Hipchat, we can see one extra request in Burp as follows:</p>

<pre><code>https://www.hipchat.com/release_notes/client_embed/qtwindows?version_num=1388
</code></pre>

<p><code>1388</code> is our current version number before update. This request retrieves the patch notes for all released versions after <code>1388</code> which is basically an HTML page (with some JavaScript in the header that will not be executed as we have seen before).</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat3/01-New-Request.png' width='' height='' title='Request to retrive patchj notes'><span class='caption-text'>Request to retrive patchj notes</span></span></p>

<p>Let’s update and see what happens. The application sends a GET request to retrieve the new installer from <code>https://s3.amazonaws.com/downloads.hipchat.com/windows/HipChat-2.2.1395-win32.msi</code>, and then executes it. After logging in we can see that the requests logged in Burp have not changed from last update.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat3/02-Patch-Notes.png' width='' height='' title='Patch notes in Hipchat'><span class='caption-text'>Patch notes in Hipchat</span></span></p>

<h3 id="how-does-a-proxy-work">2. How does a Proxy Work?</h3>
<p>In order to create our own proxy, we must know how proxies work. We have all used Burp before but we don’t really care what happens under the hood until something goes wrong.</p>

<p>At first look Burp stands between our browser and the server, It receives requests from the browser, relays them to the server and vice versa. But it does a lot more than that. In order to exactly see what happens we need to look at network traffic or in other words <code>pcap or it did not happen</code>. But capturing this traffic a bit tricky as Hipchat’s traffic to Burp is local so Wireshark/Netmon cannot record it. To demonstrate Burp in action I had three choices:</p>

<ol>
  <li>Use Microsoft Message Analyzer to capture both sides of traffic.
    <ul>
      <li>Good: Capture everything in one go.</li>
      <li>Evil: Proprietary format that cannot be opened by Wireshark. Readers have to install the tool (and let’s be honest no one looks at these files anyway :D).</li>
    </ul>
  </li>
  <li>Capture browser’s traffic to Burp via RawCap and Burp’s traffic to the server with Wireshark.
    <ul>
      <li>Good: We have seen the request and can see them in Burp.</li>
      <li>Evil: Difficult to create. Have to use two applications.</li>
    </ul>
  </li>
  <li>Hook up a mobile device and set Burp as Proxy. The try to view something on the mobile device and capture the traffic on machine running Burp.
    <ul>
      <li>Good: Very easy to create.</li>
      <li>Evil: Readers cannot relate.</li>
    </ul>
  </li>
</ol>

<p>I went with the second option. There was however one problem, the timestamps on packets in Wireshark were exactly 4 hours ahead of RawCap (and we are -4 GMT so you can guess why). Usually this is not a problem in a capture because packet sequences are more important that the exact timestamp (I don’t do forensics). I used Wireshark’s timeshift to set them back and then merged both files.</p>

<p>Now let’s see how Burp works. Let’s look at the capture file in Wireshark.</p>

<h4 id="get-httpdownloadshipchatcombloginfohtml">2.1 GET http://downloads.hipchat.com/blog_info.html</h4>

<p>Click for full-size image.</p>

<p><div class='bogus-wrapper'><notextile><div class="imgpopup screen">
  <a href='javascript:void(0)' style="text-decoration: none" id="image-20">
    <img src="/images/2015/hipchat3/03-GET-blog_info-in-Wireshark.png"
         width="1146" height="338"
         alt="Click me."/>
  </a>
  <div id="image-dialog-20" style="display:none">
    <img src="/images/2015/hipchat3/03-GET-blog_info-in-Wireshark.png"
         width="1433" height="423"/>
    <br clear="all"/>
  </div>
</div>
<script type="text/javascript">
  jQuery(document).ready(function() {
    jQuery("#image-dialog-20").hide();
    jQuery("#image-dialog-20").dialog({
      autoOpen:  false,
      modal:     true,
      draggable: false,
      minWidth:  1473,
      minHeight: 463,
      title:     "GET blog_info.html in Wireshark ",
      show:      'scale',
      hide:      'scale'
    });

    jQuery("#image-20").click(function() {
      jQuery("#image-dialog-20").dialog('open');
    });

  });
</script>
</notextile></div></p>

<p>In other words:</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat3/04-GET-blog_info-Sequence-Diagram.png' width='' height='' title='GET blog_info sequence diagram'><span class='caption-text'>GET blog_info sequence diagram</span></span></p>

<p>In other other words:</p>

<ol>
  <li>Hipchat creates a TCP connection to Burp.</li>
  <li>Hipchat sends the GET request to Burp.</li>
  <li>Burp creates a TCP connection to Server.</li>
  <li>Burp sends the GET request to Server.</li>
  <li>Server send the web page to Burp.</li>
  <li>Burp closes the TCP connection to Server.</li>
  <li>Burp sends the web page to Hipchat.</li>
  <li>Burp closes the TCP connection to Hipchat.</li>
</ol>

<p>Some notes:</p>

<ol>
  <li>After the TCP handshake, each request will have an ACK.</li>
  <li>Hipchat is initiating to close the TCP connection in both cases.</li>
  <li>Both connection are closed correctly (FIN) instead of RST. FIN means “I am done with the connection but will listen to what you are saying until you confirm it with another FIN” while RST forcibly closes the connection.</li>
</ol>

<h4 id="get-httpss3amazonawscomuploadshipchatcomfreddiepng">2.2 GET https://s3.amazonaws.com/uploads.hipchat.com/…/freddie.png</h4>
<p>This one is different because it is over TLS.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat3/05-GET-Freddie-in-Wireshark.png' width='' height='' title='GET Freddie.png in Wireshark'><span class='caption-text'>GET Freddie.png in Wireshark</span></span></p>

<p>I am not going to mark the Wireshark screenshot this time. Because the sequence diagram explains everything:</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat3/06-GET-Freddie-Sequence-Diagram.png' width='' height='' title='GET Freddie.png sequence diagram'><span class='caption-text'>GET Freddie.png sequence diagram</span></span></p>

<p>This is very similar to the previous HTTP request. One difference is that Burp will generate its own certificate (signed by its own root Certificate Authority or root CA) for <code>s3.amazonaws.com</code> and present it to Hipchat. Hipchat then checks this certificate for validity and if it is signed by a valid root CA. If you have Burp, you have already added Burp’s CA to Windows’ certificate store (right?) so this fake certificate will be valid.</p>

<h5 id="what-is-this-connect">2.2.1 What is this CONNECT?</h5>
<p>We did not see it last time. This is Hipchat’s way of telling the proxy (Burp) about the destination before starting the TLS handshake. In a normal connection everything after the TLS handshake is encrypted (doh) so the proxy does not see anything inside. And lower level data in the packet (e.g. destination IP) do not have this information either because packets are headed for Burp’s IP which is 127.0.0.1 (or IP address of Burp). Before a TLS connection is established Hipchat will do send the <code>CONNECT</code> request to tell the proxy (in this case Burp) of the destination where the packets should be forwarded.</p>

<p>Remember that while Burp is a Man-in-the-Middle (MitM) proxy and can decrypt TLS connections, most proxies (especially in corporate environments) are just forwarding proxies so they need this <code>CONNECT</code> to work properly. For example if we did not have this <code>CONNECT</code> request, our SSL pass through in part two would have not worked as Burp was not decrypting traffic for that endpoint. Burp is just forwarding whatever it receives to the destination and does not see the content of requests.</p>

<p>Burp is sending this request because it is proxy-aware as we used its option to designate burp as proxy. For non-proxy-aware clients we have to use another one of Burp’s capabilities.</p>

<h5 id="burps-invisible-proxying">2.2.2 Burp’s Invisible Proxying</h5>
<p>In each blog post we are learning a new Burp thing. It seems like we’re becoming quite the Burp expert neh? ;)</p>

<p>If the client is non-proxy-aware and does not send the <code>CONNECT</code> before the TLS handshake (because it doesn’t know it is connected to a proxy), Burp needs to know where to send the requests. As Burp is a MitM proxy and is terminating TLS, it can look inside the payloads and determine the destination from the <code>host</code> header. This is called Burp’s <code>invisible proxying</code>.</p>

<p>It can be enabled at <code>Proxy &gt; Options</code>. Select the proxy listener, click <code>edit</code> and under <code>Request Handling</code> select <code>Support invisible proxying (enable only if needed)</code>.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat3/07-Burp-invisible-proxy-mode.png' width='' height='' title='Burp invisible proxying option (enable only if needed!!1!)'><span class='caption-text'>Burp invisible proxying option (enable only if needed!!1!)</span></span></p>

<h3 id="how-does-hipchat-work">3. How does Hipchat Work?</h3>
<p>Great, now we (hopefully) have a pretty good idea how MItM proxies work. But before developing our own we must observe Hipchat in its natural habitat to cater to its needs. Let’s remove the proxy settings from Hipchat, close it and run it again.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat3/08-Hipchat-Normal-Traffic.png' width='' height='' title='Hipchat normal traffic to the server without Burp'><span class='caption-text'>Hipchat normal traffic to the server without Burp</span></span></p>

<p>In other words. Click for full-size diagram (I have redacted the name of the Hipchat server because I am lazy):</p>

<p><div class='bogus-wrapper'><notextile><div class="imgpopup screen">
  <a href='javascript:void(0)' style="text-decoration: none" id="image-21">
    <img src="/images/2015/hipchat3/09-Hipchat-in-Action.png"
         width="955" height="386"
         alt="Click me."/>
  </a>
  <div id="image-dialog-21" style="display:none">
    <img src="/images/2015/hipchat3/09-Hipchat-in-Action.png"
         width="1194" height="482"/>
    <br clear="all"/>
  </div>
</div>
<script type="text/javascript">
  jQuery(document).ready(function() {
    jQuery("#image-dialog-21").hide();
    jQuery("#image-dialog-21").dialog({
      autoOpen:  false,
      modal:     true,
      draggable: false,
      minWidth:  1234,
      minHeight: 522,
      title:     "Hipchat in actionk ",
      show:      'scale',
      hide:      'scale'
    });

    jQuery("#image-21").click(function() {
      jQuery("#image-dialog-21").dialog('open');
    });

  });
</script>
</notextile></div></p>

<p>In other other words:</p>

<ol>
  <li>TCP handshake.</li>
  <li>Client starts the XMPP handshake.</li>
  <li>Server responds and indicates that TLS is required.</li>
  <li>Client sends STARTTLS indicating that it is ready to well, start TLS.</li>
  <li>Server responds with PROCEED.</li>
  <li>TLS handshake.</li>
  <li>TLS traffic.</li>
</ol>

<p>If you remember part two where we proxied the traffic through Burp, it would butcher the first XMPP handshake request and then the server would reset the connection. Now that we have seen how Hipchat works we can create our own proxy.</p>

<h3 id="proxy-design">4. Proxy Design</h3>
<p>Let’s reiterate what the proxy needs to do:</p>

<ol>
  <li>Create a TCP socket and start listening on port <code>5222</code> (Hipchat port). Let’s call it the client socket.</li>
  <li>When a connection is made, read the first part of XMPP handshake from client.</li>
  <li>Create a TCP connection to hipchatserver.com. Let’s call it the server socket.</li>
  <li>Send the message relayed from client to server.</li>
  <li>Read the server’s response (2nd part of XMPP handshake) from server socket and relay it back to client. This will contain the <code>STARTTLS</code> requirement.</li>
  <li>Read the <code>STARTTLS</code> message from client (indicating) that it is ready to start doing TLS and send it to server.</li>
  <li>Receive <code>PROCEED</code> from server and send it to client.</li>
  <li>Convert both client and server connections to TLS.</li>
  <li>Read from client socket, decrypt the message and send it to server via the (now TLS) server socket.</li>
  <li>Read from server socket, decrypt the message and send it to client via client socket.</li>
</ol>

<p>Seems easy enough right? To be honest it is (you were expecting me to say wrong didn’t you? :D).</p>

<h4 id="tls-certificate-blues">4.1 TLS Certificate Blues</h4>
<p>We need to create a TLS certificate for <code>hipchatserver.com</code> to present to Hipchat when we upgrade the connection to TLS. Here’s a catch, you can create a self-signed certificate which means that it is signed by itself. Self-signed certificate is also used in a different situation in the field which means an organization is signing their own certificates. In both cases, it means that the certificate is not valid. Hipchat will freak out if you give it a self-signed certificate signed by itself.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat3/10-self-signed-cert-error-in-hipchat-client.png' width='' height='' title='Self signed cert error in Hipchat'><span class='caption-text'>Self signed cert error in Hipchat</span></span></p>

<p>Even if you select “I know what I’m doing” and try to proceed, Hipchat will break the connection. So we need to generate our own root CA and sign our certificate with it and finally add this root CA to the list of trusted certificate authorities in Windows certificate store (just like we did with Burp’s CA).</p>

<h4 id="generating-tls-certificates">4.2 Generating TLS Certificates</h4>
<p>I generated my certificates using <code>OpenSSL</code> in <code>Cygwin</code>. First we need to create a pair of RSA keys and then use them to create a root CA.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>creating our root CA </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Generate a 2048 bit RSA key pair</span>
</span><span class='line'>openssl genrsa -out rootCA.key 2048&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;create-a-rootca-valid-for-a-year&quot;</span>&gt;Create a rootCA <span class="o">(</span>valid <span class="k">for </span>a year<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;openssl req -x509 -new -nodes -key rootCA.key -days 365 -out rootCA.crt&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;generate-a-2048-bit-rsa-key-pair&quot;</span>&gt;Generate a 2048 bit RSA key pair&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;openssl genrsa -out rootCA.key 2048&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;create-a-rootca-valid-for-a-year-1&quot;</span>&gt;Create a rootCA <span class="o">(</span>valid <span class="k">for </span>a year<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;openssl req -x509 -new -nodes -key rootCA.key -days 365 -out rootCA.crt
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And you will see something similar to this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>creating our root CA in Cygwin </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl genrsa -out rootCA.key 2048
</span><span class='line'>Generating RSA private key, 2048 bit long modulus
</span><span class='line'>………………………………………+++
</span><span class='line'>……+++
</span><span class='line'>e is 65537 <span class="o">(</span>0x10001<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>openssl req -x509 -new -nodes -key rootCA.key -days 365 -out rootCA.crt
</span><span class='line'><span class="nv">$ </span>openssl genrsa -out rootCA.key 2048
</span><span class='line'>Generating RSA private key, 2048 bit long modulus
</span><span class='line'>………………………………………+++
</span><span class='line'>……+++
</span><span class='line'>e is 65537 <span class="o">(</span>0x10001<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>openssl req -x509 -new -nodes -key rootCA.key -days 365 -out rootCA.crt
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter ‘.’, the field will be left blank.
</span><span class='line'>—–
</span><span class='line'>Country Name <span class="o">(</span>2 letter code<span class="o">)</span> <span class="o">[</span>AU<span class="o">]</span>:US
</span><span class='line'>State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>Some-State<span class="o">]</span>:
</span><span class='line'>Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[]</span>:
</span><span class='line'>Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>Internet Widgits Pty Ltd<span class="o">]</span>:
</span><span class='line'>Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[]</span>:
</span><span class='line'>Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:
</span><span class='line'>Email Address <span class="o">[]</span>:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we need to create our certificate for <code>hipchatserver.com</code> and then sign it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>creating the certificate for Hipchat server </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># First we need to create a key pair for the new certificate</span>
</span><span class='line'>openssl genrsa -out host.key 2048&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;then-we-will-use-the-key-pair-to-generate-a-certificate-signing-request-or-csr&quot;</span>&gt;Then we will use the key pair to generate a Certificate Signing Request or CSR&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;# This is what you send to valid certificate authorities to ask them to create &amp;amp; sign a valid certificate <span class="k">for </span>you
</span><span class='line'>openssl req -new -key host.key -out host.csr&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;now-we-can-create-a-valid-certificate-and-sign-it-with-our-rootca&quot;</span>&gt;Now we can create a valid certificate and sign it with our rootCA&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;openssl x509 -req -in host.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out host.crt -days 365
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>creating the certificate for Hipchat server in Cygwin </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Key pair generation</span>
</span><span class='line'><span class="nv">$ </span>openssl genrsa -out host.key 2048
</span><span class='line'>Generating RSA private key, 2048 bit long modulus
</span><span class='line'>………………………………………………………………………………………………………………………………………………………………………………………………………………………..+++
</span><span class='line'>………+++
</span><span class='line'>e is 65537 <span class="o">(</span>0x10001<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;csr&quot;</span>&gt;CSR&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>openssl req -new -key host.key -out host.csr
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter ‘.’, the field will be left blank.
</span><span class='line'>—–
</span><span class='line'>Country Name <span class="o">(</span>2 letter code<span class="o">)</span> <span class="o">[</span>AU<span class="o">]</span>:US
</span><span class='line'>State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>Some-State<span class="o">]</span>:Virginia
</span><span class='line'>Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[]</span>:
</span><span class='line'>Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>Internet Widgits Pty Ltd<span class="o">]</span>:
</span><span class='line'>Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[]</span>:
</span><span class='line'>Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:hipchatserver.com
</span><span class='line'>Email Address <span class="o">[]</span>:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Please enter the following ‘extra’ attributes
</span><span class='line'>to be sent with your certificate request
</span><span class='line'>A challenge password <span class="o">[]</span>:
</span><span class='line'>An optional company name <span class="o">[]</span>:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;tls-certificate-creation&quot;</span>&gt;TLS certificate creation&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>openssl x509 -req -in host.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out host.crt -days 365
</span><span class='line'>Signature ok
</span><span class='line'><span class="nv">subject</span><span class="o">=</span>/C<span class="o">=</span>US/ST<span class="o">=</span>Virginia/O<span class="o">=</span>Internet Widgits Pty Ltd/CN<span class="o">=</span>hipchatserver.com
</span><span class='line'>Getting CA Private Key&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;this-is-what-we-will-finally-have&quot;</span>&gt;This is what we will finally have&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>ls
</span><span class='line'>host.crt host.csr host.key rootCA.crt rootCA.key rootCA.srl
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice that I entered <code>hipchatserver.com</code> for the certificate’s Common Name (CN), this is handy in case the client is checking this field against the server. Obviously you should keep the key files secret.</p>

<p>This can also be done on the fly in our proxy but I decided to do it outside to keep it simple. A proxy can discover the endpoint via the <code>CONNECT</code> request and create a certificate for that domain. In a non-proxy aware situation where the <code>CONNECT</code> is not sent, we either have to tell the proxy to create a proxy for a specific endpoint or just present a certificate with a random CN and hope for the best. In Burp we can specify the endpoint manually and/or tell Burp to create a certificate with a specific CN for each proxy listener.</p>

<h3 id="redirecting-traffic-from-non-proxy-aware-clients">5. Redirecting Traffic from Non-Proxy-Aware Clients</h3>
<p>This is another problem. Assuming we are listening on <code>127.0.0.1:5222</code> how are we going to redirect Hipchat’s traffic to our proxy? We can use Hipchat’s proxy configuration to do this but let’s not use that because I want to talk about redirecting traffic for non-proxy-aware clients.</p>

<p>We only need traffic to hipchatserver.com all traffic must be redirected to <code>127.0.0.1</code> or <code>localhost</code>. On Windows this can be done through the <code>hosts</code> file. Open your favorite text editor as administrator and open it at the following location:</p>

<pre><code>%windir%\system32\drivers\etc\hosts
or
c:\windows\system32\drivers\etc\hosts
</code></pre>

<p>Add the following line to the file and save:</p>

<pre><code>127.0.0.1 hipchatserver.com
</code></pre>

<p>We could also do it with a kernel driver like <code>WinDivert</code> like we did in <code>[redacted internal proxy tool]</code>. Although the traffic is redirected, the port does not change so our proxy needs to listen on port <code>5222</code>.</p>

<p>Let’s remove proxy settings from Hipchat and we are good to go.</p>

<h3 id="hipproxy">6. HipProxy</h3>
<p>Now let’s look at our proxy code. Comments should give us enough info.</p>

<p>Remember to copy <code>host.crt</code> and <code>host.key</code> into the directory where the Python code is (or modify their paths in the source code):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HipProxy-commented.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># listen on 127.0.0.1:5222</span>
</span><span class='line'><span class="n">PROXY_HOST</span> <span class="o">=</span> <span class="err">“</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="err">”</span>
</span><span class='line'><span class="n">PROXY_PORT</span> <span class="o">=</span> <span class="mi">5222</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;send-everything-to-hipchatservercom5222&quot;</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">everything</span> <span class="n">to</span> <span class="n">hipchatserver</span><span class="o">.</span><span class="n">com</span><span class="p">:</span><span class="mi">5222</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">REMOTE_HOST</span> <span class="o">=</span> <span class="err">“</span><span class="mf">10.11</span><span class="o">.</span><span class="mf">1.25</span><span class="err">”</span>  <span class="c"># hipchatserver.com</span>
</span><span class='line'><span class="n">REMOTE_PORT</span> <span class="o">=</span> <span class="mi">5222</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;buffer-size-in-bytes&quot;</span><span class="o">&gt;</span><span class="nb">buffer</span> <span class="n">size</span> <span class="ow">in</span> <span class="nb">bytes</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># we will need such a large buffer because server will send a lot of data after the connection is established</span>
</span><span class='line'><span class="n">BUF_SIZE</span> <span class="o">=</span> <span class="mi">8192</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ssl</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">hexlify</span><span class="p">,</span> <span class="n">unhexlify</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;create-socket-1270015222&quot;</span><span class="o">&gt;</span><span class="n">create</span> <span class="n">socket</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">:</span><span class="mi">5222</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;this-cant-be-non-blocking-for-obvious-reasons&quot;</span><span class="o">&gt;</span><span class="n">this</span> <span class="n">can</span><span class="err">’</span><span class="n">t</span> <span class="n">be</span> <span class="n">non</span><span class="o">-</span><span class="n">blocking</span> <span class="k">for</span> <span class="n">obvious</span> <span class="n">reasons</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">listensocket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;bind-it-to-1270015222&quot;</span><span class="o">&gt;</span><span class="n">bind</span> <span class="n">it</span> <span class="n">to</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">:</span><span class="mi">5222</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">listensocket</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="n">PROXY_HOST</span><span class="p">,</span> <span class="n">PROXY_PORT</span><span class="p">))</span>
</span><span class='line'><span class="n">listensocket</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c"># 1 for now - you can add more if you want multiple clients but we only need one&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Created</span> <span class="n">socket</span> <span class="n">on</span> <span class="o">%</span><span class="n">s</span><span class="p">:</span><span class="o">%</span><span class="n">s</span> <span class="ow">and</span> <span class="n">listening</span><span class="err">”</span> <span class="o">%</span> <span class="p">(</span><span class="n">PROXY_HOST</span><span class="p">,</span> <span class="n">PROXY_PORT</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;now-accept-connections-from-hipchat-client&quot;</span><span class="o">&gt;</span><span class="n">now</span> <span class="n">accept</span> <span class="n">connections</span> <span class="kn">from</span> <span class="nn">hipchat</span> <span class="nn">client</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clientsocket</span><span class="p">,</span> <span class="n">clientaddress</span> <span class="o">=</span> <span class="n">listensocket</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;this-should-be-localhost-or-127001&quot;</span><span class="o">&gt;</span><span class="n">this</span> <span class="n">should</span> <span class="n">be</span> <span class="n">localhost</span> <span class="ow">or</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># str is needed because otherwise it cannot be printed properly and we get an errors</span>
</span><span class='line'><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Accepted</span> <span class="n">connection</span> <span class="kn">from</span> <span class="o">%</span><span class="n">s</span><span class="err">”</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">clientaddress</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;listen-for-xmppmsg1-first-step-of-xmpp--handshake&quot;</span><span class="o">&gt;</span><span class="n">listen</span> <span class="k">for</span> <span class="n">xmpp_msg1</span> <span class="p">(</span><span class="n">first</span> <span class="n">step</span> <span class="n">of</span> <span class="n">XMPP</span>  <span class="n">handshake</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">xmpp_msg1</span> <span class="o">=</span> <span class="n">clientsocket</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUF_SIZE</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Received</span> <span class="n">msg</span> <span class="kn">from</span> <span class="nn">client</span><span class="p">:</span>\<span class="n">n</span><span class="o">%</span><span class="n">s</span><span class="err">”</span> <span class="o">%</span> <span class="p">(</span><span class="n">xmpp_msg1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;create-a-connection-to-srver-and-send-it&quot;</span><span class="o">&gt;</span><span class="n">create</span> <span class="n">a</span> <span class="n">connection</span> <span class="n">to</span> <span class="n">srver</span> <span class="ow">and</span> <span class="n">send</span> <span class="n">it</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">serversocket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">serversocket</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span> <span class="p">(</span><span class="n">REMOTE_HOST</span><span class="p">,</span> <span class="n">REMOTE_PORT</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Connected</span> <span class="n">to</span> <span class="n">server</span> <span class="n">at</span> <span class="o">%</span><span class="n">s</span><span class="p">:</span><span class="o">%</span><span class="n">s</span>\<span class="n">n</span><span class="err">”</span> <span class="o">%</span> <span class="p">(</span><span class="n">REMOTE_HOST</span><span class="p">,</span> <span class="n">REMOTE_PORT</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;send-xmppmsg1&quot;</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">xmpp_msg1</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">serversocket</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">xmpp_msg1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Sending</span> <span class="n">xmpp_msg1</span> <span class="n">to</span> <span class="n">server</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;receive-xmppmsg2-from-server&quot;</span><span class="o">&gt;</span><span class="n">receive</span> <span class="n">xmpp_msg2</span> <span class="kn">from</span> <span class="nn">server</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">xmpp_msg2</span> <span class="o">=</span> <span class="n">serversocket</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUF_SIZE</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Received</span> <span class="n">msg</span> <span class="kn">from</span> <span class="nn">server</span><span class="p">:</span>\<span class="n">n</span><span class="o">%</span><span class="n">s</span><span class="err">”</span> <span class="o">%</span><span class="p">(</span><span class="n">xmpp_msg2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;relay-it-to-client&quot;</span><span class="o">&gt;</span><span class="n">relay</span> <span class="n">it</span> <span class="n">to</span> <span class="n">client</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clientsocket</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">xmpp_msg2</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Send</span> <span class="n">xmpp_msg2</span> <span class="n">to</span> <span class="n">client</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;receive-xmppmsg3&quot;</span><span class="o">&gt;</span><span class="n">receive</span> <span class="n">xmpp_msg3</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">xmpp_msg3</span> <span class="o">=</span> <span class="n">clientsocket</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUF_SIZE</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Received</span> <span class="n">xmpp_msg3</span> <span class="p">(</span><span class="n">STARTTLS</span><span class="p">)</span> <span class="kn">from</span> <span class="nn">client</span><span class="p">:</span>\<span class="n">n</span><span class="o">%</span><span class="n">s</span><span class="err">”</span> <span class="o">%</span> <span class="p">(</span><span class="n">xmpp_msg3</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;this-should-be-the-starttls-one&quot;</span><span class="o">&gt;</span><span class="n">this</span> <span class="n">should</span> <span class="n">be</span> <span class="n">the</span> <span class="n">STARTTLS</span> <span class="n">one</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># &lt;starttls xmlns=&quot;urn:ietf:params:xml:ns:xmpp-tls&quot; /&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;relay-it-to-server&quot;</span><span class="o">&gt;</span><span class="n">relay</span> <span class="n">it</span> <span class="n">to</span> <span class="n">server</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">serversocket</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">xmpp_msg3</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Sent</span> <span class="n">xmpp_msg3</span> <span class="p">(</span><span class="n">STARTTLS</span><span class="p">)</span> <span class="n">to</span> <span class="n">server</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;receive-xmppmsg4-from-server&quot;</span><span class="o">&gt;</span><span class="n">receive</span> <span class="n">xmpp_msg4</span> <span class="kn">from</span> <span class="nn">server</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">xmpp_msg4</span> <span class="o">=</span> <span class="n">serversocket</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUF_SIZE</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Received</span> <span class="n">xmpp_msg4</span> <span class="p">(</span><span class="n">PROCEED</span><span class="p">)</span> <span class="kn">from</span> <span class="nn">server</span><span class="p">:</span>\<span class="n">n</span><span class="o">%</span><span class="n">s</span><span class="err">”</span> <span class="o">%</span><span class="p">(</span><span class="n">xmpp_msg4</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;this-should-be-proceed&quot;</span><span class="o">&gt;</span><span class="n">this</span> <span class="n">should</span> <span class="n">be</span> <span class="n">PROCEED</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># &lt;proceed xmlns=&quot;urn:ietf:params:xml:ns:xmpp-tls&quot; /&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="err">“</span><span class="n">proceed</span><span class="err">”</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">xmpp_msg4</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="err">“</span>\<span class="n">n</span> <span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Something</span> <span class="n">went</span> <span class="n">wrong</span><span class="p">,</span> <span class="n">server</span> <span class="n">did</span> <span class="ow">not</span> <span class="n">respond</span> <span class="k">with</span> <span class="n">proceed</span><span class="err">”</span>
</span><span class='line'>    <span class="nb">exit</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">clientsocket</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">xmpp_msg4</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Sending</span> <span class="n">xmpp_msg4</span> <span class="p">(</span><span class="n">PROCEED</span><span class="p">)</span> <span class="n">to</span> <span class="n">client</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Going</span> <span class="n">TLS</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;now-we-must-wrap-our-sockets-in-tls&quot;</span><span class="o">&gt;</span><span class="n">now</span> <span class="n">we</span> <span class="n">must</span> <span class="n">wrap</span> <span class="n">our</span> <span class="n">sockets</span> <span class="ow">in</span> <span class="n">TLS</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># fortunately this is very easy in Python&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;converting-clientsocket-to-tls&quot;</span><span class="o">&gt;</span><span class="n">converting</span> <span class="n">clientsocket</span> <span class="n">to</span> <span class="n">TLS</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># modify the path host.crt and host.key (if they are not in the same directory)</span>
</span><span class='line'><span class="n">tlsclient</span> <span class="o">=</span> <span class="n">ssl</span><span class="o">.</span><span class="n">wrap_socket</span><span class="p">(</span><span class="n">clientsocket</span><span class="p">,</span> <span class="n">keyfile</span><span class="o">=</span><span class="err">”</span><span class="n">host</span><span class="o">.</span><span class="n">key</span><span class="err">”</span><span class="p">,</span> <span class="n">certfile</span><span class="o">=</span><span class="err">”</span><span class="n">host</span><span class="o">.</span><span class="n">crt</span><span class="err">”</span><span class="p">,</span> <span class="n">server_side</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">cert_reqs</span><span class="o">=</span><span class="n">ssl</span><span class="o">.</span><span class="n">CERT_NONE</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;set-it-to-non-blocking&quot;</span><span class="o">&gt;</span><span class="nb">set</span> <span class="n">it</span> <span class="n">to</span> <span class="n">non</span><span class="o">-</span><span class="n">blocking</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">tlsclient</span><span class="o">.</span><span class="n">setblocking</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;set-timeout-to-05-sec&quot;</span><span class="o">&gt;</span><span class="nb">set</span> <span class="n">timeout</span> <span class="n">to</span> <span class="mf">0.5</span> <span class="n">sec</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">tlsclient</span><span class="o">.</span><span class="n">settimeout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;sslcertnone--cert-is-not-required-and-will-not-be-validated-if-provided&quot;</span><span class="o">&gt;</span><span class="n">ssl</span><span class="o">.</span><span class="n">CERT_NONE</span> <span class="o">==</span> <span class="n">cert</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">required</span> <span class="ow">and</span> <span class="n">will</span> <span class="ow">not</span> <span class="n">be</span> <span class="n">validated</span> <span class="k">if</span> <span class="n">provided</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># this is not generally safe but we know the endpoint in this scenario</span>
</span><span class='line'><span class="c"># this means, don’t care if hipchatserver.com responds with a crappy certificate</span>
</span><span class='line'><span class="n">tlsserver</span> <span class="o">=</span> <span class="n">ssl</span><span class="o">.</span><span class="n">wrap_socket</span><span class="p">(</span><span class="n">serversocket</span><span class="p">,</span> <span class="n">server_side</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">cert_reqs</span><span class="o">=</span><span class="n">ssl</span><span class="o">.</span><span class="n">CERT_NONE</span><span class="p">)</span>
</span><span class='line'><span class="n">tlsserver</span><span class="o">.</span><span class="n">setblocking</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">tlsserver</span><span class="o">.</span><span class="n">settimeout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;ssl-added-and-removed-here-&quot;</span><span class="o">&gt;</span><span class="n">SSL</span> <span class="n">added</span> <span class="ow">and</span> <span class="n">removed</span> <span class="n">here</span> <span class="p">:</span><span class="o">^</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># 2meta4me&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;now-we-are-going-to-juggle-connections&quot;</span><span class="o">&gt;</span><span class="n">now</span> <span class="n">we</span> <span class="n">are</span> <span class="n">going</span> <span class="n">to</span> <span class="n">juggle</span> <span class="n">connections</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># listen on one for half a second and send on the other one then vice versa&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># receive on client-side</span>
</span><span class='line'>        <span class="n">msg_from_client</span> <span class="o">=</span> <span class="n">tlsclient</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUF_SIZE</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="p">(</span> <span class="err">“</span>\<span class="n">n</span><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Received</span> <span class="kn">from</span> <span class="nn">client</span><span class="p">:</span>\<span class="n">n</span><span class="o">%</span><span class="n">s</span><span class="err">”</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg_from_client</span><span class="p">)</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">tlsserver</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">msg_from_client</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># sockets are non-blocking which means that they will timeout</span>
</span><span class='line'><span class="c"># here we check if they actually timedout</span>
</span><span class='line'><span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span> <span class="k">as</span> <span class="n">socket_exception</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&quot;timed out&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">socket_exception</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">[+] Error receiving data from client</span><span class="se">\n</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">socket_exception</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">msg_from_server</span> <span class="o">=</span> <span class="n">tlsserver</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUF_SIZE</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">[+] Received from server:</span><span class="se">\n</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg_from_server</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>	
</span><span class='line'>    <span class="n">tlsclient</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">msg_from_server</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span> <span class="k">as</span> <span class="n">socket_exception</span><span class="p">:</span>
</span><span class='line'>     <span class="k">if</span> <span class="s">&quot;timed out&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">socket_exception</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">[+] Error receiving data from server</span><span class="se">\n</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">socket_exception</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat3/11-It-works.png' width='' height='' title='And it works'><span class='caption-text'>And it works</span></span></p>

<p>If you run the proxy, you will see that after the connection is made, server starts sending the whole address book and any messages in all available chatrooms (even if you are not logged into them), after the initial barrage of data from the server, the rest will be mild unless you are in very crowded chatrooms.</p>

<p>The proxy is also slow as it is printing everything to console, I have a different version of it that dumps the traffic to text files named <code>HipProxy-filedump.py</code>. This is a lot faster and allows us to look at the traffic offline. There will be three (almost) text files <code>everything.dump</code>, <code>fromclient.dump</code> and <code>fromserver.dump</code>.</p>

<h4 id="connection-juggling">6.1 Connection Juggling</h4>
<p>As you saw, I juggled the TLS connections. After both TCP connections were converted to TLS (did you see how easy it was to do it in Python?) both client and server sockets were converted to non-blocking and their timeouts set to 0.5 seconds. At any given time, one socket is receiving and the other is sending. Each socket will send/receive for half a second before timing out and raising an exception (because they non-blocking). Then I caught these exceptions and checked if the exception text contained “timed out.” If this occurs we have not encountered any problems and keep juggling. This method not optimal but is a pretty simple concept and works. We are not transferring large chunks of data and only have two connections.</p>

<h4 id="notes-about-the-python-code">6.2 Notes about the Python Code</h4>
<p>It was really easy, it took me more time to write the blogs (creating good capture files to explain how Burp works took a long time) than to actually do the technical part. Without comments the proxy is less than 50 lines in Python (43 lines to be exact including the file logging lines) so now you know why we use scripting languages. I assume it is going to be as easy in Ruby and whatever Perl is :).</p>

<p>You could say this is not good Python code, fortunately I am not a dev. It does not check for errors, it is not modular and does not work for other programs. But it works for Hipchat and does the job. My main objective was to write to show and explain how a MitM proxy works. With a few hacky modifications you can even inject traffic (I will do it one day).</p>

<h3 id="some-interesting-items">7. Some Interesting Items</h3>
<p>I will probably revisit the proxy later and start analyzing Hipchat’s traffic (which is basically XMPP) and modify the proxy to inject traffic. Here are some interesting things that I noted in my cursory look:</p>

<h4 id="auth">7.1 Auth</h4>
<p>Open the file fromclient.dump and look at the data sent by the client. The second message is the auth message and is in the following form:</p>

<p><code>xml
&lt;auth xmlns='http://hipchat.com'&gt;some base64 data&lt;/auth&gt;
</code></p>

<p>If you decode this base64 blob you can see the following:</p>

<pre><code>0x00username0x00Password0x00windows
</code></pre>

<h4 id="ian-ate-the-hash">7.2 Ian Ate the Hash</h4>
<p>XMPP supports using hash functions for integrity checks but in Hipchat we see the value of hash function is set to <code>IANWASHERE</code>. In a normal XMPP message, it contains the name of a hash function and there is a base64 encoded hash (of something):</p>

<p>```xml
# Hipchat message</p>
<presence>
  <c xmlns="http://jabber.org/protocol/caps" hash="IANWASHERE" node="http://hipchat.com/client/qt/windows" ver="2.2.1395" os_ver="Windows 7" />
</presence>

<h1 id="normal-xmpp-message">normal XMPP message</h1>
<presence from="romeo@montague.lit/orchard">
  <c xmlns="http://jabber.org/protocol/caps" hash="sha-1" node="http://code.google.com/p/exodus" ver="QgayPKawpkPSDYmwT/WM94uAlu0=" />
</presence>
<p>```</p>

<h4 id="servers-data-dump-at-startup">7.3 Server’s Data Dump at Startup</h4>
<p>If you look at the data coming from server, you can see that the server sends the address book (everyone’s information) after establishing the connection. We can also see all messages in all accessible chatrooms being downloaded (although I was not logged into any chatroom) perhaps for caching purposes. This is why the connection is so slow at start but stabilizes after a while.</p>

<h4 id="cleaning-up">7.4 Cleaning Up</h4>
<p>Remember to delete the data dumps as they contain your username and password in plaintext. Also remember to remove the root certificate from Windows’ certificate store.</p>

<p>Ok, that was all folks. I hope this is useful, I mean it is. Sooner or later you have to write your own proxy. As usual if you have any complaints, you know where to find me, feedback is always welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxying Hipchat Part 2: So You Think You Can Use Burp?]]></title>
    <link href="http://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/"/>
    <updated>2015-10-09T22:34:37-04:00</updated>
    <id>http://parsiya.net/blog/proxying-hipchat-part-2-so-you-think-you-can-use-burp</id>
    <content type="html"><![CDATA[<p>In <a href="/blog/2015-10-08-hipchat-part-1-where-did-the-traffic-go/" title="Proxying Hipchat Part 1: Where did the Traffic Go?"><strong>part1</strong></a> I talked about identifying Hipchat endpoints and promised to discuss proxying the application. In this post I will show how to proxy <em>some</em> of Hipchat’s traffic using Burp.</p>

<p>This is specific to Hipchat client for Windows. The current version at the time of writing was is <strong>2.2.1361</strong>. Atlassian is skipping version 3 and version 4 still in beta.</p>

<!-- more -->

<h3 id="ez-mode-proxy-settings">1. EZ-Mode Proxy Settings</h3>
<p>To see the proxy settings, log off and select Configure Connection. Note that in the most recent version (2.2.1395) this added to the settings menu inside the application and there is no need to logoff.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/01-Hipchat-login-screen.png' width='' height='' title='Hipchat login screen'><span class='caption-text'>Hipchat login screen</span></span></p>

<p>Yay for proxy settings. So you think you can use Burp? It’s not going to be that easy, otherwise why would I been writing this?</p>

<p>My Burp proxy is listening on <code>127.0.0.1:8080</code> so I will add it as proxy.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/02-Hipchat-proxy-settings.png' width='' height='' title='Hipchat proxy settings'><span class='caption-text'>Hipchat proxy settings</span></span></p>

<p>You can also enable proxy settings by modifying the <code>%appdata%\Atlassian\Hipchat.ini</code> file (on Windows). We need to modify these settings:</p>

<pre><code>httpHostname=localhost
httpPort=8080
proxyType=Http
</code></pre>

<p>Now login. We will see some requests in Burp. We have seen them before, first one is the <code>Latest News</code> and the second one is the emoticon associated with it. The emoticon is loaded over HTTPs while latest news is loaded over HTTP. We will play with it later.</p>

<pre><code>1. http://downloads.hipchat.com/blog_info.html
# section 2.2 in part 1

2. https://s3.amazonaws.com/uploads.hipchat.com/10804/368466/FM3tGM05hUCySVj/freddie.png 
# emoticon in this case it is Freddie Mercury
# note that this changes because last time I saw success kid
# section 2.3 in part 1.

3.&lt;?xml version='1.0'?&gt;&lt;stream:stream to='chat.hipchat.com'
# looks like the start of an XMPP handshake.
</code></pre>

<p>Note: <code>hipchatserver.com</code>, our imaginary Hipchat server’s IP is <code>10.11.1.25</code> in this post.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/03-Initial-requests-in-Burp.png' width='' height='' title='Initial requests in Burp'><span class='caption-text'>Initial requests in Burp</span></span></p>

<p>The third request looks like the start of an XMPP handshake which has been cut off by Burp. It should be something like this:</p>

<pre><code>&lt;?xml version='1.0'?&gt;&lt;stream:stream to='chat.hipchat.com' xmlns='jabber:client' 
xmlns:stream='http://etherx.jabber.org/streams' version='1.0'&gt;
</code></pre>

<h3 id="why-did-burp-burp">2. Why did Burp, Burp?</h3>

<p>To diagnose the problem, we must look at the traffic capture. Run Netmon and login to Hipchat again. Remember that you cannot capture Hipchat’s traffic to Burp with Netmon or Wireshark as it is local (from <code>127.0.0.1:49xxx</code> to <code>127.0.0.1:8080</code>) so you need to sniff local traffic with something like <a href="http://www.netresec.com/?page=RawCap">RawCap</a>. But we can look at Burp’s outbound traffic in Netmon. Look for traffic belonging to the <code>javaw.exe</code> process (for Burp).</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/04-Traffic-to-hipchat.png' width='' height='' title='Burp &lt;–&gt; hipchatserver.com traffic in Netmon'><span class='caption-text'>Burp &lt;–&gt; hipchatserver.com traffic in Netmon</span></span></p>

<p>Or using sequence diagram created on <a href="https://www.websequencediagrams.com">https://www.websequencediagrams.com</a>. We have a bunch of internal licenses for this at Cigital so I have started adding sequence diagrams to all of my blog posts and reports :D.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/05-Failed-XMPP-Handshake.png' width='' height='' title='What happen?'><span class='caption-text'>What happen?</span></span></p>

<p>As we see the XMPP handshake is incomplete. In short, Burp somehow messes up the first part of the XMPP handshake and drops the packet just after it sees <code>to='chat.hipchat.com'</code> and sends an incomplete payload which causes the server to reject it and reset the connection.</p>

<h3 id="burps-ssl-pass-through">3. Burp’s SSL Pass Through</h3>
<p>It’s time to talk about another one of Burp’s capabilities. This one is named <code>SSL Pass Through</code> and is very useful for exactly the situation we are in. We can specify endpoints (domain/IP and port) and tell Burp not to mess with the to/from those points and just pass it through as it is. This means that Burp will not Man-in-the-Middle (MitM) the connection and just ignore the traffic. It is located at <code>Proxy &gt; Option &gt; SSL Pass Through</code> (scroll all the way to the bottom). Let’s tell Burp not to proxy anything to/from the <code>hipchatserver.com</code> at <code>10.11.1.25:5222</code>.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/06-SSL-Pass-Through.png' width='' height='' title='SSL Pass Through settings'><span class='caption-text'>SSL Pass Through settings</span></span></p>

<p>And yay!</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/07-Hipchat-logged-in-with-Burp-as-proxy.png' width='' height='' title='Logged in with Burp'><span class='caption-text'>Logged in with Burp</span></span></p>

<p>Now let’s take a look at these requests. We have already seen the first two before.</p>

<pre><code>1. GET: http://downloads.hipchat.com/blog_info.html
2. GET: https://s3.amazonaws.com/uploads.hipchat.com/10804/368466/FM3tGM05hUCySVj/freddie.png
3. GET: https://www.hipchat.com/img/silhouette_125.png
4. GET: https://hipchat.com/release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC
5. GET: https://www.hipchat.com/release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC
</code></pre>

<p><strong>Request number 3</strong> is retrieving an image. It is the placeholder image for profile pictures in Hipchat.</p>

<pre><code>GET /img/silhouette_125.png HTTP/1.1
Connection: Keep-Alive
Accept-Encoding: gzip, deflate
Accept-Language: en-US,*
User-Agent: Mozilla/5.0
Host: www.hipchat.com
</code></pre>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/08-Profile-pic-placeholder.png' width='' height='' title='Do not track me bro'><span class='caption-text'>Do not track me bro</span></span></p>

<p>Why are we retrieving this image from hipchat.com every time when it can be stored in the application and conserve bandwidth? I don’t know but Paranoid Parsia tells me that it is an Atlassian tracking request. This way they will know where and when an instance has been executed. There is no identifying data sent with the request.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/09-I-am-not-saying-it-was-Atlassian-but-it-was-Atlassian.jpg' width='' height='' title='I am not saying it was Atlassian, but it was Atlassian'><span class='caption-text'>I am not saying it was Atlassian, but it was Atlassian</span></span></p>

<p><strong>Request 4</strong> is another GET request.</p>

<pre><code>GET /release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC HTTP/1.1
Cache-Control: no-cache
Pragma: no-cache
Connection: Keep-Alive
Accept-Encoding: gzip, deflate
Accept-Language: en-US,*
User-Agent: Mozilla/5.0
Host: hipchat.com
</code></pre>

<p>But it gets redirected to <a href="https://www.hipchat.com/release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC">https://www.hipchat.com/release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC</a>. Remember when we saw the application communicating with both <code>hipchat.com</code> and <code>www.hipchat.com</code> (sections 2.4 and 2.5 of <a href="hipchat-part1">part 1</a>)? This is it.</p>

<pre><code>HTTP/1.1 301 Moved Permanently
Cache-control: no-cache="set-cookie"
Content-Type: text/html
Date: Mon, 07 Sep 2015 22:41:37 GMT
Location: https://www.hipchat.com/release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC
Server: nginx
Set-Cookie: AWSELB=05C1D11310299FE142D714774ABD93C5B09ED1734381C4F7DC691A8BCC5031E618740E2045508C8D72C034DD48A74BD4A2E439469DEA3BD63B536161358959E4151A965466;PATH=/
Strict-Transport-Security: max-age=31536000
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Content-Length: 178
Connection: keep-alive

Response:
&lt;html&gt;
&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;
&lt;body bgcolor="white"&gt;
&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;
&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Which results in <strong>request 5</strong>.</p>

<pre><code>GET /release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC HTTP/1.1
Cache-Control: no-cache
Pragma: no-cache
Connection: Keep-Alive
Accept-Encoding: gzip, deflate
Accept-Language: en-US,*
User-Agent: Mozilla/5.0
Host: www.hipchat.com
</code></pre>

<p>Response to request 5 is an RSS feed containing release versions of the Hipchat client for Windows. Click this link if you want to see it in action <a href="https://www.hipchat.com/release_notes/appcast/qtwindows">https://www.hipchat.com/release_notes/appcast/qtwindows</a>.</p>

<pre><code>HTTP/1.1 200 OK
Cache-control: no-cache="set-cookie"
Content-Type: application/xml
Date: Mon, 07 Sep 2015 22:41:38 GMT
Server: nginx
Set-Cookie: AWSELB=05C1D11310299FE142D714774ABD93C5B09ED1734381C4F7DC691A8BCC5031E618740E204546FF579CEC855051CA268C2FEED4240DD3110178C6BD0BB2D00F1E409F9F4DA6;PATH=/
Strict-Transport-Security: max-age=31536000
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Content-Length: 21562
Connection: keep-alive

&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;rss version="2.0"
xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:hipchat="http://hipchat.com"&gt;
&lt;channel&gt;
&lt;title&gt;HipChat Windows App Changelog&lt;/title&gt;
&lt;link&gt;https://www.hipchat.com/release_notes/appcast/qtwindows&lt;/link&gt;
&lt;description&gt;Appcast of updates.&lt;/description&gt;
&lt;language&gt;en&lt;/language&gt;

&lt;item&gt;
&lt;title&gt;Version 2.2.1388 (1388)&lt;/title&gt;
&lt;pubDate&gt;Tue, 23 Jun 2015 00:00:00 +0000&lt;/pubDate&gt;
&lt;sparkle:releaseNotesLink&gt;https://www.hipchat.com/release_notes/client_embed/qtwindows?version_num=1373&amp;amp;auth-token=JHAgpsxHVva3SMC&amp;amp;auth-uid=351&lt;/sparkle:releaseNotesLink&gt;
&lt;sparkle:minimumSystemVersion&gt;10.8&lt;/sparkle:minimumSystemVersion&gt;
&lt;enclosure url="https://s3.amazonaws.com/downloads.hipchat.com/windows/HipChat-2.2.1388-win32.msi"
sparkle:version="1388"
sparkle:shortVersionString="2.2.1388"
length="43982848"
type="application/octet-stream" /&gt;
&lt;hipchat:required&gt;0&lt;/hipchat:required&gt;
&lt;/item&gt;
...

&lt;/channel&gt;
&lt;/rss&gt;
</code></pre>

<p>I think this RSS feed is used to check for updates.</p>

<h3 id="get-request-over-http">5. GET request over HTTP</h3>
<p>Now let’s take a look at request one. It is loading an HTML page and displays it in the app. directly We can intercept the response in Burp and modify it. The request is to <a href="http://downloads.hipchat.com/blog_info.html">http://downloads.hipchat.com/blog_info.html</a> and that page is not available over TLS.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/10-Changing-latest-news.png' width='' height='' title='It has crashed again!'><span class='caption-text'>It has crashed again!</span></span></p>

<p>That was easy. Now let’s see if we can modify it to display something else.</p>

<p>Seems like it does not have JavaScript enabled so we cannot do a fancy looking alert box. We can inject buttons and forms but the submit action does not work. We can also inject images.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/11-image-tag.png' width='' height='' title='Pepe is watching you load links over HTTP'><span class='caption-text'>Pepe is watching you load links over HTTP</span></span></p>

<p>This is not a serious vulnerability. The attacker needs to be on the same network or in the path and MitM the HTTP connection. But because it is HTTP, there are no certificate warnings. A number of Internet Service Providers also inject ads and other stuff in HTTP traffic. If injected they will appear here. I still do not know why even the emoticon is loaded over https but this latest news is not (<code>downloads.hipchat.com</code> is not even available over HTTPs).</p>

<p>In my opinion the best strategy for an attacker is to inject links to phishing sites. Something along the lines of <code>Click to download the new version</code> and serve infected files or <code>Click to verify your account</code> and point to a phishing login screen. Doubly so because this is <em>the Hipchat link box</em> and users are expected to click these links. We should also remember that Hipchat is also used in non-corporate environments so the next person at Starbucks may be messing with your traffic.</p>

<h4 id="the-container">5.1 The Container</h4>
<p>The container looks like to be QtWebKit (remember the User-Agent?). It does not have JavaScript enabled so injected JS will not be executed. We can inject forms, but the actions will not work (e.g. I injected a simple form with one input field to pass its contents to do a Google search but nothing happens when the button is clicked). This part needs more investigation and I will probably get back to it. If you know about this container (whatever that is) please let me know.</p>

<p>In part three, we will talk about proxying Hipchat client’s traffic with the Hipchat server that we skipped using Burp’s SSL Pass Through and do more exciting stuff.</p>

<p>As usual if you have any questions/feedback/complaints or just want life advice from ancient Persian spirits, you know where to find me.</p>

<!--links-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Piping SSL/TLS Traffic From SoapUI to Burp]]></title>
    <link href="http://parsiya.net/blog/2014-06-25-piping-ssl-slash-tls-traffic-from-soapui-through-burp/"/>
    <updated>2014-06-25T22:04:53-04:00</updated>
    <id>http://parsiya.net/blog/piping-ssl-slash-tls-traffic-from-soapui-through-burp</id>
    <content type="html"><![CDATA[<p>Recently I was trying to test a web service. The traffic was over SSL/TLS and everything was fine. As I am better with Burp than SoapUI, I wanted to use Burp as a proxy for SoapUI. This should be an easy matter. Burp will create a custom certificate (signed by its root CA) for each site and effectively Man-in-the-Middle the connection. But this time it was different, I was getting the dreaded <code>Peer not Authenticated</code> error. This meant that SoapUI did not recognize Burp’s custom certificate.</p>

<p>I Googled and found some solutions such as adding Burp’s CA to my certificate store (already done), adding it to SoapUI’s keystore (didn’t work) or using custom versions of SoapUI created for exactly this reason (again didn’t work).</p>

<p>After a suitably long period of weeping and gnashing of teeth I achieved salvation.</p>

<p>Here’s how to do it:</p>

<ol>
  <li>
    <p>Set Burp as proxy for SoapUI.<br />
In SoapUI go to <code>File &gt; Preferences &gt; Proxy Settings</code>.</p>
  </li>
  <li>Modify target address to http from https<br />
    <ul>
      <li>2.a. In SoapUI, modify the <code>Service Endpoint.</code> Change <code>https://example.com</code> to <code>http://example.com</code>.<br />
Or  </li>
      <li>2.b. Modify the WSDL and change <code>wsdl:address location</code> similarly and import it into SoapUI.</li>
    </ul>
  </li>
  <li>
    <p>Edit Burp’s listener and check <code>Force use of SSL</code> under <code>Request Handling.</code><br />
Notice that the <code>Redirect to port</code> input field will be automatically populated with 443. If your service endpoint is using a different port, modify that accordingly.</p>
  </li>
  <li>
    <p>Now you can send requests from SoapUI and intercept them in Burp. Responses will appear in both SoapUI and Burp like any proxied application.</p>
  </li>
  <li>Be sure to remove the <code>Force use of SSL</code> after you are done. Otherwise you will be wondering why gmail is available under http in your browser (like <s>me</s> someone I know).</li>
</ol>
]]></content>
  </entry>
  
</feed>
