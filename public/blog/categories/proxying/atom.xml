<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Proxying | Parsiya's Den]]></title>
  <link href="http://parsiya.net/blog/categories/proxying/atom.xml" rel="self"/>
  <link href="http://parsiya.net/"/>
  <updated>2015-10-10T23:35:47-04:00</updated>
  <id>http://parsiya.net/</id>
  <author>
    <name><![CDATA[Parsiya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Proxying Hipchat Part 2: So You Think You Can Use Burp?]]></title>
    <link href="http://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/"/>
    <updated>2015-10-09T22:34:37-04:00</updated>
    <id>http://parsiya.net/blog/proxying-hipchat-part-2-so-you-think-you-can-use-burp</id>
    <content type="html"><![CDATA[<p>In <a href="/blog/2015-10-08-hipchat-part-1-where-did-the-traffic-go/" title="Proxying Hipchat Part 1: Where did the Traffic Go?"><strong>part1</strong></a> I talked about identifying Hipchat endpoints and promised to discuss proxying the application. In this post I will show how to proxy <em>some</em> of Hipchat’s traffic using Burp.</p>

<p>This is specific to Hipchat client for Windows. The current version at the time of writing was is <strong>2.2.1361</strong>. Atlassian is skipping version 3 and version 4 still in beta.</p>

<!-- more -->

<h3 id="ez-mode-proxy-settings">1. EZ-Mode Proxy Settings</h3>
<p>To see the proxy settings, log off and select Configure Connection. Note that in the most recent version (2.2.1395) this added to the settings menu inside the application and there is no need to logoff.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/01-Hipchat-login-screen.png' width='' height='' title='Hipchat login screen'><span class='caption-text'>Hipchat login screen</span></span></p>

<p>Yay for proxy settings. So you think you can use Burp? It’s not going to be that easy, otherwise why would I been writing this?</p>

<p>My Burp proxy is listening on <code>127.0.0.1:8080</code> so I will add it as proxy.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/02-Hipchat-proxy-settings.png' width='' height='' title='Hipchat proxy settings'><span class='caption-text'>Hipchat proxy settings</span></span></p>

<p>You can also enable proxy settings by modifying the <code>%appdata%\Atlassian\Hipchat.ini</code> file (on Windows). We need to modify these settings:</p>

<pre><code>httpHostname=localhost
httpPort=8080
proxyType=Http
</code></pre>

<p>Now login. We will see some requests in Burp. We have seen them before, first one is the <code>Latest News</code> and the second one is the emoticon associated with it. The emoticon is loaded over HTTPs while latest news is loaded over HTTP. We will play with it later.</p>

<pre><code>1. http://downloads.hipchat.com/blog_info.html
# section 2.2 in part 1

2. https://s3.amazonaws.com/uploads.hipchat.com/10804/368466/FM3tGM05hUCySVj/freddie.png 
# emoticon in this case it is Freddie Mercury
# note that this changes because last time I saw success kid
# section 2.3 in part 1.

3.&lt;?xml version='1.0'?&gt;&lt;stream:stream to='chat.hipchat.com'
# looks like the start of an XMPP handshake.
</code></pre>

<p>Note: <code>hipchatserver.com</code>, our imaginary Hipchat server’s IP is <code>10.11.1.25</code> in this post.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/03-Initial-requests-in-Burp.png' width='' height='' title='Initial requests in Burp'><span class='caption-text'>Initial requests in Burp</span></span></p>

<p>The third request looks like the start of an XMPP handshake which has been cut off by Burp. It should be something like this:</p>

<pre><code>&lt;?xml version='1.0'?&gt;&lt;stream:stream to='chat.hipchat.com' xmlns='jabber:client' 
xmlns:stream='http://etherx.jabber.org/streams' version='1.0'&gt;
</code></pre>

<h3 id="why-did-burp-burp">2. Why did Burp, Burp?</h3>

<p>To diagnose the problem, we must look at the traffic capture. Run Netmon and login to Hipchat again. Remember that you cannot capture Hipchat’s traffic to Burp with Netmon or Wireshark as it is local (from <code>127.0.0.1:49xxx</code> to <code>127.0.0.1:8080</code>) so you need to sniff local traffic with something like <a href="http://www.netresec.com/?page=RawCap">RawCap</a>. But we can look at Burp’s outbound traffic in Netmon. Look for traffic belonging to the <code>javaw.exe</code> process (for Burp).</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/04-Traffic-to-hipchat.png' width='' height='' title='Burp &lt;–&gt; hipchatserver.com traffic in Netmon'><span class='caption-text'>Burp &lt;–&gt; hipchatserver.com traffic in Netmon</span></span></p>

<p>Or using sequence diagram created on <a href="https://www.websequencediagrams.com">https://www.websequencediagrams.com</a>. We have a bunch of internal licenses for this at Cigital so I have started adding sequence diagrams to all of my blog posts and reports :D.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/05-Failed-XMPP-Handshake.png' width='' height='' title='What happen?'><span class='caption-text'>What happen?</span></span></p>

<p>As we see the XMPP handshake is incomplete. In short, Burp somehow messes up the first part of the XMPP handshake and drops the packet just after it sees <code>to='chat.hipchat.com'</code> and sends an incomplete payload which causes the server to reject it and reset the connection.</p>

<h3 id="burps-ssl-pass-through">3. Burp’s SSL Pass Through</h3>
<p>It’s time to talk about another one of Burp’s capabilities. This one is named <code>SSL Pass Through</code> and is very useful for exactly the situation we are in. We can specify endpoints (domain/IP and port) and tell Burp not to mess with the to/from those points and just pass it through as it is. This means that Burp will not Man-in-the-Middle (MitM) the connection and just ignore the traffic. It is located at <code>Proxy &gt; Option &gt; SSL Pass Through</code> (scroll all the way to the bottom). Let’s tell Burp not to proxy anything to/from the <code>hipchatserver.com</code> at <code>10.11.1.25:5222</code>.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/06-SSL-Pass-Through.png' width='' height='' title='SSL Pass Through settings'><span class='caption-text'>SSL Pass Through settings</span></span></p>

<p>And yay!</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/07-Hipchat-logged-in-with-Burp-as-proxy.png' width='' height='' title='Logged in with Burp'><span class='caption-text'>Logged in with Burp</span></span></p>

<p>Now let’s take a look at these requests. We have already seen the first two before.</p>

<pre><code>1. GET: http://downloads.hipchat.com/blog_info.html
2. GET: https://s3.amazonaws.com/uploads.hipchat.com/10804/368466/FM3tGM05hUCySVj/freddie.png
3. GET: https://www.hipchat.com/img/silhouette_125.png
4. GET: https://hipchat.com/release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC
5. GET: https://www.hipchat.com/release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC
</code></pre>

<p><strong>Request number 3</strong> is retrieving an image. It is the placeholder image for profile pictures in Hipchat.</p>

<pre><code>GET /img/silhouette_125.png HTTP/1.1
Connection: Keep-Alive
Accept-Encoding: gzip, deflate
Accept-Language: en-US,*
User-Agent: Mozilla/5.0
Host: www.hipchat.com
</code></pre>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/08-Profile-pic-placeholder.png' width='' height='' title='Do not track me bro'><span class='caption-text'>Do not track me bro</span></span></p>

<p>Why are we retrieving this image from hipchat.com every time when it can be stored in the application and conserve bandwidth? I don’t know but Paranoid Parsia tells me that it is an Atlassian tracking request. This way they will know where and when an instance has been executed. There is no identifying data sent with the request.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/09-I-am-not-saying-it-was-Atlassian-but-it-was-Atlassian.jpg' width='' height='' title='I am not saying it was Atlassian, but it was Atlassian'><span class='caption-text'>I am not saying it was Atlassian, but it was Atlassian</span></span></p>

<p><strong>Request 4</strong> is another GET request.</p>

<pre><code>GET /release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC HTTP/1.1
Cache-Control: no-cache
Pragma: no-cache
Connection: Keep-Alive
Accept-Encoding: gzip, deflate
Accept-Language: en-US,*
User-Agent: Mozilla/5.0
Host: hipchat.com
</code></pre>

<p>But it gets redirected to <a href="https://www.hipchat.com/release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC">https://www.hipchat.com/release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC</a>. Remember when we saw the application communicating with both <code>hipchat.com</code> and <code>www.hipchat.com</code> (sections 2.4 and 2.5 of <a href="hipchat-part1">part 1</a>)? This is it.</p>

<pre><code>HTTP/1.1 301 Moved Permanently
Cache-control: no-cache="set-cookie"
Content-Type: text/html
Date: Mon, 07 Sep 2015 22:41:37 GMT
Location: https://www.hipchat.com/release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC
Server: nginx
Set-Cookie: AWSELB=05C1D11310299FE142D714774ABD93C5B09ED1734381C4F7DC691A8BCC5031E618740E2045508C8D72C034DD48A74BD4A2E439469DEA3BD63B536161358959E4151A965466;PATH=/
Strict-Transport-Security: max-age=31536000
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Content-Length: 178
Connection: keep-alive

Response:
&lt;html&gt;
&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;
&lt;body bgcolor="white"&gt;
&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;
&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Which results in <strong>request 5</strong>.</p>

<pre><code>GET /release_notes/appcast/qtwindows?auth-uid=351&amp;auth-token=JHAgpsxHVva3SMC HTTP/1.1
Cache-Control: no-cache
Pragma: no-cache
Connection: Keep-Alive
Accept-Encoding: gzip, deflate
Accept-Language: en-US,*
User-Agent: Mozilla/5.0
Host: www.hipchat.com
</code></pre>

<p>Response to request 5 is an RSS feed containing release versions of the Hipchat client for Windows. Click this link if you want to see it in action <a href="https://www.hipchat.com/release_notes/appcast/qtwindows">https://www.hipchat.com/release_notes/appcast/qtwindows</a>.</p>

<pre><code>HTTP/1.1 200 OK
Cache-control: no-cache="set-cookie"
Content-Type: application/xml
Date: Mon, 07 Sep 2015 22:41:38 GMT
Server: nginx
Set-Cookie: AWSELB=05C1D11310299FE142D714774ABD93C5B09ED1734381C4F7DC691A8BCC5031E618740E204546FF579CEC855051CA268C2FEED4240DD3110178C6BD0BB2D00F1E409F9F4DA6;PATH=/
Strict-Transport-Security: max-age=31536000
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Content-Length: 21562
Connection: keep-alive

&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;rss version="2.0"
xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:hipchat="http://hipchat.com"&gt;
&lt;channel&gt;
&lt;title&gt;HipChat Windows App Changelog&lt;/title&gt;
&lt;link&gt;https://www.hipchat.com/release_notes/appcast/qtwindows&lt;/link&gt;
&lt;description&gt;Appcast of updates.&lt;/description&gt;
&lt;language&gt;en&lt;/language&gt;

&lt;item&gt;
&lt;title&gt;Version 2.2.1388 (1388)&lt;/title&gt;
&lt;pubDate&gt;Tue, 23 Jun 2015 00:00:00 +0000&lt;/pubDate&gt;
&lt;sparkle:releaseNotesLink&gt;https://www.hipchat.com/release_notes/client_embed/qtwindows?version_num=1373&amp;amp;auth-token=JHAgpsxHVva3SMC&amp;amp;auth-uid=351&lt;/sparkle:releaseNotesLink&gt;
&lt;sparkle:minimumSystemVersion&gt;10.8&lt;/sparkle:minimumSystemVersion&gt;
&lt;enclosure url="https://s3.amazonaws.com/downloads.hipchat.com/windows/HipChat-2.2.1388-win32.msi"
sparkle:version="1388"
sparkle:shortVersionString="2.2.1388"
length="43982848"
type="application/octet-stream" /&gt;
&lt;hipchat:required&gt;0&lt;/hipchat:required&gt;
&lt;/item&gt;
...

&lt;/channel&gt;
&lt;/rss&gt;
</code></pre>

<p>I think this RSS feed is used to check for updates.</p>

<h3 id="get-request-over-http">5. GET request over HTTP</h3>
<p>Now let’s take a look at request one. It is loading an HTML page and displays it in the app. directly We can intercept the response in Burp and modify it. The request is to <a href="http://downloads.hipchat.com/blog_info.html">http://downloads.hipchat.com/blog_info.html</a> and that page is not available over TLS.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/10-Changing-latest-news.png' width='' height='' title='It has crashed again!'><span class='caption-text'>It has crashed again!</span></span></p>

<p>That was easy. Now let’s see if we can modify it to display something else.</p>

<p>Seems like it does not have JavaScript enabled so we cannot do a fancy looking alert box. We can inject buttons and forms but the submit action does not work. We can also inject images.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat2/11-image-tag.png' width='' height='' title='Pepe is watching you load links over HTTP'><span class='caption-text'>Pepe is watching you load links over HTTP</span></span></p>

<p>This is not a serious vulnerability. The attacker needs to be on the same network or in the path and MitM the HTTP connection. But because it is HTTP, there are no certificate warnings. A number of Internet Service Providers also inject ads and other stuff in HTTP traffic. If injected they will appear here. I still do not know why even the emoticon is loaded over https but this latest news is not (<code>downloads.hipchat.com</code> is not even available over HTTPs).</p>

<p>In my opinion the best strategy for an attacker is to inject links to phishing sites. Something along the lines of <code>Click to download the new version</code> and serve infected files or <code>Click to verify your account</code> and point to a phishing login screen. Doubly so because this is <em>the Hipchat link box</em> and users are expected to click these links. We should also remember that Hipchat is also used in non-corporate environments so the next person at Starbucks may be messing with your traffic.</p>

<h4 id="the-container">5.1 The Container</h4>
<p>The container looks like to be QtWebKit (remember the User-Agent?). It does not have JavaScript enabled so injected JS will not be executed. We can inject forms, but the actions will not work (e.g. I injected a simple form with one input field to pass its contents to do a Google search but nothing happens when the button is clicked). This part needs more investigation and I will probably get back to it. If you know about this container (whatever that is) please let me know.</p>

<p>In part three, we will talk about proxying Hipchat client’s traffic with the Hipchat server that we skipped using Burp’s SSL Pass Through and do more exciting stuff.</p>

<p>As usual if you have any questions/feedback/complaints or just want life advice from ancient Persian spirits, you know where to find me.</p>

<!--links-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxying Hipchat Part 1: Where Did the Traffic Go?]]></title>
    <link href="http://parsiya.net/blog/2015-10-08-hipchat-part-1-where-did-the-traffic-go/"/>
    <updated>2015-10-08T23:05:24-04:00</updated>
    <id>http://parsiya.net/blog/hipchat-part-1-where-did-the-traffic-go</id>
    <content type="html"><![CDATA[<p>This is a slightly different version of a series of blog post that I wrote on our internal blog about proxying. I see that proxying traffic is a time consuming step in testing thick client applications so I thought I would share what I know. I tackled Hipchat. Why Hipchat? Because it uses a known protocol (XMPP) and I thought it’s an interesting application.</p>

<p>I used Hipchat Windows client version 2. At the time of writing version 4 is in beta. In this part we will see how we can identify endpoints from traffic captures even when they are behind a load balancer/shared hosting etc. In next parts we will start proxying.</p>

<!-- more -->

<h3 id="setup-and-tools">0. Setup and Tools</h3>
<p>I will be using the following tools in this part:</p>

<ol>
  <li>Microsoft Network Monitor (Netmon). You can also use Wireshark.</li>
  <li>Powershell/Command Prompt/etc: I am using Windows but I am sure you can find the equivalent commands if you are fancy ;)</li>
  <li>Procmon</li>
</ol>

<p>You can deploy your own Hipchat server by <a href="https://www.hipchat.com/server/get-it">downloading a VM</a>. </p>

<p>Note: In these posts, the Hipchat server is named <code>hipchatserver.com</code> and its IP is <code>10.10.10.10</code> (these are just examples). Some of the screenshots are edited to hide the actual IPs and replace them with samples. My machine’s sample IP address for the network interface that hosts the Hipchat server is <code>10.10.10.9</code>.</p>

<h3 id="traffic-attribution">1. Traffic Attribution</h3>
<p>Run Netmon and Procmon as admin and run HipChat. We already know how to do <a href="/blog/2015-08-01-network-traffic-attribution-on-windows/" title="Network Traffic Attribution on Windows">traffic attribution</a>. I was not logged into any chatrooms, so Hipchat is not loading any extra content (e.g. images linked in rooms).</p>

<p>In Netmon we also see the following endpoints:</p>

<ol>
  <li>10.10.10.10</li>
  <li>54.231.81.2</li>
  <li>54.231.96.96</li>
  <li>54.231.47.194</li>
  <li>54.225.209.74</li>
</ol>

<p><div class='bogus-wrapper'><notextile><div class="imgpopup screen">
  <a href='javascript:void(0)' style="text-decoration: none" id="image-19">
    <img src="/images/2015/hipchat1/01-Traffic-in-Netmon.png"
         width="1085" height="366"
         alt="Click me."/>
  </a>
  <div id="image-dialog-19" style="display:none">
    <img src="/images/2015/hipchat1/01-Traffic-in-Netmon.png"
         width="1356" height="457"/>
    <br clear="all"/>
  </div>
</div>
<script type="text/javascript">
  jQuery(document).ready(function() {
    jQuery("#image-dialog-19").hide();
    jQuery("#image-dialog-19").dialog({
      autoOpen:  false,
      modal:     true,
      draggable: false,
      minWidth:  1396,
      minHeight: 497,
      title:     "Traffic in Netmon ",
      show:      'scale',
      hide:      'scale'
    });

    jQuery("#image-19").click(function() {
      jQuery("#image-dialog-19").dialog('open');
    });

  });
</script>
</notextile></div></p>

<p>Traffic in Netmon, click to view full-size image.</p>

<p>You will notice that I have a slightly different layout in Netmon now. I have removed time related columns. Right click any column name and select <code>Choose Columns</code>. There are also different layouts like <code>HTTP Troubleshoot</code>.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat1/02-Endpoints-in-Netmon.png' width='' height='' title='Endpoints in Netmon'><span class='caption-text'>Endpoints in Netmon</span></span></p>

<p>In Procmon we can see five endpoints:</p>

<ol>
  <li>hipchatserver.com:5222</li>
  <li>s3-website-us-east-1.amazonaws.com:http</li>
  <li>s3-1.amazonaws.com:https</li>
  <li>ec2-54-531-47-194.compute-1.amazonaws.com:https</li>
  <li>ec2-54-225-209-74.compute-1.amazonaws.com:https</li>
</ol>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat1/03-Endpoints-in-Procmon.png' width='' height='' title='Endpoints in Procmon'><span class='caption-text'>Endpoints in Procmon</span></span></p>

<p>Procmon filters are:</p>

<ul>
  <li>ProcessName is Hipchat.exe</li>
  <li>Operation is TCP Connect</li>
</ul>

<h3 id="where-does-the-traffic-go">2. Where does the traffic go?</h3>
<p>Now we need to find out more about these endpoints (e.g. their actual address/URL etc). Based on their temporal sequence in Procmon and Netmon we have some insights.</p>

<h4 id="hipchatservercom">2.1 – 10.10.10.10 – hipchatserver.com</h4>
<p>This is easy. It’s the Hipchat server at <code>hipchatserver.com</code>.</p>

<pre><code>PS C:\&gt; nslookup 10.10.10.10
Server:  zzzz.com
Address:  10.10.10.2

Name:    hipchatserver.com
Address:  10.10.10.10

PS C:\&gt; ping -a 10.10.10.10
Pinging hipchatserver.com [10.10.10.10] with 32 bytes of data:
...
</code></pre>

<h4 id="s3-website-us-east-1amazonawscom">2.2 – 54.231.81.2 – s3-website-us-east-1.amazonaws.com</h4>
<p>This is where things start to become interesting. Let’s re-use our old tricks.</p>

<pre><code>PS C:\&gt; nslookup 54.231.81.2
Server:  zzzz.com
Address:  10.10.10.2

Name:    s3-website-us-east-1.amazonaws.com
Address:  54.231.81.2

PS C:\&gt; ping -a 54.231.81.2
Pinging s3-website-us-east-1.amazonaws.com [54.231.81.2] with 32 bytes of data:
...
</code></pre>

<p>It seems like the second endpoint is hosted on an AWS S3 bucket. S3 buckets are mainly storage containers but they can also host static websites like this website. But we won’t find anything if we go to that address. <code>s3-website-us-east-1.amazonaws.com</code> is the east coast AWS data center which is located in Northern Virginia. You will get a different endpoint based on where you are located.</p>

<p>Let’s look at the conversation in Netmon. This is similar to <code>Follow TCP/UDP Stream</code> in Wireshark but unfortunately not as good.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat1/04-bloginfo-fetch.png' width='' height='' title='Fetching blog_info.html'><span class='caption-text'>Fetching blog_info.html</span></span></p>

<p>We are in luck, we can see a <code>GET</code> request over HTTP. Let’s look at it’s payload:</p>

<pre><code>GET /blog_info.html HTTP/1.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/538.1 (KHTML, like Gecko) HipChat/2.2.1388 Safari/538.1
Connection: Keep-Alive
Accept-Encoding: gzip, deflate
Accept-Language: en-US,*
Host: downloads.hipchat.com
</code></pre>

<p>Note the User-Agent. Hipchat is fetching <a href="http://downloads.hipchat.com/blog_info.html">http://downloads.hipchat.com/blog_info.html</a>. This is the <code>Latest News</code> at the bottom of the Hipchat client. Notice that it is being loaded over HTTP and surprisingly it is not available over TLS (try accessing <a href="https://downloads.hipchat.com/blog_info.html">https://downloads.hipchat.com/blog_info.html</a>) does not work. In fact you cannot access <a href="https://downloads.hipchat.com/">https://downloads.hipchat.com</a>.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat1/05-Latest-news-in-hipchat.png' width='' height='' title='“Latest News” fetched over HTTP ;)'><span class='caption-text'>“Latest News” fetched over HTTP ;)</span></span></p>

<h5 id="but-what-if-this-request-was-over-tls">2.2.1 But what if this request was over TLS?</h5>
<p>Then we would have seen the TLS handshake and then encrypted data. Even by looking at the Common Name (CN) field in server’s certificate in 2nd part of the TLS handshake (<code>Server Hello</code>) we wouldn’t have been able to discover the endpoint.
Traffic in Netmon, click to view full-size image.
We are going to have to look at DNS requests. We know the endpoint’s IP address so we will try to find the DNS request that had this IP in its answer. The endpoint’s IP address is <code>54.231.81.2</code> which is <code>36E75102</code> in Hex. In Netmon, select <code>All Traffic</code> (In Netmon DNS traffic is not included in process traffic) and enter the following filter:</p>

<pre><code>  DNS &amp;&amp; ContainsBin(FrameData, HEX, "36E75102")
</code></pre>

<p>This filter searches for the IP address in DNS traffic. It will find the DNS query that returned this IP address.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/2015/hipchat1/06-Downloads.png' width='' height='' title='downloads.hipchat.com'><span class='caption-text'>downloads.hipchat.com</span></span></p>

<p>As we can see, it is <code>downloads.hipchat.com</code>.</p>

<p>IP to Hex conversion can be done online, by hand or using Python:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>IP to Hex </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">PS</span> <span class="n">C</span><span class="p">:</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">python</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">hexlify</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">print</span> <span class="n">hexlify</span> <span class="p">(</span> <span class="n">socket</span><span class="o">.</span><span class="n">inet_aton</span><span class="p">(</span><span class="err">“</span><span class="mf">54.231</span><span class="o">.</span><span class="mf">81.2</span><span class="err">”</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'><span class="mf">36e75102</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4 id="s3-1amazonawscom">2.3 – 54.231.96.96 – s3-1.amazonaws.com</h4>

<p>Same trick. <code>54.231.96.96</code> in Hex is <code>36E76060</code> so filter is:</p>

<pre><code>  DNS &amp;&amp; ContainsBin(FrameData, HEX, "36E76060")
</code></pre>

<p>which points to <code>s3.amazonaws.com</code>. As we will see in part two, this is the request to load the emoticon shown with latest news, in this case it is the <code>success kid</code> image macro.</p>

<pre><code>- Dns: QueryId = 0xC28D, QUERY (Standard query), Response - Success, 53, 0 ... 
    QueryIdentifier: 49805 (0xC28D)
  + Flags:  Response, Opcode - QUERY (Standard query), RD, RA, Rcode - Success
    QuestionCount: 1 (0x1)
    AnswerCount: 3 (0x3)
    NameServerCount: 0 (0x0)
    AdditionalCount: 0 (0x0)
  - QRecord: s3.amazonaws.com of type Host Addr on class Internet  PS C:\&gt; python
     QuestionName: s3.amazonaws.com
     QuestionType: A, IPv4 address, 1(0x1)
     QuestionClass: Internet, 1(0x1)
  - ARecord: s3.amazonaws.com of type CNAME on class Internet: s3.a-geo.amazonaws.com
     ResourceName: s3.amazonaws.com
     ResourceType: CNAME, Canonical name for an alias, 5(0x5)
     ResourceClass: Internet, 1(0x1)
     TimeToLive: 2554 (0x9FA)
     ResourceDataLength: 11 (0xB)
     CName: s3.a-geo.amazonaws.com
  - ARecord: s3.a-geo.amazonaws.com of type CNAME on class Internet: s3-1.amazonaws.com
     ResourceName: s3.a-geo.amazonaws.com
     ResourceType: CNAME, Canonical name for an alias, 5(0x5)
     ResourceClass: Internet, 1(0x1)
     TimeToLive: 1555 (0x613)
     ResourceDataLength: 7 (0x7)
     CName: s3-1.amazonaws.com
  - ARecord: s3-1.amazonaws.com of type Host Addr on class Internet: 54.231.96.96
     ResourceName: s3-1.amazonaws.com
     ResourceType: A, IPv4 address, 1(0x1)
     ResourceClass: Internet, 1(0x1)
     TimeToLive: 4 (0x4)
     ResourceDataLength: 4 (0x4)
     IPAddress: 54.231.96.96
</code></pre>

<h4 id="ec2-54-243-47-194compute-1amazonawscom">2.4 – 54.243.47.194 – ec2-54-243-47-194.compute-1.amazonaws.com</h4>
<p>This is easy, we can just go to <a href="http://ec2-54-243-47-194.compute-1.amazonaws.com">http://ec2-54-243-47-194.compute-1.amazonaws.com</a> and observe that it is <a href="http://www.hipchat.com">http://www.hipchat.com</a>. Interesting thing, if you go to <a href="http://www.hipchat.com">http://www.hipchat.com</a> in your browser, it will redirect to the HTTPs version of the website. Going to the Amazon EC2 address is the only way to access hipchat.com over HTTP.</p>

<p>We can also use this filter in Netmon:</p>

<pre><code>  DNS &amp;&amp; ContainsBin(FrameData, HEX, "36F32FC2")
</code></pre>

<p>Which results in:</p>

<pre><code>- Dns: QueryId = 0x1D07, QUERY (Standard query), Response - Success, 54.243.47.194 
    QueryIdentifier: 7431 (0x1D07)
  + Flags:  Response, Opcode - QUERY (Standard query), RD, RA, Rcode - Success
    QuestionCount: 1 (0x1)
    AnswerCount: 1 (0x1)
    NameServerCount: 0 (0x0)
    AdditionalCount: 0 (0x0)
  - QRecord: www.hipchat.com of type Host Addr on class Internet
     QuestionName: www.hipchat.com
     QuestionType: A, IPv4 address, 1(0x1)
     QuestionClass: Internet, 1(0x1)
  - ARecord: www.hipchat.com of type Host Addr on class Internet: 54.243.47.194
     ResourceName: www.hipchat.com
     ResourceType: A, IPv4 address, 1(0x1)
     ResourceClass: Internet, 1(0x1)
     TimeToLive: 60 (0x3C)
     ResourceDataLength: 4 (0x4)
     IPAddress: 54.243.47.194
</code></pre>

<h4 id="ec2-54-225-209-74compute-1amazonawscom">2.5 – 54.225.209.74 – ec2-54-225-209-74.compute-1.amazonaws.com</h4>
<p>This is the same as above with one small difference. Using this filter:</p>

<pre><code>DNS &amp;&amp; ContainsBin(FrameData, HEX, "36E1D14A")
</code></pre>

<p>We can see that is points to hipchat.com (last IP was <code>www.hipchat.com</code>).</p>

<pre><code>- Dns: QueryId = 0x280E, QUERY (Standard query), Response - Success, 54.225.209.74 
    QueryIdentifier: 10254 (0x280E)
  + Flags:  Response, Opcode - QUERY (Standard query), RD, RA, Rcode - Success
    QuestionCount: 1 (0x1)
    AnswerCount: 1 (0x1)
    NameServerCount: 0 (0x0)
    AdditionalCount: 0 (0x0)
  - QRecord: hipchat.com of type Host Addr on class Internet
     QuestionName: hipchat.com
     QuestionType: A, IPv4 address, 1(0x1)
     QuestionClass: Internet, 1(0x1)
  - ARecord: hipchat.com of type Host Addr on class Internet: 54.225.209.74
     ResourceName: hipchat.com
     ResourceType: A, IPv4 address, 1(0x1)
     ResourceClass: Internet, 1(0x1)
     TimeToLive: 59 (0x3B)
     ResourceDataLength: 4 (0x4)
     IPAddress: 54.225.209.74
</code></pre>

<p>So the application is communicating with both <code>www.hipchat.com</code> and <code>hipchat.com</code>. Probably because of a redirect as we can see later.</p>

<p>That’s enough for now. In part two we will talk about proxying.</p>

<!-- links -->

]]></content>
  </entry>
  
</feed>
