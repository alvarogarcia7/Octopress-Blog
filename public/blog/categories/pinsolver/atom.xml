<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PINSolver | Parsia's Den]]></title>
  <link href="http://parsiya.net/blog/categories/pinsolver/atom.xml" rel="self"/>
  <link href="http://parsiya.net/"/>
  <updated>2015-11-19T00:25:06-05:00</updated>
  <id>http://parsiya.net/</id>
  <author>
    <name><![CDATA[Parsiya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pin Adventures - Chapter 1 - PinSolver Mk1]]></title>
    <link href="http://parsiya.net/blog/2014-12-08-pin-adventures-chapter-1-pinsolver-mk1/"/>
    <updated>2014-12-08T20:46:59-05:00</updated>
    <id>http://parsiya.net/blog/pin-adventures-chapter-1-pinsolver-mk1</id>
    <content type="html"><![CDATA[<p>While writing the writeups for the <a href="http://parsiya.net/blog/2014-10-07-my-adventure-with-fireeye-flare-challenge/#ch6">Flare On Challenge 6</a> I came upon <a href="http://gaasedelen.blogspot.com/2014/09/solving-fireeyes-flare-on-six-via-side.html">an alternative solution</a> by <a href="https://twitter.com/gaasedelen">@gaasedelen</a> to use the number of executed instructions as a side-channel. Recently during an engagement I used <a href="https://software.intel.com/en-us/articles/pintool">Pintool</a> to do <code>[redacted]</code>. Now that I have a bit of time, I decided to use the idea to write such a tool.</p>

<p>As an example, we will use a C program that checks input for a hardcoded value using <code>strncmp</code>. We want to see if it’s vulnerable to this side-channel (number of executed instructions).</p>

<!-- more -->

<h2 id="my-setup">My Setup</h2>
<p>I will be using a Kali 32-bit VM using VirtualBox. Installing Pin is as simple as extracting the appropriate distribution in a directory and adding it to path.</p>

<h3 id="pintool">Pintool</h3>
<p>Pin is a dynamic binary instrumentation framework by Intel. The default installation contains a good number of examples in <code>/pintool/source/tools/ManualExamples/</code>. If you look at various tutorials on it, most will use instruction count example in <code>inscount0.cpp</code>. I will be simplifying it to suit our needs and do <em>some</em> comments.</p>

<p>Here is the modified code. Let’s name it <code>myins.cpp</code> and save it in the ManualExamples directory. Apologies for the legal stuff at the start but I’d rather keep them than risk the wrath of open source gods.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myins.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*BEGIN_LEGAL </span>
</span><span class='line'><span class="cm">Intel Open Source License &lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;Copyright (c) 2002-2014 Intel Corporation. All rights reserved.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;Redistribution and use in source and binary forms, with or without</span>
</span><span class='line'><span class="cm">modification, are permitted provided that the following conditions are</span>
</span><span class='line'><span class="cm">met:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;Redistributions of source code must retain the above copyright notice,</span>
</span><span class='line'><span class="cm">this list of conditions and the following disclaimer.  Redistributions</span>
</span><span class='line'><span class="cm">in binary form must reproduce the above copyright notice, this list of</span>
</span><span class='line'><span class="cm">conditions and the following disclaimer in the documentation and/or</span>
</span><span class='line'><span class="cm">other materials provided with the distribution.  Neither the name of</span>
</span><span class='line'><span class="cm">the Intel Corporation nor the names of its contributors may be used to</span>
</span><span class='line'><span class="cm">endorse or promote products derived from this software without</span>
</span><span class='line'><span class="cm">specific prior written permission.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>
</span><span class='line'><span class="cm">``AS IS’’ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>
</span><span class='line'><span class="cm">LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span>
</span><span class='line'><span class="cm">A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE INTEL OR</span>
</span><span class='line'><span class="cm">ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span>
</span><span class='line'><span class="cm">SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span>
</span><span class='line'><span class="cm">LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span>
</span><span class='line'><span class="cm">DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span>
</span><span class='line'><span class="cm">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span>
</span><span class='line'><span class="cm">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span>
</span><span class='line'><span class="cm">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span>
</span><span class='line'><span class="cm">END_LEGAL */</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &quot;pin.H&quot;&lt;/iostream&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// modified version of /pintool/source/tools/ManualExamples/inscount0.cpp&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// The running count of instructions is kept here</span>
</span><span class='line'><span class="c1">// make it static to help the compiler optimize docount</span>
</span><span class='line'><span class="k">static</span> <span class="n">UINT64</span> <span class="n">icount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// This function is called before every instruction is executed</span>
</span><span class='line'><span class="c1">// increase the count every time it is called, which is before every instruction</span>
</span><span class='line'><span class="n">VOID</span> <span class="n">docount</span><span class="p">()</span> <span class="p">{</span> <span class="n">icount</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Pin calls this function every time a new instruction is encountered</span>
</span><span class='line'><span class="n">VOID</span> <span class="n">Instruction</span><span class="p">(</span><span class="n">INS</span> <span class="n">ins</span><span class="p">,</span> <span class="n">VOID</span> <span class="o">*</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Insert a call to docount before every instruction, no arguments are passed</span>
</span><span class='line'>    <span class="c1">// ins: instruction about to be executed</span>
</span><span class='line'>    <span class="c1">// IPOINT_BEFORE: call is placed before each instruction</span>
</span><span class='line'>    <span class="c1">// (AFUNPTR)docount: name of the function to call before every instruction</span>
</span><span class='line'>    <span class="c1">// If any arguments are to be passed to the called function, they will be placed here</span>
</span><span class='line'>    <span class="c1">// IARG_END: indicates the end of arguments&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// as a result before each instruction, docount is called</span>
</span><span class='line'><span class="n">INS_InsertCall</span><span class="p">(</span><span class="n">ins</span><span class="p">,</span> <span class="n">IPOINT_BEFORE</span><span class="p">,</span> <span class="p">(</span><span class="n">AFUNPTR</span><span class="p">)</span><span class="n">docount</span><span class="p">,</span> <span class="n">IARG_END</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// This function is called when the application exits</span>
</span><span class='line'><span class="n">VOID</span> <span class="n">Fini</span><span class="p">(</span><span class="n">INT32</span> <span class="n">code</span><span class="p">,</span> <span class="n">VOID</span> <span class="o">*</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// print the number of executed instructions</span>
</span><span class='line'>    <span class="n">cout</span> <span class="err">« “</span><span class="nl">Count:</span> <span class="err">“</span> <span class="err">« </span><span class="n">icount</span> <span class="err">« </span><span class="n">endl</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* ===================================================================== &lt;em&gt;/</span>
</span><span class='line'><span class="cm">/&lt;/em&gt; Print Help Message                                                    &lt;em&gt;/</span>
</span><span class='line'><span class="cm">/&lt;/em&gt; ===================================================================== */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">INT32</span> <span class="n">Usage</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="err">« “</span><span class="n">This</span> <span class="n">tool</span> <span class="n">counts</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="n">dynamic</span> <span class="n">instructions</span> <span class="n">executed</span><span class="err">”</span> <span class="err">« </span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* ===================================================================== &lt;em&gt;/</span>
</span><span class='line'><span class="cm">/&lt;/em&gt; Main                                                                  &lt;em&gt;/</span>
</span><span class='line'><span class="cm">/&lt;/em&gt; ===================================================================== &lt;em&gt;/</span>
</span><span class='line'><span class="cm">/&lt;/em&gt;   argc, argv are the entire command line: pin -t &lt;toolname&gt; -- ...    */</span>
</span><span class='line'><span class="cm">/* ===================================================================== */</span><span class="o">&lt;/</span><span class="n">toolname</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Initialize pin</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PIN_Init</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">))</span> <span class="k">return</span> <span class="n">Usage</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Register Instruction to be called to instrument instructions</span>
</span><span class='line'><span class="n">INS_AddInstrumentFunction</span><span class="p">(</span><span class="n">Instruction</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Register Fini to be called when the application exits</span>
</span><span class='line'><span class="n">PIN_AddFiniFunction</span><span class="p">(</span><span class="n">Fini</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Start the program, never returns</span>
</span><span class='line'><span class="n">PIN_StartProgram</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To compile it, we can use the provided makefile. In ManualExamples run <code>make obj-ia32/myins.so</code>. Note the filename and path. If everything works correctly, we will have <code>myins.so</code>. Let’s copy it to where we want to write our example program.</p>

<h3 id="crackme-1---example-c-program">Crackme 1 - Example C Program</h3>
<p>The program is quite simple, it checks the first argument against the hardcoded value <code>7bc3a60fbf38e98f6fef654afa26d270</code>. We will use this program to test our Pin tool.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>crkme1.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h /&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span> <span class="n">argc</span><span class="o">!=</span><span class="mi">2</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="nl">usage:</span> <span class="p">.</span><span class="o">/</span><span class="n">crkme1</span> <span class="n">code</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">char</span> <span class="n">code</span><span class="p">[]</span> <span class="o">=</span> <span class="err">“</span><span class="mi">7</span><span class="n">bc3a60fbf38e98f6fef654afa26d270</span><span class="err">”</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">strncmp</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">code</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">Correct</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">Wrong</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Remember to use the <code>ggdb</code> option to compile with debug information (for GDB). From what I understand this is very similar to the <code>g</code> option. We will be using GDB to dive into the binary to observe strncmp’s behavior. Let’s use <code>gcc -ggdb -o crkme1 crkme1.c</code>.</p>

<h3 id="using-pin-with-crkme1">Using Pin with Crkme1</h3>
<p>To run our Pin tool against any executable execute <code>pin -t myins.so -- ./crkme1 012345</code>. Now let’s experiment with some input. Our super secret code starts with <code>7b</code> so I will be <code>fuzzing</code> (for very simplistic definition of fuzzing) the first character and look at the number of executed instructions.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Changing first character </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pin -t myins.so – ./crkme1 1zzz
</span><span class='line'>Wrong
</span><span class='line'>Count: 100013
</span><span class='line'><span class="nv">$ </span>pin -t myins.so – ./crkme1 5zzz
</span><span class='line'>Wrong
</span><span class='line'>Count: 100013
</span><span class='line'><span class="nv">$ </span>pin -t myins.so – ./crkme1 7zzz
</span><span class='line'>Wrong
</span><span class='line'>Count: 100015 <span class="c"># interesting</span>
</span><span class='line'><span class="nv">$ </span>pin -t myins.so – ./crkme1 bzzz
</span><span class='line'>Wrong
</span><span class='line'>Count: 100013
</span><span class='line'><span class="nv">$pin</span> -t myins.so – ./crkme1 @zzz
</span><span class='line'>Wrong
</span><span class='line'>Count: 100013
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice a pattern? Seems like we executed two extra instructions when our first character matched. Assuming our theory is correct and we have the first character <code>7</code>, let’s experiment with the second character.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Changing second character </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pin -t myins.so – ./crkme1 71zz
</span><span class='line'>Wrong
</span><span class='line'>Count: 100015
</span><span class='line'><span class="nv">$ </span>pin -t myins.so – ./crkme1 75zz
</span><span class='line'>Wrong
</span><span class='line'>Count: 100015
</span><span class='line'><span class="nv">$ </span>pin -t myins.so – ./crkme1 7bzz
</span><span class='line'>Wrong
</span><span class='line'>Count: 100017 <span class="c"># 2 extra instructions executed</span>
</span><span class='line'><span class="nv">$ </span>pin -t myins.so – ./crkme1 7@zz
</span><span class='line'>Wrong
</span><span class='line'>Count: 100015
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this point you probably have a good idea why this is happening. But let’s look at the assembly code.</p>

<h3 id="gdb-and-strncmp">GDB and strncmp</h3>
<p>Good thing we compiled our binary with debug information. Let’s look at the assembly code for strncmp:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Running crkme1 in gdb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># q starts gdb in quiet mode</span>
</span><span class='line'><span class="nv">$ </span>gdb ./crkme1 -q
</span><span class='line'>Reading symbols from /root/Desktop/kek/crkme1…done.
</span><span class='line'><span class="c"># putting a break on strncmp, this is possible because we compiled with -ggdb option</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>strncmp
</span><span class='line'>Breakpoint 1 at 0x8048350
</span><span class='line'><span class="c"># passing 7bzz as a run-time argument. r stands for run</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> r 7bzz
</span><span class='line'>Starting program: /root/Desktop/kek/crkme1 7bzz&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Breakpoint 1, 0xb7f82b80 in ?? <span class="o">()</span> from /lib/i386-linux-gnu/i686/cmov/libc.so.6
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> disass
</span><span class='line'>No <span class="k">function </span>contains program counter <span class="k">for </span>selected frame.
</span><span class='line'><span class="c"># oops what happened here?</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To get a better a picture of the problem, we’re going to go through the same process in verbose mode in GDB using the <code>set verbose on</code> command.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Running in gdb with verbose on </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gdb ./crkme1 -q
</span><span class='line'>Reading symbols from /root/Desktop/kek/crkme1…done.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">set </span>verbose on
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>strncmp
</span><span class='line'>Breakpoint 1 at 0x8048350
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> r 7bzz
</span><span class='line'>Starting program: /root/Desktop/kek/crkme1 7bzz
</span><span class='line'>Reading symbols from /lib/ld-linux.so.2…<span class="o">(</span>no debugging symbols found<span class="o">)</span>…done.
</span><span class='line'>Loaded symbols <span class="k">for</span> /lib/ld-linux.so.2
</span><span class='line'>Reading symbols from system-supplied DSO at 0xb7fe1000…<span class="o">(</span>no debugging symbols found<span class="o">)</span>…done.
</span><span class='line'><span class="c"># aha, no debugging symbols found for libc6</span>
</span><span class='line'>Reading symbols from /lib/i386-linux-gnu/i686/cmov/libc.so.6…<span class="o">(</span>no debugging symbols found<span class="o">)</span>…done.
</span><span class='line'>Loaded symbols <span class="k">for</span> /lib/i386-linux-gnu/i686/cmov/libc.so.6&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Breakpoint 1, 0xb7f82b80 in ?? <span class="o">()</span> from /lib/i386-linux-gnu/i686/cmov/libc.so.6
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> disass
</span><span class='line'>No <span class="k">function </span>contains program counter <span class="k">for </span>selected frame.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>According to line 12, we we need the debugging symbols for libc to look inside the code. 
On Kali use <code>apt-get install libc6-dbg</code>. Here we go again:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>After installing libc6-dbg </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">root@kali:</span><span class="err">~/</span><span class="nf">Desktop</span><span class="o">/</span><span class="nv">kek#</span> <span class="nv">gdb</span> <span class="nv">.</span><span class="o">/</span><span class="nv">crkme1</span> <span class="o">-</span><span class="nv">q</span>
</span><span class='line'><span class="nf">Reading</span> <span class="nv">symbols</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">root</span><span class="o">/</span><span class="nv">Desktop</span><span class="o">/</span><span class="nv">kek</span><span class="o">/</span><span class="nv">crkme1</span><span class="err">…</span><span class="nv">done.</span>
</span><span class='line'><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">break</span> <span class="nv">strncmp</span>
</span><span class='line'><span class="nf">Breakpoint</span> <span class="mi">1</span> <span class="nv">at</span> <span class="mh">0x8048350</span>
</span><span class='line'><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">r</span> <span class="mi">7</span><span class="nv">bzz</span>
</span><span class='line'><span class="nf">Starting</span> <span class="nv">program</span><span class="p">:</span> <span class="o">/</span><span class="nv">root</span><span class="o">/</span><span class="nv">Desktop</span><span class="o">/</span><span class="nv">kek</span><span class="o">/</span><span class="nv">crkme1</span> <span class="mi">7</span><span class="nv">bzz</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">Breakpoint</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">__strncmp_ssse3</span> <span class="p">()</span>
</span><span class='line'>    <span class="nf">at</span> <span class="nv">..</span><span class="o">/</span><span class="nv">sysdeps</span><span class="o">/</span><span class="nv">i386</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">multiarch</span><span class="o">/</span><span class="nv">strcmp</span><span class="o">-</span><span class="nb">ss</span><span class="nv">se3.S</span><span class="p">:</span><span class="mi">65</span>
</span><span class='line'><span class="err">65</span>	<span class="nf">..</span><span class="o">/</span><span class="nv">sysdeps</span><span class="o">/</span><span class="nv">i386</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">multiarch</span><span class="o">/</span><span class="nv">strcmp</span><span class="o">-</span><span class="nb">ss</span><span class="nv">se3.S</span><span class="p">:</span> <span class="nv">No</span> <span class="nv">such</span> <span class="nv">file</span> <span class="nv">or</span> <span class="nb">di</span><span class="nv">rectory.</span>
</span><span class='line'><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nb">di</span><span class="nv">sass</span>
</span><span class='line'><span class="nf">Dump</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">code</span> <span class="nv">for</span> <span class="nv">function</span> <span class="nv">__strncmp_ssse3</span><span class="p">:</span>
</span><span class='line'><span class="err">=&amp;</span><span class="nf">gt</span><span class="c1">; 0xb7f82b80 &amp;lt;+0&amp;gt;:	push   ebp</span>
</span><span class='line'>   <span class="err">0</span><span class="nf">xb7f82b81</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+1&amp;gt;:	mov    edx,DWORD PTR [esp+0x8]</span>
</span><span class='line'>   <span class="err">0</span><span class="nf">xb7f82b85</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+5&amp;gt;:	mov    eax,DWORD PTR [esp+0xc]</span>
</span><span class='line'>   <span class="err">0</span><span class="nf">xb7f82b89</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+9&amp;gt;:	mov    ebp,DWORD PTR [esp+0x10]</span>
</span><span class='line'>   <span class="err">0</span><span class="nf">xb7f82b8d</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+13&amp;gt;:	cmp    ebp,0x10</span>
</span><span class='line'>   <span class="err">0</span><span class="nf">xb7f82b90</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+16&amp;gt;:	jb     0xb7f843d0 &amp;lt;__strncmp_ssse3+6224&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we can see what happens in strncmp. The following is the cleaned up version of the assembly of strncmp.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>strncmp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="c1">; assuming we called strncmp (argv[1],code,32);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="mh">0xb7f82b80</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+0&amp;gt;:	push   ebp</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f82b81</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+1&amp;gt;: 	mov    edx,DWORD PTR [esp+0x8]  ; argv[1] or “7bzz”</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f82b85</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+5&amp;gt;: 	mov    eax,DWORD PTR [esp+0xc]  ; code or “7bc3 ..”</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f82b89</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+9&amp;gt;: 	mov    ebp,DWORD PTR [esp+0x10] ; 32 or 0x20</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f82b8d</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+13&amp;gt;: 	cmp    ebp,0x10                 ; 32 compared to 0x10 (16 decimal)</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f82b90</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+16&amp;gt;: 	jb     0xb7f843d0 &amp;lt;__strncmp_ssse3+6224&amp;gt;</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="c1">; if number of bytes to compare is bigger than 16</span>
</span><span class='line'><span class="c1">; let’s assume it is not and see what happens next</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843d0</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6224&amp;gt;:	test   ebp,ebp  ; if (ebp == 0) goto 0xb7f843c3</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843d2</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6226&amp;gt;:	je     0xb7f843c3 &amp;lt;__strncmp_ssse3+6211&amp;gt; </span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843d4</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6228&amp;gt;:	movzx  ecx,BYTE PTR [eax] ; ecx = code</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843d7</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6231&amp;gt;:	cmp    BYTE PTR [edx],cl  ; if (code[0] != argv[1][0]) goto 0xb7f843b0;</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843d9</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6233&amp;gt;:	jne    0xb7f843b0 &amp;lt;__strncmp_ssse3+6192&amp;gt;</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843db</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6235&amp;gt;:	test   cl,cl  ; if (code[0] == 0) goto 0xb7f843c3; // have we reached the end of code?</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843dd</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6237&amp;gt;:	je     0xb7f843c3 &amp;lt;__strncmp_ssse3+6211&amp;gt;</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843df</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6239&amp;gt;:	cmp    ebp,0x1  ; if (counter == 1) goto 0xb7f843c3; // was this our last compare?</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843e2</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6242&amp;gt;:	je     0xb7f843c3 &amp;lt;__strncmp_ssse3+6211&amp;gt;</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843e4</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6244&amp;gt;:	movzx  ecx,BYTE PTR [eax+0x1]	; ecx = code[1];</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843e8</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6248&amp;gt;:	cmp    BYTE PTR [edx+0x1],cl  ; if (code[1] != argv[1][1]) goto 0xb7f843b0;</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843eb</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6251&amp;gt;:	jne    0xb7f843b0 &amp;lt;__strncmp_ssse3+6192&amp;gt;</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843ed</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6253&amp;gt;:	test   cl,cl  ; if (code[1] == 0) goto 0xb7f843c3; // have we reached the end of code?</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843ef</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6255&amp;gt;:	je     0xb7f843c3 &amp;lt;__strncmp_ssse3+6211&amp;gt;</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843f1</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6257&amp;gt;:	cmp    ebp,0x2</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f843f4</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6260&amp;gt;:	je     0xb7f843c3 &amp;lt;__strncmp_ssse3+6211&amp;gt;</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="c1">; similar byte compares until the end</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f8453f</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6591&amp;gt;:	test   cl,cl</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f84541</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6593&amp;gt;:	je     0xb7f843c3 &amp;lt;__strncmp_ssse3+621</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f84547</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6599&amp;gt;:	cmp    ebp,0xf</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f8454a</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6602&amp;gt;:	je     0xb7f843c3 &amp;lt;__strncmp_ssse3+621</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f84550</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6608&amp;gt;:	movzx  ecx,BYTE PTR [eax+0xf]</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f84554</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6612&amp;gt;:	cmp    BYTE PTR [edx+0xf],cl</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f84557</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6615&amp;gt;:	jne    0xb7f843b0 &amp;lt;__strncmp_ssse3+619</span>
</span><span class='line'><span class="err">0</span><span class="nf">xb7f8455d</span> <span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;+6621&amp;gt;;	test   cl,cl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can see that the implementation has unrolled the for and compares 16 bytes one by one. If a character is correct, two more instructions are executed (as we saw) which are <code>test   cl,cl</code> and <code>je     0xb7f843c3</code> which basically checks if we have reached the end of first string. Now we know why. Let us build our tool.</p>

<h3 id="pinsolver-mk1">PinSolver Mk1</h3>
<p>I am going to use Python’s subprocess module and reuse <a href="http://parsiya.net/blog/2014-05-25-pasting-shellcode-into-gdb-using-python/">some old code</a>. The script simply iterates through all valid characters (note: do not include space or some other special characters). For this example I am going to use alphanumeric characters. Character with the largest number of executed instructions will be chose and we move on to the next character.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">Popen</span><span class="p">,</span> <span class="n">PIPE</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;create-a-set-of-alphanumeric-chars&quot;</span><span class="o">&gt;</span><span class="n">create</span> <span class="n">a</span> <span class="nb">set</span> <span class="n">of</span> <span class="n">alphanumeric</span> <span class="n">chars</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">alphanumeric</span> <span class="o">=</span> <span class="err">“</span><span class="mo">01234567</span><span class="mi">89</span><span class="err">”</span> <span class="o">+</span> <span class="err">“</span><span class="n">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><span class="err">”</span> <span class="o">+</span> <span class="err">“</span><span class="n">abcdefghijklmnopqrstuvwxyz</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">solution</span> <span class="o">=</span> <span class="p">[]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">flag</span> <span class="o">=</span> <span class="bp">False</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span> <span class="p">(</span><span class="bp">True</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">maxcount</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">candidate_char</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">alphanumeric</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># construct</span>
</span><span class='line'>    <span class="n">fez</span> <span class="o">=</span> <span class="err">““</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">solution</span><span class="p">)</span> <span class="o">+</span> <span class="n">char</span>
</span><span class='line'>    <span class="n">proc</span> <span class="o">=</span> <span class="n">Popen</span><span class="p">([</span><span class="err">“</span><span class="n">pin</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">-</span><span class="n">t</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">myins</span><span class="o">.</span><span class="n">so</span><span class="err">”</span><span class="p">,</span> <span class="err">“–”</span><span class="p">,</span><span class="err">”</span><span class="o">./</span><span class="n">crkme1</span><span class="err">”</span><span class="p">,</span> <span class="n">fez</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">PIPE</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># read output and split by lines</span>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;Correct&quot;</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;Code found: &quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">solution</span><span class="p">)</span>
</span><span class='line'>  <span class="k">break</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>  <span class="n">count</span> <span class="o">=</span> <span class="nb">int</span> <span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">maxcount</span><span class="p">):</span>
</span><span class='line'>    <span class="n">maxcount</span> <span class="o">=</span> <span class="n">count</span>
</span><span class='line'>    <span class="n">candidate_char</span> <span class="o">=</span> <span class="n">char</span>
</span><span class='line'>
</span><span class='line'><span class="c"># print (&quot;Trying %s - Count is: %d - Maxcount is: %d - Candidate_char is: %s&quot;) % (fez, count, maxcount, candidate_char)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># after a loop has finished, add the chosen char to the solution</span>
</span><span class='line'>  <span class="n">solution</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">candidate_char</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note: If your VM has multiple CPUs this will not work. At this moment I do not know why.</p>

<p>TODO in next chapter:</p>

<ol>
  <li>Try to find some simple crackmes2 from CTFs to run this tool on</li>
  <li>Find a way to increase pin’s performance</li>
  <li>Why is the instruction count not calculated correctly occasionally when VM has multiple CPUs?</li>
</ol>

<p>As usual, if there is a any feedback please feel free to comment or contact me on Twitter. My handle is in the side bar —-&gt;.</p>
]]></content>
  </entry>
  
</feed>
