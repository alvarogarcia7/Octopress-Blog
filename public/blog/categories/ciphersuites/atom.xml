<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ciphersuites, | Parsiya's Den]]></title>
  <link href="http://parsiya.net/blog/categories/ciphersuites/atom.xml" rel="self"/>
  <link href="http://parsiya.net/"/>
  <updated>2014-10-04T12:48:02-04:00</updated>
  <id>http://parsiya.net/</id>
  <author>
    <name><![CDATA[Parsiya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Do I TLS Ciphersuite?]]></title>
    <link href="http://parsiya.net/blog/2013-11-17-how-do-i-tls-ciphersuite/"/>
    <updated>2013-11-17T21:20:00-05:00</updated>
    <id>http://parsiya.net/blog/how-do-i-tls-ciphersuite</id>
    <content type="html"><![CDATA[<p>“Should we use RC4 or AES-CBC ?”
This is a legitimate question. Many have heard of the highly publicized attacks against AES-CBC (CRIME, BEAST etc) and lean towards RC4. 
If asked (granted no one asks me), my answer would be: If you can control web servers (not feasible in all situations) and users’ browsers 
(almost impossible), upgrade to TLS 1.2 and go with AES-GCM. However, not many browsers supported these and to be honest, more users trumps loss 
of security in many cases.</p>

<!-- more -->

<p>RC4 was a masterpiece for its time (it still is) but it has extreme biases in its PRNG and attacks are prevalent <a href="http://www.isg.rhul.ac.uk/tls/">[1]</a> and because it only takes a 
seed (with no nonce), if a key is re-used, one can find the XOR of plaintexts by XOR-ing two ciphertexts. 
A recent demonstration of this weakness was in the popular “Whatsapp” application where the same key was used in both directions <a href="https://blog.thijsalkema.de/blog/2013/10/08/piercing-through-whatsapp-s-encryption/" title="Octopress FTW">[2]</a>. Granted 
This was an application design flaw but Whatsapp has quite the security history (google Whatsapp and IMEI).</p>

<p>A few days ago Microsoft released security advisory 2868725 “Recommendation to disable RC4.” 
They found out that less than 4% of their 5 million sample websites only worked with RC4 (although from my personal experience RC4 share is 
probably higher) <a href="http://blogs.technet.com/b/srd/archive/2013/11/12/security-advisory-2868725-recommendation-to-disable-rc4.aspx">[3]</a>.</p>

<p>Major browsers are also starting to support TL2 1.2 and AES-GCM.
Chrome has had TLS 1.2 support for a while (Since Chrome 29) <a href="https://src.chromium.org/viewvc/chrome?revision=203090&amp;view=revision">[4]</a> and Chrome 31 (released a few days ago) has support for AES-GCM <a href="https://src.chromium.org/viewvc/chrome?revision=217716&amp;view=revision">[5]</a>.</p>

<p>Firefox has implemented TLS 1.2. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=861266">[6]</a> and AES-GCM <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=880543">[7]</a>.</p>

<p>IE 11 turns TLS 1.2 on by default <a href="http://blogs.msdn.com/b/ie/archive/2013/11/12/ie11-automatically-makes-over-40-of-the-web-more-secure-while-making-sure-sites-continue-to-work.aspx (has some good information in between IE propaganda)">[8]</a>.</p>

<p>A day after I wrote the draft of this blog post, Adam Langley (author of patches in links <a href="https://src.chromium.org/viewvc/chrome?revision=203090&amp;view=revision">4</a> and <a href="https://src.chromium.org/viewvc/chrome?revision=217716&amp;view=revision">5</a>) wrote a blogpost named 
“A roster of TLS cipher suites weaknesses” <a href="http://googleonlinesecurity.blogspot.com/2013/11/a-roster-of-tls-cipher-suites-weaknesses.html">[9]</a>. He discusses the strengths and weaknesses of the aforementioned three different ciphersuites 
(RC4, AES-CBC and AES-GCM) on top of Chacha20,Poly1305 (if you do not know why the numbers are not powers of 2, google it :D).</p>

<p>tl;dr: seems like AES-GCM is the flavor of the month. More and more browsers are supporting it, it may be a good time to start moving towards it.</p>

<p>PS: I know, I will get the contact page fixed soon (tm).</p>

]]></content>
  </entry>
  
</feed>
